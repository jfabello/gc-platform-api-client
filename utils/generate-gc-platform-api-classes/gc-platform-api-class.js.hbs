/**
{{#if description}}
 * {{description}}
{{/if}}
 * @module {{moduleName}}
{{#if documentationURL}}
 * @documentation {{documentationURL}}
{{/if}}
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on {{generationTimestamp}}

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "{{gcPlatformAPIClientErrorsPath}}";

// Symbols
import { symbols } from "{{gcPlatformAPIClientSymbolsPath}}";

/** @typedef {import("{{gcPlatformAPIClientClassPath}}").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

{{#each definitions}}
/**
{{#if this.description}}
 * {{this.description}}
{{/if}}
 * @typedef {object} {{@key}}
{{#each this.properties}}
 * @property {{enclose_in_curly_braces this.jsDocType}} {{#if this.required}}{{@key}}{{else}}[{{@key}}]{{/if}}{{#if this.description}} - {{escape_block_comment_terminator this.description}}{{/if}}
{{/each}}
 */
 
{{/each}}

/**
 * {{className}}{{#if description}} - {{description}}{{/if}}
 * @class {{className}}
 */
class {{className}}API {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the {{className}} class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	{{#each methods}}
	/**
	 * {{this.summary}}
	 * @async
	{{#if this.parameters.path}}
	{{#each this.parameters.path}}
	 * @param {{enclose_in_curly_braces this.jsDocType}} {{this.name}} - {{this.description}}
	{{/each}}
	{{/if}}
	{{#if this.parameters.headers}}
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	{{#each this.parameters.headers}}
	 * {{enclose_in_curly_braces this.jsDocType}} {{this.name}} - {{#if this.required}}(required){{else}}(optional){{/if}} {{this.description}}
	{{/each}}
	{{/if}}
	{{#if this.parameters.query}}
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	{{#each this.parameters.query}}
	 * @param {{enclose_in_curly_braces this.jsDocType}} {{#if this.required}}query.{{this.name}}{{else}}[query.{{this.name}}]{{/if}} -  {{this.description}}
	{{/each}}
	{{/if}}
	{{#if this.parameters.body}}
	 * @param {{enclose_in_curly_braces this.parameters.body.jsDocType}} {{#if this.parameters.body.required}}body{{else}}[body]{{/if}} - The body of the request. An empty object or null is allowed if the body is optional.
	{{/if}}
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "{{this.path}}" endpoint.
	{{#if this.parameters.path}}
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 {{/if}}
	{{#if this.parameters.headers}}
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 {{#unless (no_headers_required this.parameters)}}
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_MISSING} If a required header is missing.
	 {{/unless}}
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 {{/if}}
	{{#if this.parameters.query}}
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 {{#unless (no_query_parameters_required this.parameters)}}
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 {{/unless}}
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 {{/if}}
	{{#if this.parameters.body}}
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 {{/if}}
	{{#if this.deprecated}}
	 * @deprecated
	 {{/if}}
	 */
	{{this.name}}({{generate_parameters_string this.parameters}}) {
		const endpointPath = "{{this.path}}";
		const endpointMethod = "{{this.httpMethod}}";

		{{#if this.parameters.path}}
		// Check the path parameters
		{{#each this.parameters.path}}
		if (this.#checkJSONSchemaType({{this.name}}, "{{this.jsonSchemaType}}") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "{{this.name}}", "{{this.jsonSchemaType}}");
		}

		{{/each}}
		{{/if}}
		{{#if this.parameters.headers}}
		// Check the header parameters
		{{#if (no_headers_required this.parameters)}}
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
		{{#each this.parameters.headers}}
			if ("{{this.name}}" in headers && this.#checkJSONSchemaType(headers["{{this.name}}"], "{{this.jsonSchemaType}}") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "{{this.name}}", "{{this.jsonSchemaType}}");
			}
		{{/each}}
		}

		{{else}}
		if (typeof headers !== "object" || headers === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}
		
		{{#each this.parameters.headers}}
		{{#if this.required}}
		if ("{{this.name}}" in headers === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_MISSING(endpointPath, endpointMethod, "{{this.name}}");
		}

		{{/if}}
		if ({{#unless this.required}}"{{this.name}}" in headers && {{/unless}}this.#checkJSONSchemaType(headers["{{this.name}}"], "{{this.jsonSchemaType}}") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "{{this.name}}", "{{this.jsonSchemaType}}");
		}

		{{/each}}
		{{/if}}
		{{/if}}
		{{#if this.parameters.query}}
		// Check the query string parameters
		{{#if (no_query_parameters_required this.parameters)}}
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
		{{#each this.parameters.query}}
			if ("{{this.name}}" in query && this.#checkJSONSchemaType(query["{{this.name}}"], "{{this.jsonSchemaType}}") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "{{this.name}}", "{{this.jsonSchemaType}}");
			}
		{{/each}}
		}

		{{else}}
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		{{#each this.parameters.query}}
		{{#if this.required}}
		if ("{{this.name}}" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "{{this.name}}");
		}

		{{/if}}
		if ({{#unless this.required}}"{{this.name}}" in query && {{/unless}}this.#checkJSONSchemaType(query["{{this.name}}"], "{{this.jsonSchemaType}}") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "{{this.name}}", "{{this.jsonSchemaType}}");
		}

		{{/each}}
		{{/if}}
		{{/if}}
		{{#if this.parameters.body}}
		// Check the body argument
		{{#if this.parameters.body.required}}
		if (this.#checkJSONSchemaType(body, "{{this.parameters.body.jsonSchemaType}}") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "{{this.parameters.body.jsonSchemaType}}", true);
		}
		{{else}}
		if (this.#checkJSONSchemaType(body, "{{this.parameters.body.jsonSchemaType}}") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "{{this.parameters.body.jsonSchemaType}}", false);
		}
		{{/if}}

		{{/if}}
		const apiCallOptions = {};
		{{#if this.parameters.path}}
		apiCallOptions.pathParameters = {};
		{{#each this.parameters.path}}
		apiCallOptions.pathParameters.{{this.name}} = {{this.name}};
		{{/each}}
		{{/if}}
		{{#if this.parameters.headers}}
		apiCallOptions.headers = headers;
		{{/if}}
		{{#if this.parameters.query}}
		apiCallOptions.queryParameters = query;
		{{/if}}
		{{#if this.parameters.body}}
		apiCallOptions.body = body;
		{{/if}}

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	{{/each}}
	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { {{className}}API };