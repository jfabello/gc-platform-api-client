/**
 * Rules and alerts
 * @module gc-platform-api-alerting
 * @documentation https://developer.genesys.cloud/notificationsalerts/alerting/alerting-apis
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.303Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} AddressableEntityRef
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} AlertingUnreadStatus
 * @property {boolean} unread - True is alert is unread, false if it has not been.
 */
 
/**
 * @typedef {object} AlertNotification
 * @property {string} recipient - The entity to receive the notification.
 * @property {string[]} notificationTypes - The notification types the user will receive.
 * @property {string} [locale] - The locale whose language will be used when sending alerts.  Locale should be in theformat language_COUNTRY where language is always lower case and country is always upper case.
 */
 
/**
 * @typedef {object} AlertRequest
 * @property {string} type - The action being taken on the alert.
 * @property {string} [dateStart] - The start date of the mute/snooze period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateEnd] - The end date of the mute/snooze period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {UnreadFields} [unread] - The fields need for an unread update requests
 * @property {boolean} [validRequest]
 */
 
/**
 * @typedef {object} CommonAlertBulkUpdateRequest
 * @property {string} type - The action to take
 * @property {string[]} alertIds - The user supplied alert ids to be muted
 * @property {MuteSnoozeFields} [muteSnooze] - The fields need for a mute or snooze requests
 * @property {UnreadFields} [unread] - The fields need for an unread update requests
 */
 
/**
 * @typedef {object} CommonAllAlertUpdateRequest
 * @property {string} type - The action to take
 * @property {UnreadFields} [unread] - The fields need for an unread update requests
 */
 
/**
 * @typedef {object} CommonRule
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - Name of the rule
 * @property {string} [description] - The description of the rule.
 * @property {boolean} [enabled] - Indicates if the rule is enabled.
 * @property {AlertNotification[]} [notifications] - The alert notification types to trigger when alarm state changes as well as the users they will be sent to.
 * @property {boolean} [sendExitingAlarmNotifications] - Indicates if the alert will send a notification when it is closed.
 * @property {number} [waitBetweenNotificationMs] - The amount of time in milliseconds to wait between notification.
 * @property {CommonRuleConditions} [conditions] - The set of metric conditions that would trigger an alert.
 * @property {string} type - The type of the rule.
 * @property {boolean} [inAlarm] - Indicates if the rule is in alarm state.
 * @property {UserReference} [user] - The entity that created the rule.
 * @property {number} [version] - The current version number of the rule.
 * @property {string} [dateCreated] - The creation date of the rule when the rule was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateLastModified] - The timestamp of the last update to the rule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CommonRuleBulkDeleteRequest
 * @property {string[]} ruleIds - The user supplied rule ids to be deleted
 */
 
/**
 * @typedef {object} CommonRuleBulkUpdateNotificationsRequest
 * @property {string[]} ruleIds - The user supplied rules ids to be updated
 * @property {ModifiableRuleProperties} [properties] - The rule properties to be updated
 * @property {string[]} [typesToAdd] - Collection of alerting notification types to add for all entities in the rules
 * @property {string[]} [typesToRemove] - Collection of alerting notification types to remove for all entities in the rules
 */
 
/**
 * @typedef {object} CommonRuleConditions
 * @property {CommonRuleConditions[]} [clauses] - The list of predicates groups to be evaluated
 * @property {CommonRulePredicate[]} predicates - The list of rule metric predicates to be evaluated.
 * @property {string} type - the logic operator performed.
 * @property {string} [id] - The id.
 */
 
/**
 * @typedef {object} CommonRulePredicate
 * @property {string} metricType - The type of metric being evaluated.
 * @property {string} metricValueType - The type of metric value being evaluated.
 * @property {string} comparisonOperator - The comparison operator being performed on the metric.
 * @property {number} value - The value the metric will be compared to.
 * @property {string} [status] - The status of the entity corresponding to the metric.
 * @property {string} [topic] - The operational console topic corresponding to the metric.
 * @property {CommonRulePredicateEntity} entity - The entity whose metric is being represented.
 * @property {string} [mediaType] - The media type of the conversation the metric describes.
 * @property {string} metric - The metric being evaluated.
 */
 
/**
 * @typedef {object} CommonRulePredicateEntity
 * @property {string} entityType - Specifies the type of entity being evaluated
 * @property {AddressableEntityRef} [user] - User id of the entity being monitored
 * @property {AddressableEntityRef} [group] - Group id of the entity being monitored
 * @property {AddressableEntityRef} [queue] - Queue id of the entity being monitored
 * @property {AddressableEntityRef} [team] - Team id of the entity being monitored
 */
 
/**
 * @typedef {object} GetAlertQuery
 * @property {string} ruleType - The rule type of the alerts the query will return
 * @property {string} queryType - The type of query being performed.
 * @property {string} [alertStatus] - The status of the alerts the query will return.
 * @property {string} [viewedStatus] - The view status of the alerts the query will return.
 * @property {number} [pageNumber] - The page number of the queried response
 * @property {number} [pageSize] - The number of entities to return of the queried response.  The max is 25
 * @property {string} [sortBy] - The field to sort responses by.  The accepted choices are Name and DateStart
 * @property {string} [sortOrder] - The order in which response will be sorted.  The accepted choices are Asc and Desc
 */
 
/**
 * @typedef {object} GetRulesQuery
 * @property {string} ruleType - The rule type of the alerts the query will return
 * @property {string} queryType - The type of query being performed.
 * @property {string} [enabledType] - The state of the rule the query will return.  The accepted choices are Enabled, Disabled, or All
 * @property {number} [pageNumber] - The page number of the queried response
 * @property {number} [pageSize] - The number of entities to return of the queried response.  The max is 25
 * @property {string} [sortBy] - The field to sort responses by.  The accepted choices are Name and DateStart
 * @property {string} [sortOrder] - The order in which response will be sorted.  The accepted choices are Asc and Desc
 * @property {string} [ruleName] - The name of the rule being queries.
 * @property {string} [nameSearchType] - Specifies how strict the name search needs to be. Expected values are Exact and Contains if querying by name.
 */
 
/**
 * @typedef {object} ModifiableRuleProperties
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - Name of the rule
 * @property {string} [description] - The description of the rule.
 * @property {boolean} [enabled] - Indicates if the rule is enabled.
 * @property {AlertNotification[]} [notifications] - The alert notification types to trigger when alarm state changes as well as the users they will be sent to.
 * @property {boolean} [sendExitingAlarmNotifications] - Indicates if the alert will send a notification when it is closed.
 * @property {number} [waitBetweenNotificationMs] - The amount of time in milliseconds to wait between notification.
 * @property {CommonRuleConditions} [conditions] - The set of metric conditions that would trigger an alert.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} MuteSnoozeFields
 * @property {string} dateStart - The start date of the mute/snooze period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} dateEnd - The end date of the mute/snooze period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} UnreadFields
 * @property {boolean} state - The new unread state of the alert
 */
 
/**
 * @typedef {object} UserReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 

/**
 * Alerting - Rules and alerts
 * @class Alerting
 */
class AlertingAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the Alerting class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Get an alert
	 * @async
	 * @param {string} alertId - Alert ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/alerts/{alertId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getAlertingAlert(alertId) {
		const endpointPath = "/api/v2/alerting/alerts/{alertId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(alertId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "alertId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.alertId = alertId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an alert read status
	 * @async
	 * @param {string} alertId - Alert ID
	 * @param {AlertingUnreadStatus} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/alerts/{alertId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putAlertingAlert(alertId, body) {
		const endpointPath = "/api/v2/alerting/alerts/{alertId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(alertId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "alertId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.alertId = alertId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an alert
	 * @async
	 * @param {string} alertId - Alert ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/alerts/{alertId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteAlertingAlert(alertId) {
		const endpointPath = "/api/v2/alerting/alerts/{alertId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(alertId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "alertId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.alertId = alertId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Allows an entity to mute/snooze an alert or update the unread status of the alert.
	 * @async
	 * @param {string} alertId - Alert ID
	 * @param {AlertRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/alerts/{alertId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchAlertingAlert(alertId, body) {
		const endpointPath = "/api/v2/alerting/alerts/{alertId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(alertId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "alertId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.alertId = alertId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk alert updates
	 * @async
	 * @param {CommonAlertBulkUpdateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/alerts/bulk" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchAlertingAlertsBulk(body) {
		const endpointPath = "/api/v2/alerting/alerts/bulk";
		const endpointMethod = "PATCH";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a paged list of alerts. The max page size is 50
	 * @async
	 * @param {GetAlertQuery} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/alerts/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postAlertingAlertsQuery(body) {
		const endpointPath = "/api/v2/alerting/alerts/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete all alerts for the user
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/alerts/all" endpoint.
	 */
	deleteAlertingAlertsAll() {
		const endpointPath = "/api/v2/alerting/alerts/all";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates all alerts
	 * @async
	 * @param {CommonAllAlertUpdateRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/alerts/all" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchAlertingAlertsAll(body) {
		const endpointPath = "/api/v2/alerting/alerts/all";
		const endpointMethod = "PATCH";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a rule.
	 * @async
	 * @param {string} ruleId - Rule Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getAlertingRule(ruleId) {
		const endpointPath = "/api/v2/alerting/rules/{ruleId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.ruleId = ruleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a rule
	 * @async
	 * @param {string} ruleId - Rule Id
	 * @param {ModifiableRuleProperties} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putAlertingRule(ruleId, body) {
		const endpointPath = "/api/v2/alerting/rules/{ruleId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.ruleId = ruleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a rule.
	 * @async
	 * @param {string} ruleId - Rule Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteAlertingRule(ruleId) {
		const endpointPath = "/api/v2/alerting/rules/{ruleId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.ruleId = ruleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk update of notification lists
	 * @async
	 * @param {CommonRuleBulkUpdateNotificationsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/rules/bulk" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchAlertingRulesBulk(body) {
		const endpointPath = "/api/v2/alerting/rules/bulk";
		const endpointMethod = "PATCH";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk remove rules
	 * @async
	 * @param {CommonRuleBulkDeleteRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/rules/bulk/remove" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postAlertingRulesBulkRemove(body) {
		const endpointPath = "/api/v2/alerting/rules/bulk/remove";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a paged list of rules.  The max size of the page is 50 items.
	 * @async
	 * @param {GetRulesQuery} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/rules/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postAlertingRulesQuery(body) {
		const endpointPath = "/api/v2/alerting/rules/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a Rule.
	 * @async
	 * @param {CommonRule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/alerting/rules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postAlertingRules(body) {
		const endpointPath = "/api/v2/alerting/rules";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { AlertingAPI };