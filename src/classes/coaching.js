/**
 * Schedule and manage coaching appointments
 * @module gc-platform-api-coaching
 * @documentation https://developer.genesys.cloud/routing/conversations/coaching-apis
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.326Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * Update coaching appointment request
 * @typedef {object} AddConversationRequest
 * @property {string} conversationId - The id of the conversation to add
 */
 
/**
 * @typedef {object} CoachingAnnotation
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {UserReference} [createdBy] - The user who created the annotation.
 * @property {string} [dateCreated] - The date/time the annotation was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {UserReference} [modifiedBy] - The last user to modify the annotation.
 * @property {string} [dateModified] - The date/time the annotation was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} text - The text of the annotation.
 * @property {boolean} [isDeleted] - Flag indicating whether the annotation is deleted.
 * @property {string} [accessType] - Determines the permissions required to view this item.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CoachingAnnotationCreateRequest
 * @property {string} text - The text of the annotation.
 * @property {string} accessType - Determines the permissions required to view this item.
 */
 
/**
 * @typedef {object} CoachingAppointmentAggregateRequest
 * @property {string} interval - Interval to aggregate across. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 * @property {string[]} [metrics] - A list of metrics to aggregate.  If omitted, all metrics are returned.
 * @property {string[]} [groupBy] - An optional list of items by which to group the result data.
 * @property {QueryRequestFilter} filter - The filter applied to the data
 */
 
/**
 * Coaching appointment response
 * @typedef {object} CoachingAppointmentResponse
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name] - The name of coaching appointment
 * @property {string} [description] - The description of coaching appointment
 * @property {string} [dateStart] - The date/time the coaching appointment starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [lengthInMinutes] - The duration of coaching appointment in minutes
 * @property {string} [status] - The status of coaching appointment
 * @property {UserReference} [facilitator] - The facilitator of coaching appointment
 * @property {UserReference[]} [attendees] - The list of attendees attending the coaching
 * @property {UserReference} [createdBy] - The user who created the coaching appointment
 * @property {string} [dateCreated] - The date/time the coaching appointment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {UserReference} [modifiedBy] - The last user to modify the coaching appointment
 * @property {string} [dateModified] - The date/time the coaching appointment was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {ConversationReference[]} [conversations] - The list of conversations associated with coaching appointment.
 * @property {DocumentReference[]} [documents] - The list of documents associated with coaching appointment.
 * @property {boolean} [isOverdue] - Whether the appointment is overdue.
 * @property {WfmScheduleReference} [wfmSchedule] - The Workforce Management schedule the appointment is associated with.
 * @property {string} [dateCompleted] - The date/time the coaching appointment was set to completed status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string[]} [externalLinks] - The list of external links related to the appointment
 * @property {string} [location] - The location of the appointment
 * @property {boolean} [shareInsightsData] - Whether to share the insight data
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CoachingAppointmentStatusRequest
 * @property {string} status - The status of the coaching appointment
 */
 
/**
 * @typedef {object} CoachingNotification
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name] - The name of the appointment for this notification.
 * @property {boolean} [markedAsRead] - Indicates if notification is read or unread
 * @property {string} [actionType] - Action causing the notification.
 * @property {string} [relationship] - The relationship of this user to this notification's appointment
 * @property {string} [dateStart] - The start time of the appointment relating to this notification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [lengthInMinutes] - The duration of the appointment on this notification
 * @property {string} [status] - The status of the appointment for this notification
 * @property {UserReference} [user] - The user of this notification
 * @property {CoachingAppointmentResponse} [appointment] - The appointment
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CoachingSlotsRequest
 * @property {string} interval - Range of time to get slots for scheduling coaching appointments. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 * @property {number} lengthInMinutes - The duration of coaching appointment to schedule in 15 minutes granularity up to maximum of 60 minutes
 * @property {string[]} attendeeIds - List of attendees to determine coaching appointment slots
 * @property {string[]} [facilitatorIds] - List of facilitators to determine coaching appointment slots
 * @property {string[]} [interruptibleAppointmentIds] - List of appointment ids to exclude from consideration when determining blocked slots
 */
 
/**
 * @typedef {object} ConversationReference
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * Create coaching appointment request
 * @typedef {object} CreateCoachingAppointmentRequest
 * @property {string} name - The name of coaching appointment.
 * @property {string} description - The description of coaching appointment.
 * @property {string} dateStart - The date/time the coaching appointment starts. Times will be rounded down to the minute. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} lengthInMinutes - The duration of coaching appointment in minutes.
 * @property {string} [facilitatorId] - The facilitator ID of coaching appointment.
 * @property {string[]} attendeeIds - IDs of attendees in the coaching appointment.
 * @property {string[]} [conversationIds] - IDs of conversations associated with this coaching appointment.
 * @property {string[]} [documentIds] - IDs of documents associated with this coaching appointment.
 * @property {WfmScheduleReference} [wfmSchedule] - The Workforce Management schedule the appointment is associated with.
 * @property {string[]} [externalLinks] - The list of external links related to the appointment
 * @property {string} [location] - The location of the appointment
 * @property {boolean} [shareInsightsData] - Whether to share the insight data
 */
 
/**
 * @typedef {object} DocumentReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} QueryRequestClause
 * @property {string} type - The logic used to combine the predicates
 * @property {QueryRequestPredicate[]} predicates - The list of predicates used to filter the data
 */
 
/**
 * @typedef {object} QueryRequestFilter
 * @property {string} type - The logic used to combine the clauses
 * @property {QueryRequestClause[]} clauses - The list of clauses used to filter the data
 */
 
/**
 * @typedef {object} QueryRequestPredicate
 * @property {string} dimension - The dimension to be filtered
 * @property {string} value - The value to filter by
 */
 
/**
 * Update coaching appointment request
 * @typedef {object} UpdateCoachingAppointmentRequest
 * @property {string} [name] - The name of coaching appointment.
 * @property {string} [description] - The description of coaching appointment.
 * @property {string} [dateStart] - The date/time the coaching appointment starts. Times will be rounded down to the minute. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [lengthInMinutes] - The duration of coaching appointment in minutes.
 * @property {string[]} [conversationIds] - IDs of conversations associated with this coaching appointment.
 * @property {string[]} [documentIds] - IDs of documents associated with this coaching appointment.
 * @property {string} [status] - The status of the coaching appointment.
 * @property {WfmScheduleReference} [wfmSchedule] - The Workforce Management schedule the appointment is associated with.
 * @property {string[]} [externalLinks] - The list of external links related to the appointment
 * @property {string} [location] - The location of the appointment
 * @property {boolean} [shareInsightsData] - Whether to share the insight data
 */
 
/**
 * @typedef {object} UserReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WfmBusinessUnitReference
 * @property {string} id - The ID of the business unit
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WfmScheduleReference
 * @property {string} id - The ID of the WFM schedule
 * @property {WfmBusinessUnitReference} businessUnit - A reference to a Workforce Management Business Unit
 * @property {string} weekDate - The start week date for this schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [selfUri] - The URI for this object
 */
 

/**
 * Coaching - Schedule and manage coaching appointments
 * @class Coaching
 */
class CoachingAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the Coaching class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Retrieve an annotation.
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @param {string} annotationId - The ID of the annotation.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getCoachingAppointmentAnnotation(appointmentId, annotationId) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		if (this.#checkJSONSchemaType(annotationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "annotationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;
		apiCallOptions.pathParameters.annotationId = annotationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an existing annotation
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @param {string} annotationId - The ID of the annotation.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteCoachingAppointmentAnnotation(appointmentId, annotationId) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		if (this.#checkJSONSchemaType(annotationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "annotationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;
		apiCallOptions.pathParameters.annotationId = annotationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an existing annotation.
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @param {string} annotationId - The ID of the annotation.
	 * @param {CoachingAnnotation} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchCoachingAppointmentAnnotation(appointmentId, annotationId, body) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}/annotations/{annotationId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		if (this.#checkJSONSchemaType(annotationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "annotationId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;
		apiCallOptions.pathParameters.annotationId = annotationId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of annotations.
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}/annotations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getCoachingAppointmentAnnotations(appointmentId, query) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}/annotations";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new annotation.
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @param {CoachingAnnotationCreateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}/annotations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postCoachingAppointmentAnnotations(appointmentId, body) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}/annotations";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add a conversation to an appointment
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @param {AddConversationRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}/conversations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postCoachingAppointmentConversations(appointmentId, body) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}/conversations";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve an appointment
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getCoachingAppointment(appointmentId) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an existing appointment
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteCoachingAppointment(appointmentId) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an existing appointment
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @param {UpdateCoachingAppointmentRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchCoachingAppointment(appointmentId, body) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the status of a coaching appointment
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @param {CoachingAppointmentStatusRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}/status" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchCoachingAppointmentStatus(appointmentId, body) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}/status";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the list of status changes for a coaching appointment.
	 * @async
	 * @param {string} appointmentId - The ID of the coaching appointment.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/{appointmentId}/statuses" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getCoachingAppointmentStatuses(appointmentId, query) {
		const endpointPath = "/api/v2/coaching/appointments/{appointmentId}/statuses";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(appointmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appointmentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.appointmentId = appointmentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve aggregated appointment data
	 * @async
	 * @param {CoachingAppointmentAggregateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/aggregates/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postCoachingAppointmentsAggregatesQuery(body) {
		const endpointPath = "/api/v2/coaching/appointments/aggregates/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get appointments for users and optional date range
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} query.userIds -  The user IDs for which to retrieve appointments
	 * @param {string} [query.interval] -  Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @param {string[]} [query.statuses] -  Appointment Statuses to filter by
	 * @param {string[]} [query.facilitatorIds] -  The facilitator IDs for which to retrieve appointments
	 * @param {string} [query.sortOrder] -  Sort (by due date) either Asc or Desc
	 * @param {string[]} [query.relationships] -  Relationships to filter by
	 * @param {string} [query.completionInterval] -  Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	 * @param {string} [query.overdue] -  Overdue status to filter by
	 * @param {string} [query.intervalCondition] -  Filter condition for interval
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getCoachingAppointments(query) {
		const endpointPath = "/api/v2/coaching/appointments";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("userIds" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "userIds");
		}

		if (this.#checkJSONSchemaType(query["userIds"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userIds", "array");
		}

		if ("interval" in query && this.#checkJSONSchemaType(query["interval"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "interval", "string");
		}

		if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
		}

		if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
		}

		if ("statuses" in query && this.#checkJSONSchemaType(query["statuses"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "statuses", "array");
		}

		if ("facilitatorIds" in query && this.#checkJSONSchemaType(query["facilitatorIds"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "facilitatorIds", "array");
		}

		if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
		}

		if ("relationships" in query && this.#checkJSONSchemaType(query["relationships"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "relationships", "array");
		}

		if ("completionInterval" in query && this.#checkJSONSchemaType(query["completionInterval"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "completionInterval", "string");
		}

		if ("overdue" in query && this.#checkJSONSchemaType(query["overdue"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "overdue", "string");
		}

		if ("intervalCondition" in query && this.#checkJSONSchemaType(query["intervalCondition"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "intervalCondition", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new appointment
	 * @async
	 * @param {CreateCoachingAppointmentRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postCoachingAppointments(body) {
		const endpointPath = "/api/v2/coaching/appointments";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an existing notification
	 * @async
	 * @param {string} notificationId - The ID of the notification.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Indicates a field in the response which should be expanded.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/notifications/{notificationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getCoachingNotification(notificationId, query) {
		const endpointPath = "/api/v2/coaching/notifications/{notificationId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(notificationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "notificationId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.notificationId = notificationId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an existing notification.
	 * @async
	 * @param {string} notificationId - The ID of the notification.
	 * @param {CoachingNotification} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/notifications/{notificationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchCoachingNotification(notificationId, body) {
		const endpointPath = "/api/v2/coaching/notifications/{notificationId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(notificationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "notificationId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.notificationId = notificationId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve the list of your notifications.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @param {string[]} [query.expand] -  Indicates a field in the response which should be expanded.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/notifications" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getCoachingNotifications(query) {
		const endpointPath = "/api/v2/coaching/notifications";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get list of possible slots where a coaching appointment can be scheduled.
	 * @async
	 * @param {CoachingSlotsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/scheduleslots/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postCoachingScheduleslotsQuery(body) {
		const endpointPath = "/api/v2/coaching/scheduleslots/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get my appointments for a given date range
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.interval] -  Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @param {string[]} [query.statuses] -  Appointment Statuses to filter by
	 * @param {string[]} [query.facilitatorIds] -  The facilitator IDs for which to retrieve appointments
	 * @param {string} [query.sortOrder] -  Sort (by due date) either Asc or Desc
	 * @param {string[]} [query.relationships] -  Relationships to filter by
	 * @param {string} [query.completionInterval] -  Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	 * @param {string} [query.overdue] -  Overdue status to filter by
	 * @param {string} [query.intervalCondition] -  Filter condition for interval
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/coaching/appointments/me" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getCoachingAppointmentsMe(query) {
		const endpointPath = "/api/v2/coaching/appointments/me";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("interval" in query && this.#checkJSONSchemaType(query["interval"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "interval", "string");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("statuses" in query && this.#checkJSONSchemaType(query["statuses"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "statuses", "array");
			}
			if ("facilitatorIds" in query && this.#checkJSONSchemaType(query["facilitatorIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "facilitatorIds", "array");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("relationships" in query && this.#checkJSONSchemaType(query["relationships"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "relationships", "array");
			}
			if ("completionInterval" in query && this.#checkJSONSchemaType(query["completionInterval"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "completionInterval", "string");
			}
			if ("overdue" in query && this.#checkJSONSchemaType(query["overdue"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "overdue", "string");
			}
			if ("intervalCondition" in query && this.#checkJSONSchemaType(query["intervalCondition"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "intervalCondition", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { CoachingAPI };