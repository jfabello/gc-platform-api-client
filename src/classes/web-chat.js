/**
 * WebChat deployments
 * @module gc-platform-api-web-chat
 * @documentation https://developer.genesys.cloud/commdigital/digital/webchat/webchat-apis
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.287Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} CreateWebChatConversationRequest
 * @property {string} organizationId - The organization identifier.
 * @property {string} deploymentId - The web chat Deployment ID which contains the appropriate settings for this chat conversation.
 * @property {WebChatRoutingTarget} routingTarget - The routing information to use for the new chat conversation.
 * @property {GuestMemberInfo} memberInfo - The guest member info to use for the new chat conversation.
 * @property {string} [memberAuthToken] - If the guest member is an authenticated member (ie, not anonymous) his JWT is provided here. The token will have been previously generated with the "POST /api/v2/signeddata" resource.
 * @property {JourneyContext} [journeyContext] - A subset of the Journey System's data relevant to this conversation/session request (for external linkage and internal usage/context).
 */
 
/**
 * @typedef {object} CreateWebChatMessageRequest
 * @property {string} body - The message body. Note that message bodies are limited to 4,000 characters.
 * @property {string} [bodyType] - The purpose of the message within the conversation, such as a standard text entry versus a greeting.
 */
 
/**
 * @typedef {object} DomainEntityRef
 * @property {string} [id]
 * @property {string} [name]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} GuestMemberInfo
 * @property {string} displayName - The display name to use for the guest member in the conversation.
 * @property {string} [firstName] - The first name to use for the guest member in the conversation.
 * @property {string} [lastName] - The last name to use for the guest member in the conversation.
 * @property {string} [email] - The email address to use for the guest member in the conversation.
 * @property {string} [phoneNumber] - The phone number to use for the guest member in the conversation.
 * @property {string} [avatarImageUrl] - The URL to the avatar image to use for the guest member in the conversation, if any.
 * @property {object} [customFields] - Any custom fields of information, in key-value format, to attach to the guest member in the conversation.
 */
 
/**
 * @typedef {object} JourneyAction
 * @property {string} id - The ID of an action from the Journey System (an action is spawned from an actionMap)
 * @property {JourneyActionMap} actionMap - Details about the action map from the Journey System which triggered this action
 */
 
/**
 * @typedef {object} JourneyActionMap
 * @property {string} id - The ID of the actionMap in the Journey System which triggered this action
 * @property {number} version - The version number of the actionMap in the Journey System at the time this action was triggered
 */
 
/**
 * @typedef {object} JourneyContext
 * @property {JourneyCustomer} customer - A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)
 * @property {JourneyCustomerSession} [customerSession] - A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)
 * @property {JourneyAction} [triggeringAction] - A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)
 */
 
/**
 * @typedef {object} JourneyCustomer
 * @property {string} id - An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable.
 * @property {string} idType - The type of the customerId within the Journey System (e.g. cookie).
 */
 
/**
 * @typedef {object} JourneyCustomerSession
 * @property {string} id - An ID of a Customer/User's session within the Journey System at a point-in-time
 * @property {string} type - The type of the Customer/User's session within the Journey System (e.g. web, app)
 */
 
/**
 * @typedef {object} WebChatConfig
 * @property {string} [webChatSkin] - css class to be applied to the web chat widget.
 */
 
/**
 * @typedef {object} WebChatDeployment
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [description]
 * @property {boolean} [authenticationRequired]
 * @property {string} [authenticationUrl] - URL for third party service authenticating web chat clients. See https://github.com/MyPureCloud/authenticated-web-chat-server-examples
 * @property {boolean} [disabled]
 * @property {WebChatConfig} [webChatConfig]
 * @property {string[]} [allowedDomains]
 * @property {DomainEntityRef} [flow] - The URI of the Inbound Chat Flow to run when new chats are initiated under this Deployment.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Object representing the guest model of a media request of a chat conversation.
 * @typedef {object} WebChatGuestMediaRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string[]} types - The types of media being requested.
 * @property {string} state - The state of the media request, one of PENDING|ACCEPTED|DECLINED|TIMEDOUT|CANCELLED|ERRORED.
 * @property {string} [communicationId] - The ID of the new media communication, if applicable.
 * @property {string} [securityKey] - The security information related to a media request.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WebChatRoutingTarget
 * @property {string} targetType - The target type of the routing target, such as 'QUEUE'.
 * @property {string} targetAddress - The target of the route, in the format appropriate given the 'targetType'.
 * @property {string[]} [skills] - The list of skill names to use for routing.
 * @property {string} [language] - The language name to use for routing.
 * @property {number} [priority] - The priority to assign to the conversation for routing.
 */
 
/**
 * @typedef {object} WebChatSettings
 * @property {boolean} [requireDeployment]
 */
 

/**
 * WebChat - WebChat deployments
 * @class WebChat
 */
class WebChatAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the WebChat class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Create an ACD chat conversation from an external customer.
	 * @async
	 * @param {CreateWebChatConversationRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postWebchatGuestConversations(body) {
		const endpointPath = "/api/v2/webchat/guest/conversations";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a WebChat deployment
	 * @async
	 * @param {string} deploymentId - Deployment Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/deployments/{deploymentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getWebchatDeployment(deploymentId) {
		const endpointPath = "/api/v2/webchat/deployments/{deploymentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a WebChat deployment
	 * @async
	 * @param {string} deploymentId - Deployment Id
	 * @param {WebChatDeployment} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/deployments/{deploymentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	putWebchatDeployment(deploymentId, body) {
		const endpointPath = "/api/v2/webchat/deployments/{deploymentId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a WebChat deployment
	 * @async
	 * @param {string} deploymentId - Deployment Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/deployments/{deploymentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	deleteWebchatDeployment(deploymentId) {
		const endpointPath = "/api/v2/webchat/deployments/{deploymentId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List WebChat deployments
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/deployments" endpoint.
	 * @deprecated
	 */
	getWebchatDeployments() {
		const endpointPath = "/api/v2/webchat/deployments";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create WebChat deployment
	 * @async
	 * @param {WebChatDeployment} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/deployments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postWebchatDeployments(body) {
		const endpointPath = "/api/v2/webchat/deployments";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get WebChat deployment settings
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/settings" endpoint.
	 */
	getWebchatSettings() {
		const endpointPath = "/api/v2/webchat/settings";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update WebChat deployment settings
	 * @async
	 * @param {WebChatSettings} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/settings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putWebchatSettings(body) {
		const endpointPath = "/api/v2/webchat/settings";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Remove WebChat deployment settings
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/settings" endpoint.
	 */
	deleteWebchatSettings() {
		const endpointPath = "/api/v2/webchat/settings";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a media request in the conversation
	 * @async
	 * @param {string} conversationId - conversationId
	 * @param {string} mediaRequestId - mediaRequestId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getWebchatGuestConversationMediarequest(conversationId, mediaRequestId) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		if (this.#checkJSONSchemaType(mediaRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "mediaRequestId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.pathParameters.mediaRequestId = mediaRequestId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a media request in the conversation, setting the state to ACCEPTED/DECLINED/ERRORED
	 * @async
	 * @param {string} conversationId - conversationId
	 * @param {string} mediaRequestId - mediaRequestId
	 * @param {WebChatGuestMediaRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	patchWebchatGuestConversationMediarequest(conversationId, mediaRequestId, body) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests/{mediaRequestId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		if (this.#checkJSONSchemaType(mediaRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "mediaRequestId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.pathParameters.mediaRequestId = mediaRequestId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all media requests to the guest in the conversation
	 * @async
	 * @param {string} conversationId - conversationId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getWebchatGuestConversationMediarequests(conversationId) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/mediarequests";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Send a message in a chat conversation.
	 * @async
	 * @param {string} conversationId - conversationId
	 * @param {string} memberId - memberId
	 * @param {CreateWebChatMessageRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/messages" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postWebchatGuestConversationMemberMessages(conversationId, memberId, body) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/messages";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		if (this.#checkJSONSchemaType(memberId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "memberId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.pathParameters.memberId = memberId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Send a typing-indicator in a chat conversation.
	 * @async
	 * @param {string} conversationId - conversationId
	 * @param {string} memberId - memberId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/typing" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	postWebchatGuestConversationMemberTyping(conversationId, memberId) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}/typing";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		if (this.#checkJSONSchemaType(memberId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "memberId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.pathParameters.memberId = memberId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a web chat conversation member
	 * @async
	 * @param {string} conversationId - conversationId
	 * @param {string} memberId - memberId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getWebchatGuestConversationMember(conversationId, memberId) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		if (this.#checkJSONSchemaType(memberId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "memberId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.pathParameters.memberId = memberId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Remove a member from a chat conversation
	 * @async
	 * @param {string} conversationId - conversationId
	 * @param {string} memberId - memberId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	deleteWebchatGuestConversationMember(conversationId, memberId) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/members/{memberId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		if (this.#checkJSONSchemaType(memberId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "memberId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.pathParameters.memberId = memberId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the members of a chat conversation.
	 * @async
	 * @param {string} conversationId - conversationId
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  The number of entries to return per page, or omitted for the default.
	 * @param {number} [query.pageNumber] -  The page number to return, or omitted for the first page.
	 * @param {boolean} [query.excludeDisconnectedMembers] -  If true, the results will not contain members who have a DISCONNECTED state.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/members" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @deprecated
	 */
	getWebchatGuestConversationMembers(conversationId, query) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/members";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("excludeDisconnectedMembers" in query && this.#checkJSONSchemaType(query["excludeDisconnectedMembers"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludeDisconnectedMembers", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a web chat conversation message
	 * @async
	 * @param {string} conversationId - conversationId
	 * @param {string} messageId - messageId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getWebchatGuestConversationMessage(conversationId, messageId) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/messages/{messageId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		if (this.#checkJSONSchemaType(messageId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messageId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.pathParameters.messageId = messageId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the messages of a chat conversation.
	 * @async
	 * @param {string} conversationId - conversationId
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.after] -  If available, get the messages chronologically after the id of this message
	 * @param {string} [query.before] -  If available, get the messages chronologically before the id of this message
	 * @param {string} [query.sortOrder] -  Sort order
	 * @param {number} [query.maxResults] -  Limit the returned number of messages, up to a maximum of 100
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webchat/guest/conversations/{conversationId}/messages" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @deprecated
	 */
	getWebchatGuestConversationMessages(conversationId, query) {
		const endpointPath = "/api/v2/webchat/guest/conversations/{conversationId}/messages";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("maxResults" in query && this.#checkJSONSchemaType(query["maxResults"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "maxResults", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { WebChatAPI };