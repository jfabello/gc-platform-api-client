/**
 * Events
 * @module gc-platform-api-events
 * @documentation https://developer.genesys.cloud/api/rest/v2/events/
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.158Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} AudioState
 * @property {boolean} [canHear] - Indicates that this communication's audio allows its participant to hear others.
 * @property {boolean} [canSpeak] - Indicates that this communication's audio allows others to hear this participant.
 */
 
/**
 * @typedef {object} AudioUpdatedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {AudioState} audioState - The updated audioState for the target communication.
 */
 
/**
 * A maximum of 100 events are allowed per request
 * @typedef {object} BatchConversationEventRequest
 * @property {EndTransferEvent[]} [endTransferEvents] - Voice - EndTransfer events for this batch
 * @property {PhoneTransferEvent[]} [phoneTransferEvents] - Voice - PhoneTransfer events for this batch
 * @property {ProgressTransferEvent[]} [progressTransferEvents] - Voice - ProgressTransfer events for this batch
 * @property {RoutingTransferEvent[]} [routingTransferEvents] - Voice - RoutingTransfer events for this batch
 * @property {UserTransferEvent[]} [userTransferEvents] - Voice - UserTransfer events for this batch
 * @property {CommunicationAnsweredEvent[]} [communicationAnsweredEvents] - Voice - CommunicationAnswered events for this batch
 * @property {CommunicationDispositionAppliedEvent[]} [communicationDispositionAppliedEvents] - Voice - CommunicationDispositionApplied events for this batch
 * @property {HoldUpdatedEvent[]} [holdUpdatedEvents] - Voice - HoldUpdated events for this batch
 * @property {ExternalEstablishedEvent[]} [externalEstablishedEvents] - Voice - ExternalEstablished events for this batch
 * @property {IvrEstablishedEvent[]} [ivrEstablishedEvents] - Voice - IvrEstablished events for this batch
 * @property {PhoneEstablishedEvent[]} [phoneEstablishedEvents] - Voice - PhoneEstablished events for this batch
 * @property {RoutingEstablishedEvent[]} [routingEstablishedEvents] - Voice - RoutingEstablished events for this batch
 * @property {UserEstablishedEvent[]} [userEstablishedEvents] - Voice - UserEstablished events for this batch
 * @property {AudioUpdatedEvent[]} [audioUpdatedEvents] - Voice - AudioUpdated events for this batch
 * @property {CommunicationEndedEvent[]} [communicationEndedEvents] - Voice - CommunicationEnded events for this batch
 * @property {ConsultTransferEvent[]} [consultTransferEvents] - Voice - ConsultTransfer events for this batch
 * @property {ProgressConsultTransferEvent[]} [progressConsultTransferEvents] - Voice - ProgressConsultTransfer events for this batch
 * @property {EndConsultTransferEvent[]} [endConsultTransferEvents] - Voice - EndConsultTransfer events for this batch
 * @property {EmailBeginTransmittingEvent[]} [emailBeginTransmittingEvents] - Email - EmailBeginTransmittingEvent events for this batch
 * @property {EmailCommunicationEndedEvent[]} [emailCommunicationEndedEvents] - Email - EmailCommunicationEndedEvent events for this batch
 * @property {EmailExternalEstablishedEvent[]} [emailExternalEstablishedEvents] - Email - EmailExternalEstablishedEvent events for this batch
 * @property {EmailFlowEstablishedEvent[]} [emailFlowEstablishedEvents] - Email - EmailFlowEstablishedEvent events for this batch
 * @property {EmailRoutingEstablishedEvent[]} [emailRoutingEstablishedEvents] - Email - EmailRoutingEstablishedEvent events for this batch
 * @property {EmailUserEstablishedEvent[]} [emailUserEstablishedEvents] - Email - EmailUserEstablishedEvent events for this batch
 * @property {EmailCommunicationAnsweredEvent[]} [emailCommunicationAnsweredEvents] - Email - EmailCommunicationAnsweredEvent events for this batch
 * @property {EmailCommunicationDispositionAppliedEvent[]} [emailCommunicationDispositionAppliedEvents] - Email - EmailCommunicationDispositionAppliedEvent events for this batch
 * @property {EmailCommunicationSentMessageEvent[]} [emailCommunicationSentMessageEvents] - Email - EmailCommunicationSentMessageEvent events for this batch
 * @property {EmailHoldUpdatedEvent[]} [emailHoldUpdatedEvents] - Email - EmailHoldUpdatedEvent events for this batch
 * @property {EmailEndTransferEvent[]} [emailEndTransferEvents] - Email - EmailEndTransferEvent events for this batch
 * @property {EmailProgressTransferEvent[]} [emailProgressTransferEvents] - Email - EmailProgressTransferEvent events for this batch
 * @property {EmailRoutingTransferEvent[]} [emailRoutingTransferEvents] - Email - EmailRoutingTransferEvent events for this batch
 * @property {EmailUserTransferEvent[]} [emailUserTransferEvents] - Email - EmailUserTransferEvent events for this batch
 */
 
/**
 * A maximum of 100 events are allowed per request
 * @typedef {object} BatchUserPresenceEventRequest
 * @property {UserPresenceEvent[]} [userPresenceEvents] - UserPresence events for this batch
 */
 
/**
 * A maximum of 100 events are allowed per request
 * @typedef {object} BatchUserRoutingStatusEventRequest
 * @property {UserRoutingStatusEvent[]} [userRoutingStatusEvents] - UserRoutingStatus events for this batch
 */
 
/**
 * @typedef {object} CommunicationAnsweredEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 */
 
/**
 * @typedef {object} CommunicationDispositionAppliedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {string} [code] - The wrapup-code (V4 UUID) used to disposition this interaction. If this value is not provided the disposition is considered skipped.
 * @property {string} [notes] - Text entered by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.
 * @property {string[]} [tags] - The list of tags selected by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.
 */
 
/**
 * @typedef {object} CommunicationEndedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {string} disconnectType - Indicates how this communication was ended.
 * @property {string} [destinationConversationId] - The id (V4 UUID) of the conversation that the communication is being moved to when conversations are merged.
 */
 
/**
 * @typedef {object} ConsultTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} initiatingCommunicationId - The id (V4 UUID) of the communication representing the participant that is initiating the transfer.
 * @property {string} destinationCommunicationId - The id (V4 UUID) of the communication that is being transferred to.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that is being transferred.
 */
 
/**
 * @typedef {object} EmailBeginTransmittingEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication.
 */
 
/**
 * @typedef {object} EmailCommunicationAnsweredEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 */
 
/**
 * @typedef {object} EmailCommunicationDispositionAppliedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {string} [code] - The wrapup-code (V4 UUID) used to disposition this interaction. If this value is not provided the disposition is considered skipped.
 * @property {string} [notes] - Text entered by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.
 * @property {string[]} [tags] - The list of tags selected by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.
 */
 
/**
 * @typedef {object} EmailCommunicationEndedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication.
 * @property {string} disconnectType - Indicates how this communication was ended.
 */
 
/**
 * @typedef {object} EmailCommunicationSentMessageEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication.
 */
 
/**
 * @typedef {object} EmailEndTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} commandId - The id (V4 UUID) used to identify the transfer already started by the external platform.
 * @property {string} finalState - Indicates whether the transfer completed successfully, was cancelled, or failed for some reason.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that was being transferred.
 */
 
/**
 * @typedef {object} EmailExternalEstablishedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication.
 * @property {string} [displayName] - A name for the participant if it is available for this conversation.
 * @property {boolean} [includeMessage] - Indicates that established communication has an initial email. If true, the initial messagesSent value will be initialized to 1.
 * @property {EmailInitialConfiguration} initialConfiguration - Metadata about this communication.
 * @property {SourceConfiguration} sourceConfiguration - Metadata about the source of this communication's interaction.
 */
 
/**
 * @typedef {object} EmailFlowEstablishedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication.
 * @property {EmailInitialConfiguration} initialConfiguration - Metadata about this communication.
 * @property {SourceConfiguration} sourceConfiguration - Metadata about the source of this communication's interaction.
 */
 
/**
 * @typedef {object} EmailHoldUpdatedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {boolean} held - Indicates whether this communication is held.
 */
 
/**
 * @typedef {object} EmailInitialConfiguration
 * @property {string} to - An email address that this email is to.
 * @property {string} from - An email address that this email is from.
 * @property {string[]} [cc] - An email addresses that this email is carbon copied to.
 * @property {string[]} [bcc] - An email addresses that this email is blind carbon copied to.
 * @property {string} [subject] - The subject for this email.
 * @property {string} [previousEmailId] - UUID identifying the most recent previous email communication ID from the same participant on this email conversation. Will be null if this is a new participant.
 * @property {boolean} [held] - Indicates that this communication's initial state is held.
 * @property {boolean} [alerting] - Indicates that this communication's initial state is alerting. If false, the communication started in a connected state.
 * @property {boolean} [inbound] - Indicates the direction of this communication with respect to the contact center. `true` means the communication is INBOUND. `false` means the communication is OUTBOUND.
 * @property {string} [invitedBy] - The id of the communication (the "peer") that "invited" this communication, if this occurred.
 * @property {object} [additionalInfo] - Additional metadata about this session which should be recorded by the platform but which will not be indexed or searchable. Primarily for diagnostic value. Any information that needs to be accessible through other components like Analytics should be moved to dedicated fields.
 */
 
/**
 * @typedef {object} EmailProgressTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} commandId - The id (V4 UUID) used to identify the transfer already started by the external platform.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that is being transferred.
 * @property {string} destinationCommunicationId - The id (V4 UUID) of the communication that is being transferred to.
 */
 
/**
 * @typedef {object} EmailRoutingEstablishedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication.
 * @property {string} queueId - The id of the queue that is routing this conversation.
 * @property {string[]} [skillIds] - The unique identifiers for the skills that should be used to determine the destination for the conversation.
 * @property {string} [languageId] - The unique identifier for the language that should be used to determine the destination for the conversation.
 * @property {string} [label] - An optional label that categorizes the conversation. Max-utilization settings can be configured at a per-label level.
 * @property {EmailInitialConfiguration} initialConfiguration - Metadata about this communication.
 * @property {SourceConfiguration} sourceConfiguration - Metadata about the source of this communication's interaction.
 */
 
/**
 * @typedef {object} EmailRoutingTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} transferType - Indicates the desired type of transfer.
 * @property {string} commandId - The id (V4 UUID) used by the external platform to refer to the transfer in subsequent *Transfer events.
 * @property {string} initiatingCommunicationId - Indicates the desired type of transfer.
 * @property {string} targetCommunicationId - The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that is being transferred.
 * @property {string} destinationQueueId - The id (V4 UUID) of the desired destination queue that the object communication should be transferred to.
 * @property {string} [languageId] - The unique identifier (V4 UUID) for the language that should be used to determine the destination for the conversation.
 * @property {string[]} [skillIds] - The unique identifiers (V4 UUID) for the skills that should be used to determine the destination for the conversation.
 */
 
/**
 * @typedef {object} EmailUserEstablishedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication.
 * @property {string} userId - A unique Id (V4 UUID) identifying the user this communication belongs to.
 * @property {string} [queueId] - A unique Id (V4 UUID) identifying the queue that the user is emailing on behalf of. Applies to outbound emails only.
 * @property {boolean} [afterCallWorkRequired] - Indicates whether or not this user will be required to complete after call work.
 * @property {EmailInitialConfiguration} initialConfiguration - Metadata about this communication.
 * @property {SourceConfiguration} sourceConfiguration - Metadata about the source of this communication's interaction.
 */
 
/**
 * @typedef {object} EmailUserTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} transferType - Indicates the desired type of transfer.
 * @property {string} commandId - The id (V4 UUID) used by the external platform to refer to the transfer in subsequent Transfer events.
 * @property {string} initiatingCommunicationId - The id (V4 UUID) of the communication representing the participant that is initiating the transfer.
 * @property {string} targetCommunicationId - The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that is being transferred.
 * @property {string} destinationUserId - The id (V4 UUID) of the desired destination user that the object communication should be transferred to.
 */
 
/**
 * @typedef {object} EndConsultTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 */
 
/**
 * @typedef {object} EndTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} commandId - The id (V4 UUID) used to identify the transfer already started by the external platform.
 * @property {string} finalState - Indicates whether the transfer completed successfully, was cancelled, or failed for some reason.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that was being transferred.
 */
 
/**
 * @typedef {object} ExternalEstablishedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {string} [ani] - The automatic number identification if it is available for this conversation.
 * @property {string} [aniName] - The automatic number identification name if it is available for this conversation.
 * @property {string} [dnis] - The dialed number identification if it is available for this conversation.
 * @property {string} [dnisName] - The dialed number identification name if it is available for this conversation.
 * @property {InitialConfiguration} initialConfiguration - Metadata about this communication.
 * @property {SourceConfiguration} sourceConfiguration - Metadata about the source of this communication's interaction.
 */
 
/**
 * @typedef {object} HoldUpdatedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {boolean} held - Indicates whether this communication is held.
 */
 
/**
 * @typedef {object} InitialConfiguration
 * @property {AudioState} [audioState] - Indicates the initial audio state for the communication.
 * @property {boolean} [alerting] - Indicates that this communication's initial state is alerting. If false, the communication started in a connected state.
 * @property {boolean} [inbound] - Indicates the direction of this communication with respect to the contact center. `true` means the communication is INBOUND. `false` means the communication is OUTBOUND.
 * @property {string} [invitedBy] - The id of the communication (the "peer") that "invited" this communication, if this occurred.
 * @property {boolean} [recordingActive] - Indicates whether recording is active for this communication at creation.
 * @property {object} [additionalInfo] - Additional metadata about this session which should be recorded by the platform but which will not be indexed or searchable. Primarily for diagnostic value. Any information that needs to be accessible through other components like Analytics should be moved to dedicated fields.
 */
 
/**
 * @typedef {object} IvrEstablishedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {string} [ivrPhoneNumber] - The phone number for this IVR, if any is known
 * @property {string} [ivrName] - A displayable name for this IVR, if any is known.
 * @property {string} [ani] - The automatic number identification if it is available for this conversation.
 * @property {string} [dnis] - The dialed number identification if it is available for this conversation.
 * @property {InitialConfiguration} initialConfiguration - Metadata about this communication.
 * @property {SourceConfiguration} sourceConfiguration - Metadata about the source of this communication's interaction.
 */
 
/**
 * @typedef {object} PhoneEstablishedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {string} [phoneNumber] - The phone number for this phone.
 * @property {string} [ani] - The automatic number identification if it is available for this conversation.
 * @property {string} [dnis] - The dialed number identification if it is available for this conversation.
 * @property {InitialConfiguration} initialConfiguration - Metadata about this communication.
 * @property {SourceConfiguration} sourceConfiguration - Metadata about the source of this communication's interaction.
 */
 
/**
 * @typedef {object} PhoneTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} transferType - Indicates the desired type of transfer.
 * @property {string} commandId - The id (V4 UUID) used by the external platform to refer to the transfer in subsequent Transfer events.
 * @property {string} initiatingCommunicationId - The id (V4 UUID) of the communication representing the participant that is initiating the transfer.
 * @property {string} targetCommunicationId - The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that is being transferred.
 * @property {string} destinationPhoneNumber - The desired destination phone number that the object communication should be transferred to.
 */
 
/**
 * @typedef {object} ProgressConsultTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} initiatingCommunicationId - The id (V4 UUID) of the communication representing the participant that is initiating the transfer.
 * @property {string} destinationCommunicationId - The id (V4 UUID) of the communication that is being transferred to.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that is being transferred.
 */
 
/**
 * @typedef {object} ProgressTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} commandId - The id (V4 UUID) used to identify the transfer already started by the external platform.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that is being transferred.
 * @property {string} destinationCommunicationId - The id (V4 UUID) of the communication that is being transferred to.
 */
 
/**
 * @typedef {object} RoutingEstablishedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {string} [phoneNumber] - Identifies the phone number used to reach this queue if it is different from the information that would be accessed by queueId.
 * @property {string} queueId - The id (V4 UUID) of the queue that is routing this conversation.
 * @property {string} [ani] - The automatic number identification if it is available for this conversation.
 * @property {string} [dnis] - The dialed number identification if it is available for this conversation.
 * @property {string[]} [skillIds] - The unique identifiers (V4 UUID) for the skills that should be used to determine the destination for the conversation.
 * @property {string} [languageId] - The unique identifier (V4 UUID) for the language that should be used to determine the destination for the conversation.
 * @property {InitialConfiguration} initialConfiguration - Metadata about this communication.
 * @property {SourceConfiguration} sourceConfiguration - Metadata about the source of this communication's interaction.
 */
 
/**
 * @typedef {object} RoutingTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} transferType - Indicates the desired type of transfer.
 * @property {string} commandId - The id (V4 UUID) used by the external platform to refer to the transfer in subsequent *Transfer events.
 * @property {string} initiatingCommunicationId - Indicates the desired type of transfer.
 * @property {string} targetCommunicationId - The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that is being transferred.
 * @property {string} destinationQueueId - The id (V4 UUID) of the desired destination queue that the object communication should be transferred to.
 * @property {string} [languageId] - The unique identifier (V4 UUID) for the language that should be used to determine the destination for the conversation.
 * @property {string[]} [skillIds] - The unique identifiers (V4 UUID) for the skills that should be used to determine the destination for the conversation.
 */
 
/**
 * @typedef {object} SourceConfiguration
 * @property {string} sourceId - Identifies the external platform that is the source of the conversation.
 * @property {string} interactionId - The customer's unique external identifier associated with the conversation that comes from the external platform.
 * @property {string} [tagId] - The customer's external identifier or tag associated with the conversation. If set, it will be used to tag the conversation.
 */
 
/**
 * @typedef {object} UserEstablishedEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} communicationId - A unique Id (V4 UUID) identifying this communication
 * @property {string} [phoneNumber] - Identifies the phone number used to reach this user if it is different from the information that would be accessed by userId.
 * @property {string} userId - The userId (V4 UUID) for the user this communication belongs to.
 * @property {string} [stationId] - A Station ID (V4 UUID) that identifies the station being used if the user is using a station and the stationId is known.
 * @property {string} [ani] - The automatic number identification if it is available for this conversation.
 * @property {string} [dnis] - The dialed number identification if it is available for this conversation.
 * @property {boolean} [afterCallWorkRequired] - Indicates whether or not this user will be required to complete after call work.
 * @property {string} [queueId] - The id (V4 UUID) of the queue that the user is calling on behalf of. Applies to outbound calls only.
 * @property {InitialConfiguration} initialConfiguration - Metadata about this communication.
 * @property {SourceConfiguration} sourceConfiguration - Metadata about the source of this communication's interaction.
 */
 
/**
 * @typedef {object} UserPresenceEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} userId - The User ID of the user associated with this UserPresence
 * @property {string} sourceId - The id (V4 UUID) of the presence source being updated
 * @property {string} [presenceDefinitionId] - The id (UUID) of the presence definition that the user presence is associated with
 * @property {string} [message] - The message associated with the presence
 */
 
/**
 * @typedef {object} UserRoutingStatusEvent
 * @property {string} eventId - A unique (UUID) eventId for this event
 * @property {string} eventDateTime - A timestamp as epoch representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} agentId - Unique identifier of the agent.
 * @property {string} status - The agent's current routing status.
 * @property {string} sourceId - The agent's source platform Id.
 */
 
/**
 * @typedef {object} UserTransferEvent
 * @property {string} eventId - A unique (V4 UUID) eventId for this event
 * @property {string} eventDateTime - A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} conversationId - A unique Id (V4 UUID) identifying this conversation
 * @property {string} transferType - Indicates the desired type of transfer.
 * @property {string} commandId - The id (V4 UUID) used by the external platform to refer to the transfer in subsequent Transfer events.
 * @property {string} initiatingCommunicationId - The id (V4 UUID) of the communication representing the participant that is initiating the transfer.
 * @property {string} targetCommunicationId - The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.
 * @property {string} objectCommunicationId - The id (V4 UUID) of the communication that is being transferred.
 * @property {string} destinationUserId - The id (V4 UUID) of the desired destination user that the object communication should be transferred to.
 */
 

/**
 * Events - Events
 * @class Events
 */
class EventsAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the Events class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Publish Conversation Batch Events
	 * @async
	 * @param {BatchConversationEventRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/events/conversations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postEventsConversations(body) {
		const endpointPath = "/api/v2/events/conversations";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Publish Agent Routing Status Batch Events
	 * @async
	 * @param {BatchUserRoutingStatusEventRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/events/users/routingstatus" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postEventsUsersRoutingstatus(body) {
		const endpointPath = "/api/v2/events/users/routingstatus";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Publish User Presence Status Batch Events
	 * @async
	 * @param {BatchUserPresenceEventRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/events/users/presence" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postEventsUsersPresence(body) {
		const endpointPath = "/api/v2/events/users/presence";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { EventsAPI };