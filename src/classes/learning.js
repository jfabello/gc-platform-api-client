/**
 * Manage learning modules
 * @module gc-platform-api-learning
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.327Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} AnswerOption
 * @property {string} [id]
 * @property {string} [text]
 * @property {number} [value]
 * @property {AssistanceCondition[]} [assistanceConditions] - List of assistance conditions which are combined together with a logical AND operator. Eg ( assistanceCondtion1 && assistanceCondition2 ) wherein assistanceCondition could be ( EXISTS topic1 || topic2 || ... ) or (NOTEXISTS topic3 || topic4 || ...).
 */
 
/**
 * @typedef {object} AssessmentForm
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [dateModified] - Last modified date of the assessment form. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [contextId] - The unique Id for all versions of this assessment form
 * @property {string} [selfUri] - The URI for this object
 * @property {boolean} [published] - If true, assessment form is published
 * @property {number} passPercent - The pass percent for the assessment form
 * @property {AssessmentFormQuestionGroup[]} questionGroups - A list of question groups
 */
 
/**
 * @typedef {object} AssessmentFormQuestion
 * @property {string} [id]
 * @property {string} [type]
 * @property {string} text - The question text
 * @property {string} [helpText]
 * @property {boolean} [naEnabled]
 * @property {boolean} [commentsRequired]
 * @property {VisibilityCondition} [visibilityCondition]
 * @property {AnswerOption[]} [answerOptions] - Options from which to choose an answer for this question. Only used by Multiple Choice type questions.
 * @property {number} [maxResponseCharacters] - How many characters are allowed in the text response to this question. Used by Free Text question types.
 * @property {boolean} [isKill] - Does an incorrect answer to this question mark the form as having a failed kill question. Only used by Multiple Choice type questions.
 * @property {boolean} [isCritical] - Does this question contribute to the critical score. Only used by Multiple Choice type questions.
 */
 
/**
 * @typedef {object} AssessmentFormQuestionGroup
 * @property {string} [id] - The ID of the question group,
 * @property {string} name - The question group name
 * @property {string} type - The question group type
 * @property {boolean} [defaultAnswersToHighest]
 * @property {boolean} [defaultAnswersToNA]
 * @property {boolean} [naEnabled]
 * @property {number} [weight]
 * @property {boolean} [manualWeight]
 * @property {AssessmentFormQuestion[]} questions - The list of questions for this question group
 * @property {VisibilityCondition} [visibilityCondition]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} AssessmentQuestionGroupScore
 * @property {string} questionGroupId - The ID of the question group
 * @property {number} [totalScore] - The total score for the questions
 * @property {number} [maxTotalScore] - The maximum total score for the questions
 * @property {boolean} [markedNA] - True if this question group is marked NA
 * @property {boolean} [systemMarkedNA] - If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.
 * @property {number} [totalCriticalScore] - The total score for the critical questions
 * @property {number} [maxTotalCriticalScore] - The maximum total score for the critical questions
 * @property {number} [totalNonCriticalScore] - The total score for the non-critical questions
 * @property {number} [maxTotalNonCriticalScore] - The maximum total score for the non-critical questions
 * @property {number} [totalScoreUnweighted] - The unweighted total score for this question group
 * @property {number} [maxTotalScoreUnweighted] - The maximum unweighted total score for this question group
 * @property {number} [totalCriticalScoreUnweighted] - The unweighted total score for the critical questions
 * @property {number} [maxTotalCriticalScoreUnweighted] - The maximum unweighted total score for the critical questions
 * @property {number} [totalNonCriticalScoreUnweighted] - The total unweighted score for the non-critical questions
 * @property {number} [maxTotalNonCriticalScoreUnweighted] - The maximum unweighted total score for the non-critical questions
 * @property {AssessmentQuestionScore[]} [questionScores] - The individual question scores
 */
 
/**
 * @typedef {object} AssessmentQuestionScore
 * @property {boolean} [failedKillQuestion] - True if this was a failed Kill question
 * @property {string} [comments] - Comments provided for the answer
 * @property {string} questionId - The ID of the question
 * @property {string} [answerId] - The ID of the selected answer
 * @property {number} [score] - The score received for this question
 * @property {boolean} [markedNA] - True if this question was marked as NA
 * @property {boolean} [systemMarkedNA] - If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.
 * @property {string} [freeTextAnswer] - Answer for free text answer type
 */
 
/**
 * @typedef {object} AssessmentScoringSet
 * @property {number} [totalScore] - The total score of the answers
 * @property {number} [totalCriticalScore] - The total score for the critical questions
 * @property {number} [totalNonCriticalScore] - The total score for the non-critical questions
 * @property {AssessmentQuestionGroupScore[]} questionGroupScores - The individual scores for each question group
 * @property {string[]} [failureReasons] - If the assessment was not passed, the reasons for failure.
 * @property {string} [comments] - Comments provided for these answers.
 * @property {string} [agentComments] - Comments provided by agent.
 * @property {boolean} [isPassed] - True if the assessment was passed
 */
 
/**
 * @typedef {object} AssistanceCondition
 * @property {string} [operator] - The operator for the assistance condition. The operator defines whether the listed topicIds should EXIST or NOTEXIST for the condition to be evaluated as true.
 * @property {string[]} [topicIds] - List of topicIds within the assistance condition which would be combined together using logical OR operator. Eg ( topicId_1 || topicId_2 ) .
 */
 
/**
 * @typedef {object} LearningAssessment
 * @property {string} [assessmentId] - The Id of the assessment
 * @property {string} [contextId] - The context Id of the related assessment form
 * @property {string} [assessmentFormId] - The Id of the related assessment form
 * @property {string} [status] - Status of the assessment
 * @property {AssessmentScoringSet} [answers] - Answers for the assessment
 * @property {string} [dateCreated] - Date the assessment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Date the assessment was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateSubmitted] - Date the assessment was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} LearningAssessmentScoringRequest
 * @property {AssessmentForm} assessmentForm - The assessment form to score against
 * @property {AssessmentScoringSet} answers - The answers to score
 */
 
/**
 * @typedef {object} LearningAssignmentAggregateParam
 * @property {string} interval - Specifies the range of due dates to be used for filtering. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 * @property {string[]} [metrics] - The list of metrics to be returned. If omitted, all metrics are returned.
 * @property {string[]} [groupBy] - Specifies if the aggregated data is combined into a single set of metrics (groupBy is empty or not specified), or contains an element per attendeeId (groupBy is "attendeeId")
 * @property {LearningAssignmentAggregateQueryRequestFilter} filter - The filter applied to the data.  This is ANDed with the interval parameter. 
 */
 
/**
 * @typedef {object} LearningAssignmentAggregateQueryRequestClause
 * @property {string} type - The logic used to combine the predicates
 * @property {LearningAssignmentAggregateQueryRequestPredicate[]} predicates - The list of predicates used to filter the data
 */
 
/**
 * @typedef {object} LearningAssignmentAggregateQueryRequestFilter
 * @property {string} type - The logic used to combine the clauses
 * @property {LearningAssignmentAggregateQueryRequestClause[]} clauses - The list of clauses used to filter the data. Note that clauses must filter by attendeeId and a maximum of 100 user IDs are allowed
 */
 
/**
 * @typedef {object} LearningAssignmentAggregateQueryRequestPredicate
 * @property {string} dimension - Each predicates specifies a dimension.
 * @property {string} value - Corresponding value for dimensions in predicates. If the dimension is type, Valid Values: Informational (deprecated), AssessedContent (deprecated), Assessment (deprecated), External, Native
 */
 
/**
 * @typedef {object} LearningAssignmentCreate
 * @property {string} moduleId - The Learning module Id associated with this assignment
 * @property {string} userId - The User for whom the assignment is assigned
 * @property {string} [recommendedCompletionDate] - The recommended completion date of assignment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [lengthInMinutes] - The length in minutes of assignment
 */
 
/**
 * @typedef {object} LearningAssignmentExternalUpdate
 * @property {string} [state] - The Learning Assignment state
 * @property {number} [percentageScore] - The score
 * @property {boolean} [isPassed] - Was the assignment marked as passed
 */
 
/**
 * @typedef {object} LearningAssignmentItem
 * @property {string} moduleId - The Learning Module ID associated with this assignment
 * @property {string} userId - The User ID associated with this assignment
 */
 
/**
 * @typedef {object} LearningAssignmentReschedule
 * @property {string} dateRecommendedForCompletion - The recommended completion date of the assignment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [lengthInMinutes] - The length in minutes of the assignment
 */
 
/**
 * Learning assignment step
 * @typedef {object} LearningAssignmentStep
 * @property {string} [id] - The ID of the learning assignment step
 * @property {LearningModuleInformStep} [moduleStep] - The module step data for this step
 * @property {LearningAssignmentStepScoStructure[]} [structure] - The structure for any SCO associated with this step
 * @property {string} [successStatus] - The success status of this step
 * @property {string} [completionStatus] - The completion status of the assignment step
 * @property {number} [completionPercentage] - The completion percentage for this step
 * @property {number} [percentageScore] - The percentage score for this step
 * @property {LearningShareableContentObject} [shareableContentObject] - The SCO (Shareable Content Object) data
 * @property {LearningAssignmentStepSignedCookie} [signedCookie] - The signed cookie information needed to access the content of this step (if required)
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} LearningAssignmentStepScoStructure
 * @property {string} [id] - The id of this SCO in the course manifest
 * @property {string} [name] - The name of this SCO in the course manifest
 * @property {string} [successStatus] - The success status of this SCO
 * @property {string} [completionStatus] - The completion status of this SCO
 * @property {LearningAssignmentStepScoStructure[]} [children] - Child items belonging to this SCO in the course manifest
 */
 
/**
 * @typedef {object} LearningAssignmentStepSignedCookie
 * @property {string} [url] - The base URL for the signed cookie
 * @property {object} [cookieValues] - The cookie values required to access content from the base URL
 */
 
/**
 * @typedef {object} LearningAssignmentUpdate
 * @property {string} [state] - The Learning Assignment state
 * @property {LearningAssessment} [assessment] - An updated Assessment
 */
 
/**
 * Learning module users query request model
 * @typedef {object} LearningAssignmentUserQuery
 * @property {LearningModuleRule} rule - Learning module rule object
 * @property {string} [searchTerm] - The user name to be searched for
 */
 
/**
 * @typedef {object} LearningModuleCoverArtRequest
 * @property {string} id - The key identifier for the cover art
 */
 
/**
 * @typedef {object} LearningModuleInformStep
 * @property {string} type - The learning module inform step type
 * @property {string} [name] - The name of the inform step or content
 * @property {string} value - The value for inform step
 * @property {string} [sharingUri] - The sharing uri for Content type inform step
 * @property {string} [contentType] - The document type for Content type Inform step
 * @property {number} order - The order of inform step in a learning module
 * @property {string} [displayName] - The display name for the inform step
 * @property {string} [description] - The description for the inform step
 */
 
/**
 * Learning module inform steps request
 * @typedef {object} LearningModuleInformStepRequest
 * @property {string} type - The learning module inform step type
 * @property {string} [name] - The name of the inform step or content
 * @property {string} value - The value for inform step
 * @property {string} [sharingUri] - The sharing uri for Content type inform step
 * @property {string} [contentType] - The document type for Content type Inform step
 * @property {number} order - The order of inform step in a learning module
 * @property {string} [displayName] - The display name for the inform step
 * @property {string} [description] - The description for the inform step
 */
 
/**
 * Learning module job request
 * @typedef {object} LearningModuleJobRequest
 * @property {string} action - The type for the learning module job
 */
 
/**
 * Learning module preview update request
 * @typedef {object} LearningModulePreviewUpdateRequest
 * @property {string} [state] - The assignment State
 * @property {LearningModulePreviewUpdateRequestCurrentStep} [currentStep] - The assignment current step
 * @property {LearningModulePreviewUpdateStep[]} [steps] - The assignment Steps
 * @property {LearningAssessment} [assessment] - The assessment for learning module
 * @property {AssessmentForm} [assessmentForm] - The assessment form for learning module
 */
 
/**
 * Learning module preview update request current step
 * @typedef {object} LearningModulePreviewUpdateRequestCurrentStep
 * @property {string} [id] - The id of this step
 * @property {number} [completionPercentage] - The completion percentage for this step
 * @property {LearningShareableContentObject} [shareableContentObject] - The SCO (Shareable Content Object) data
 */
 
/**
 * Learning module preview update SCO structure
 * @typedef {object} LearningModulePreviewUpdateScoStructure
 * @property {string} [id] - The id of this SCO in the course manifest
 * @property {string} [name] - The name of this SCO in the course manifest
 * @property {string} [successStatus] - The success status of this SCO
 * @property {string} [completionStatus] - The completion status of this SCO
 * @property {number} [percentageScore] - Percentage Score
 * @property {LearningModulePreviewUpdateScoStructure[]} [children] - Child items belonging to this SCO in the course manifest
 */
 
/**
 * Learning module preview update assignment step
 * @typedef {object} LearningModulePreviewUpdateStep
 * @property {string} [id] - The id of the step
 * @property {string} [successStatus] - The success status of the step
 * @property {string} [completionStatus] - The completion status of the step
 * @property {number} [completionPercentage] - The completion percentage of the step
 * @property {number} [percentageScore] - Percentage Score
 * @property {LearningModulePreviewUpdateScoStructure[]} [structure] - The structure for any SCO associated with this step
 */
 
/**
 * Learning module publish request
 * @typedef {object} LearningModulePublishRequest
 * @property {boolean} [termsAndConditionsAccepted] - Whether the terms and conditions were accepted
 */
 
/**
 * Learning module request
 * @typedef {object} LearningModuleRequest
 * @property {string} name - The name of learning module
 * @property {string} [description] - The description of learning module
 * @property {number} completionTimeInDays - The completion time of learning module in days
 * @property {LearningModuleInformStepRequest[]} [informSteps] - The list of inform steps in a learning module
 * @property {string} [type] - The type for the learning module. Informational, AssessedContent and Assessment are deprecated
 * @property {AssessmentForm} [assessmentForm] - The assessment form for learning module
 * @property {LearningModuleCoverArtRequest} [coverArt] - The cover art for the learning module
 * @property {number} [lengthInMinutes] - The recommended time in minutes to complete the module
 * @property {boolean} [excludedFromCatalog] - If true, learning module is excluded when retrieving modules for manual assignment
 * @property {string} [externalId] - The external ID of the learning module. Maximum length: 50 characters.
 * @property {boolean} [enforceContentOrder] - If true, learning module content should be viewed one by one in order
 * @property {ReviewAssessmentResults} [reviewAssessmentResults] - Allows to view Assessment results in detail
 */
 
/**
 * @typedef {object} LearningModuleRule
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {boolean} isActive - If true, rule is active
 * @property {LearningModuleRuleParts[]} parts - The parts of a learning module rule
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} LearningModuleRuleParts
 * @property {string} operation - The learning module rule operation
 * @property {string} selector - The learning module rule selector
 * @property {string[]} value - The value of rules
 * @property {number} order - The order of rules in learning module rule
 */
 
/**
 * @typedef {object} LearningScheduleSlotsQueryRequest
 * @property {string} interval - Range of time to get slots for scheduling learning activities. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 * @property {number} lengthInMinutes - The duration of Learning Assignment to schedule in 15 minutes granularity
 * @property {string[]} userIds - The user IDs for which to fetch schedules. Must be only 1.
 * @property {string} [interruptibleAssignmentId] - Assignment ID to exclude from consideration when determining blocked slots
 */
 
/**
 * Learning SCORM upload request
 * @typedef {object} LearningScormUploadRequest
 * @property {string} contentMd5 - The MD5 content of the SCORM package
 */
 
/**
 * Learning assignment SCO (Shareable Content Object)
 * @typedef {object} LearningShareableContentObject
 * @property {string} id - The ID of the SCO from the course manifest.
 * @property {string} [lessonStatus] - The status of the SCO. Maps to the SCORM 1.2 cmi.core.lesson_status property.
 * @property {string} [exit] - Indicates how or why the learner left the SCO. Maps to the SCORM 1.2 cmi.core.exit property.
 * @property {string} [location] - The learner’s current location in the SCO. Maps to the SCORM 1.2 cmi.core.lesson_location property.
 * @property {number} [scoreRaw] - The score of the most recent attempt on the SCO. Maps to the SCORM 1.2 cmi.core.score.raw property.
 * @property {number} [scoreMax] - The maximum score that could be achieved on the SCO. Maps to the SCORM 1.2 cmi.core.score.max property.
 * @property {number} [scoreMin] - The minimum score that could be achieved on the SCO. Maps to the SCORM 1.2 cmi.core.score.min property.
 * @property {string} [suspendData] - The unique information generated by the SCO from previous uses. Maps to the SCORM 1.2 cmi.suspend_data property.
 * @property {string} [credit] - Whether completing this course counts towards the overall assignment. Maps to the SCORM 1.2 cmi.core.credit property.
 * @property {string} [entry] - Whether the learner has previously accessed this SCO. Maps to the SCORM 1.2 cmi.core.entry property.
 * @property {string} [mode] - Identifies the mode in which the SCO should be presented to the learner. Maps to the SCORM 1.2 cmi.core.lesson_mode property.
 * @property {string} [totalTime] - The total amount of time the learner has spent in the SCO expressed as an ISO 8601 Duration, for example PT2H10M3.5S. Maps to the SCORM 1.2 cmi.core.total_time property.
 * @property {string} [sessionTime] - The amount of time spent in the SCO in this session expressed as an ISO-8601 Duration, for example PT2H10M3.5S. Maps to the SCORM 1.2 cmi.core.session_time property.
 * @property {string} [href] - The href from the course manifest for this SCO.
 * @property {string} [parameters] - The parameters from the course manifest for this SCO.
 * @property {string} [launchData] - The launch data from the course manifest for this SCO.
 */
 
/**
 * @typedef {object} ReviewAssessmentResults
 * @property {boolean} [byAssignees] - If true, learning assignment results can be seen in detail by assignees
 * @property {boolean} [byViewers] - If true, learning assignment results can be seen in detail by people who are eligible to view
 */
 
/**
 * @typedef {object} VisibilityCondition
 * @property {string} [combiningOperation]
 * @property {object[]} [predicates] - A list of strings, each representing the location in the form of the Answer Option to depend on. In the format of "/form/questionGroup/{questionGroupIndex}/question/{questionIndex}/answer/{answerIndex}" or, to assume the current question group, "../question/{questionIndex}/answer/{answerIndex}". Note: Indexes are zero-based
 */
 

/**
 * Learning - Manage learning modules
 * @class Learning
 */
class LearningAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the Learning class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Score learning assessment for preview
	 * @async
	 * @param {LearningAssessmentScoringRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assessments/scoring" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningAssessmentsScoring(body) {
		const endpointPath = "/api/v2/learning/assessments/scoring";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve aggregated assignment data
	 * @async
	 * @param {LearningAssignmentAggregateParam} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/aggregates/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningAssignmentsAggregatesQuery(body) {
		const endpointPath = "/api/v2/learning/assignments/aggregates/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Learning Assignment
	 * @async
	 * @param {string} assignmentId - The ID of Learning Assignment
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Fields to expand in response
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/{assignmentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getLearningAssignment(assignmentId, query) {
		const endpointPath = "/api/v2/learning/assignments/{assignmentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assignmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assignmentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assignmentId = assignmentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a learning assignment
	 * @async
	 * @param {string} assignmentId - The Learning Assignment ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/{assignmentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteLearningAssignment(assignmentId) {
		const endpointPath = "/api/v2/learning/assignments/{assignmentId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assignmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assignmentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assignmentId = assignmentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update Learning Assignment
	 * @async
	 * @param {string} assignmentId - The ID of Learning Assignment
	 * @param {LearningAssignmentUpdate} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/{assignmentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchLearningAssignment(assignmentId, body) {
		const endpointPath = "/api/v2/learning/assignments/{assignmentId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assignmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assignmentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assignmentId = assignmentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Reschedule Learning Assignment
	 * @async
	 * @param {string} assignmentId - The ID of Learning Assignment
	 * @param {LearningAssignmentReschedule} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/{assignmentId}/reschedule" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchLearningAssignmentReschedule(assignmentId, body) {
		const endpointPath = "/api/v2/learning/assignments/{assignmentId}/reschedule";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assignmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assignmentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assignmentId = assignmentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List of Learning Assignments assigned to current user
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.moduleId] -  Specifies the ID of the learning module. Fetch assignments for learning module ID
	 * @param {string} [query.interval] -  Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	 * @param {string} [query.completionInterval] -  Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	 * @param {string} [query.overdue] -  Specifies if only the non-overdue (overdue is "False") or overdue (overdue is "True") assignments are returned. If overdue is "Any" or if the overdue parameter is not supplied, all assignments are returned
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.pass] -  Specifies if only the failed (pass is "False") or passed (pass is "True") assignments (completed with assessment)are returned. If pass is "Any" or if the pass parameter is not supplied, all assignments are returned
	 * @param {number} [query.minPercentageScore] -  The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)
	 * @param {number} [query.maxPercentageScore] -  The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)
	 * @param {string} [query.sortOrder] -  Specifies result set sort order; if not specified, default sort order is descending (Desc)
	 * @param {string} [query.sortBy] -  Specifies which field to sort the results by, default sort is by recommendedCompletionDate
	 * @param {string[]} [query.types] -  Specifies the module types to filter by. Informational, AssessedContent and Assessment are deprecated
	 * @param {string[]} [query.states] -  Specifies the assignment states to filter by
	 * @param {string[]} [query.expand] -  Specifies the expand option for returning additional information
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/me" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getLearningAssignmentsMe(query) {
		const endpointPath = "/api/v2/learning/assignments/me";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("moduleId" in query && this.#checkJSONSchemaType(query["moduleId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
			}
			if ("interval" in query && this.#checkJSONSchemaType(query["interval"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "interval", "string");
			}
			if ("completionInterval" in query && this.#checkJSONSchemaType(query["completionInterval"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "completionInterval", "string");
			}
			if ("overdue" in query && this.#checkJSONSchemaType(query["overdue"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "overdue", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pass" in query && this.#checkJSONSchemaType(query["pass"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pass", "string");
			}
			if ("minPercentageScore" in query && this.#checkJSONSchemaType(query["minPercentageScore"], "number") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "minPercentageScore", "number");
			}
			if ("maxPercentageScore" in query && this.#checkJSONSchemaType(query["maxPercentageScore"], "number") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "maxPercentageScore", "number");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("types" in query && this.#checkJSONSchemaType(query["types"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "types", "array");
			}
			if ("states" in query && this.#checkJSONSchemaType(query["states"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "states", "array");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List of Learning module Assignments
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.moduleId] -  Specifies the ID of the learning module. Fetch assignments for learning module ID
	 * @param {string} [query.interval] -  Specifies the range of dueDates to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	 * @param {string} [query.completionInterval] -  Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
	 * @param {string} [query.overdue] -  Specifies if only the non-overdue (overdue is "False") or overdue (overdue is "True") assignments are returned. If overdue is "Any" or if the overdue parameter is not supplied, all assignments are returned
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.pass] -  Specifies if only the failed (pass is "False") or passed (pass is "True") assignments (completed with assessment)are returned. If pass is "Any" or if the pass parameter is not supplied, all assignments are returned
	 * @param {number} [query.minPercentageScore] -  The minimum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)
	 * @param {number} [query.maxPercentageScore] -  The maximum assessment score for an assignment (completed with assessment) to be included in the results (inclusive)
	 * @param {string} [query.sortOrder] -  Specifies result set sort order; if not specified, default sort order is descending (Desc)
	 * @param {string} [query.sortBy] -  Specifies which field to sort the results by, default sort is by recommendedCompletionDate
	 * @param {string[]} [query.userId] -  Specifies the list of user IDs to be queried, up to 100 user IDs.
	 * @param {string[]} [query.types] -  Specifies the module types to filter by. Informational, AssessedContent and Assessment are deprecated
	 * @param {string[]} [query.states] -  Specifies the assignment states to filter by
	 * @param {string[]} [query.expand] -  Specifies the expand option for returning additional information
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getLearningAssignments(query) {
		const endpointPath = "/api/v2/learning/assignments";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("moduleId" in query && this.#checkJSONSchemaType(query["moduleId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
			}
			if ("interval" in query && this.#checkJSONSchemaType(query["interval"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "interval", "string");
			}
			if ("completionInterval" in query && this.#checkJSONSchemaType(query["completionInterval"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "completionInterval", "string");
			}
			if ("overdue" in query && this.#checkJSONSchemaType(query["overdue"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "overdue", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pass" in query && this.#checkJSONSchemaType(query["pass"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pass", "string");
			}
			if ("minPercentageScore" in query && this.#checkJSONSchemaType(query["minPercentageScore"], "number") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "minPercentageScore", "number");
			}
			if ("maxPercentageScore" in query && this.#checkJSONSchemaType(query["maxPercentageScore"], "number") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "maxPercentageScore", "number");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("userId" in query && this.#checkJSONSchemaType(query["userId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "array");
			}
			if ("types" in query && this.#checkJSONSchemaType(query["types"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "types", "array");
			}
			if ("states" in query && this.#checkJSONSchemaType(query["states"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "states", "array");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create Learning Assignment
	 * @async
	 * @param {LearningAssignmentCreate} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningAssignments(body) {
		const endpointPath = "/api/v2/learning/assignments";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Reset Learning Assignment
	 * @async
	 * @param {string} assignmentId - The Learning Assignment ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/{assignmentId}/reset" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postLearningAssignmentReset(assignmentId) {
		const endpointPath = "/api/v2/learning/assignments/{assignmentId}/reset";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assignmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assignmentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assignmentId = assignmentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Reassign Learning Assignment
	 * @async
	 * @param {string} assignmentId - The Learning Assignment ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/{assignmentId}/reassign" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postLearningAssignmentReassign(assignmentId) {
		const endpointPath = "/api/v2/learning/assignments/{assignmentId}/reassign";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assignmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assignmentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assignmentId = assignmentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add multiple learning assignments
	 * @async
	 * @param {LearningAssignmentItem[]} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/bulkadd" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningAssignmentsBulkadd(body) {
		const endpointPath = "/api/v2/learning/assignments/bulkadd";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Remove multiple Learning Assignments
	 * @async
	 * @param {string[]} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/bulkremove" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningAssignmentsBulkremove(body) {
		const endpointPath = "/api/v2/learning/assignments/bulkremove";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Learning Assignment Step
	 * @async
	 * @param {string} assignmentId - The ID of Learning Assignment
	 * @param {string} stepId - The ID of Learning Assignment Step
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.shareableContentObjectId] -  The ID of SCO to load
	 * @param {string} [query.defaultShareableContentObject] -  The default SCO to retrieve
	 * @param {string[]} [query.expand] -  Fields to expand in response
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/{assignmentId}/steps/{stepId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getLearningAssignmentStep(assignmentId, stepId, query) {
		const endpointPath = "/api/v2/learning/assignments/{assignmentId}/steps/{stepId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assignmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assignmentId", "string");
		}

		if (this.#checkJSONSchemaType(stepId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "stepId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("shareableContentObjectId" in query && this.#checkJSONSchemaType(query["shareableContentObjectId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "shareableContentObjectId", "string");
			}
			if ("defaultShareableContentObject" in query && this.#checkJSONSchemaType(query["defaultShareableContentObject"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "defaultShareableContentObject", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assignmentId = assignmentId;
		apiCallOptions.pathParameters.stepId = stepId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update Learning Assignment Step
	 * @async
	 * @param {string} assignmentId - The ID of Learning Assignment
	 * @param {string} stepId - The ID of Learning Assignment Step
	 * @param {LearningAssignmentStep} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/assignments/{assignmentId}/steps/{stepId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchLearningAssignmentStep(assignmentId, stepId, body) {
		const endpointPath = "/api/v2/learning/assignments/{assignmentId}/steps/{stepId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assignmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assignmentId", "string");
		}

		if (this.#checkJSONSchemaType(stepId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "stepId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assignmentId = assignmentId;
		apiCallOptions.pathParameters.stepId = stepId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get users for learning module rule
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} query.pageSize -  Page size
	 * @param {number} query.pageNumber -  Page number
	 * @param {LearningAssignmentUserQuery} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/rules/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningRulesQuery(query, body) {
		const endpointPath = "/api/v2/learning/rules/query";
		const endpointMethod = "POST";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("pageSize" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "pageSize");
		}

		if (this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
		}

		if ("pageNumber" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "pageNumber");
		}

		if (this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a learning module
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Fields to expand in response(case insensitive)
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getLearningModule(moduleId, query) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a learning module
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @param {LearningModuleRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putLearningModule(moduleId, body) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a learning module
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteLearningModule(moduleId) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a learning module preview
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}/preview" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getLearningModulePreview(moduleId) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}/preview";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a learning module preview
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @param {LearningModulePreviewUpdateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}/preview" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putLearningModulePreview(moduleId, body) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}/preview";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all learning modules of an organization
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.isArchived] -  Archive status
	 * @param {string[]} [query.types] -  Specifies the module types. Informational, AssessedContent and Assessment are deprecated
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.sortOrder] -  Sort order
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.searchTerm] -  Search Term (searchable by name)
	 * @param {string[]} [query.expand] -  Fields to expand in response(case insensitive)
	 * @param {string} [query.isPublished] -  Specifies if only the Unpublished (isPublished is "False") or Published (isPublished is "True") modules are returned. If isPublished is "Any" or omitted, both types are returned
	 * @param {string[]} [query.statuses] -  Specifies the module statuses to filter by
	 * @param {string[]} [query.externalIds] -  Specifies the module external IDs to filter by. Only one ID is allowed
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getLearningModules(query) {
		const endpointPath = "/api/v2/learning/modules";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("isArchived" in query && this.#checkJSONSchemaType(query["isArchived"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "isArchived", "boolean");
			}
			if ("types" in query && this.#checkJSONSchemaType(query["types"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "types", "array");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("searchTerm" in query && this.#checkJSONSchemaType(query["searchTerm"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "searchTerm", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("isPublished" in query && this.#checkJSONSchemaType(query["isPublished"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "isPublished", "string");
			}
			if ("statuses" in query && this.#checkJSONSchemaType(query["statuses"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "statuses", "array");
			}
			if ("externalIds" in query && this.#checkJSONSchemaType(query["externalIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalIds", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new learning module
	 * @async
	 * @param {LearningModuleRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningModules(body) {
		const endpointPath = "/api/v2/learning/modules";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Publish a Learning module
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @param {LearningModulePublishRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}/publish" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningModulePublish(moduleId, body) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}/publish";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Starts a specified operation on learning module
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @param {LearningModuleJobRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningModuleJobs(moduleId, body) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all learning modules of an organization including assignments for a specific user
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} query.userIds -  The IDs of the users to include
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.searchTerm] -  Search Term (searches by name and description)
	 * @param {string} [query.overdue] -  Specifies if only modules with overdue/not overdue (overdue is "True" or "False") assignments are returned. If overdue is "Any" or omitted, both are returned and can including modules that are unassigned.
	 * @param {string[]} [query.assignmentStates] -  Specifies the assignment states to return.
	 * @param {string[]} [query.expand] -  Fields to expand in response(case insensitive)
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/assignments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getLearningModulesAssignments(query) {
		const endpointPath = "/api/v2/learning/modules/assignments";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("userIds" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "userIds");
		}

		if (this.#checkJSONSchemaType(query["userIds"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userIds", "array");
		}

		if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
		}

		if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
		}

		if ("searchTerm" in query && this.#checkJSONSchemaType(query["searchTerm"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "searchTerm", "string");
		}

		if ("overdue" in query && this.#checkJSONSchemaType(query["overdue"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "overdue", "string");
		}

		if ("assignmentStates" in query && this.#checkJSONSchemaType(query["assignmentStates"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assignmentStates", "array");
		}

		if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an external assignment for a specific user
	 * @async
	 * @param {string} moduleId - Key identifier for the module
	 * @param {string} userId - Key identifier for the user
	 * @param {LearningAssignmentExternalUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}/users/{userId}/assignments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchLearningModuleUserAssignments(moduleId, userId, body) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}/users/{userId}/assignments";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a specific Learning Module job status
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @param {string} jobId - The ID of the learning module job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getLearningModuleJob(moduleId, jobId) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get specific version of a published module
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @param {string} versionId - The version of learning module
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Fields to expand in response(case insensitive)
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}/versions/{versionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getLearningModuleVersion(moduleId, versionId, query) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}/versions/{versionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;
		apiCallOptions.pathParameters.versionId = versionId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a specific Learning Module cover art using ID
	 * @async
	 * @param {string} coverArtId - Key identifier for the cover art
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/coverart/{coverArtId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getLearningModulesCoverartCoverArtId(coverArtId) {
		const endpointPath = "/api/v2/learning/modules/coverart/{coverArtId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(coverArtId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "coverArtId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.coverArtId = coverArtId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a learning module rule
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}/rule" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getLearningModuleRule(moduleId) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}/rule";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a learning module rule
	 * @async
	 * @param {string} moduleId - The ID of the learning module
	 * @param {LearningModuleRule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/modules/{moduleId}/rule" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putLearningModuleRule(moduleId, body) {
		const endpointPath = "/api/v2/learning/modules/{moduleId}/rule";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(moduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "moduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.moduleId = moduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get list of possible slots where a learning activity can be scheduled.
	 * @async
	 * @param {LearningScheduleSlotsQueryRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/scheduleslots/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningScheduleslotsQuery(body) {
		const endpointPath = "/api/v2/learning/scheduleslots/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Learning SCORM Result
	 * @async
	 * @param {string} scormId - The ID of the SCORM package
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/scorm/{scormId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getLearningScormScormId(scormId) {
		const endpointPath = "/api/v2/learning/scorm/{scormId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(scormId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scormId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.scormId = scormId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a SCORM package upload request
	 * @async
	 * @param {LearningScormUploadRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/learning/scorm" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postLearningScorm(body) {
		const endpointPath = "/api/v2/learning/scorm";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { LearningAPI };