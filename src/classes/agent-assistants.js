/**
 * Manage virtual agent assistants.
 * @module gc-platform-api-agent-assistants
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.233Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} AnswerGenerationConfig
 * @property {boolean} enabled - Answer generation is enabled.
 */
 
/**
 * @typedef {object} Assistant
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the assistant that will assist the agent.
 * @property {string} [dateCreated] - Date when the assistant was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Date when the assistant was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {UserReference} [createdBy] - The user who created the assistant.
 * @property {UserReference} [modifiedBy] - The user who last modified the assistant.
 * @property {GoogleDialogflowConfig} [googleDialogflowConfig] - (Deprecated: use the 'knowledgeSuggestionConfig' for genesys knowledge suggestions) Configuration of Dialogflow used to assist the agent with transcriptions and knowledge suggestions.
 * @property {TranscriptionConfig} transcriptionConfig - Configuration for speech transcription used to assist the agent.
 * @property {KnowledgeSuggestionConfig} knowledgeSuggestionConfig - Configuration that defines how to produce knowledge suggestions.
 * @property {string} [state] - State of the assistant.
 * @property {Copilot} [copilot] - Agent copilot configuration.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} AssistantQueue
 * @property {string} id - The globally unique identifier for the queue.
 * @property {string[]} mediaTypes - List of media Types in which the assistant is activated for this queue.
 * @property {Assistant} [assistant] - Assistant to which the queue is assigned.
 * @property {string} [dateCreated] - Date when the assistant queue was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Date when the assistant queue was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ConversationProfile
 * @property {string} languageCode - The language code supported by the conversation profile belonging to a particular project for Dialogflow.
 * @property {string} name - The name of the conversation profile belonging to a particular project for Dialogflow
 */
 
/**
 * @typedef {object} Copilot
 * @property {boolean} [enabled] - Copilot is enabled.
 * @property {boolean} liveOnQueue - Copilot is live on selected queue.
 * @property {string} defaultLanguage - Copilot default language, e.g. [en-US, es-US, es-ES]. Once set, it can not be modified.
 * @property {KnowledgeAnswerConfig} [knowledgeAnswerConfig] - Knowledge answer configuration.
 * @property {SummaryGenerationConfig} [summaryGenerationConfig] - Copilot generated summary configuration.
 * @property {WrapupCodePredictionConfig} [wrapupCodePredictionConfig] - Copilot generated wrapup code prediction configuration.
 * @property {AnswerGenerationConfig} [answerGenerationConfig] - Answer generation configuration.
 * @property {string} [nluEngineType] - Language understanding engine type.
 * @property {NluConfig} [nluConfig] - NLU configuration.
 * @property {RuleEngineConfig} [ruleEngineConfig] - Rule engine configuration.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CopilotAction
 * @property {string} actionType - Type of action.
 * @property {object} [attributes] - Action specific attributes, if any. Maximum 100 of string key-value pair allowed.
 */
 
/**
 * @typedef {object} CopilotCondition
 * @property {string} conditionType - Type of condition.
 * @property {string[]} conditionValues - Condition values.
 */
 
/**
 * @typedef {object} CopilotFallbackAction
 * @property {string} actionType - Type of action.
 * @property {object} [attributes] - Action specific attributes, if any. Maximum 100 of string key-value pair allowed.
 */
 
/**
 * @typedef {object} CopilotNluDomain
 * @property {string} id - Id of the NLU domain.
 * @property {boolean} useLatestVersion - Use the latest version of the NLU domain. If false, version is required.
 * @property {CopilotNluDomainVersion} [version] - NLU domain version.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CopilotNluDomainVersion
 * @property {string} id - Id of the NLU v3 domain version.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CopilotRule
 * @property {CopilotCondition[]} conditions - List of conditions to execute actions, must have at least 1 element and maximum 100 elements. Operator in case of multiple conditions: 'OR'.
 * @property {CopilotAction[]} actions - List of actions to execute, must have at least 1 element and maximum 100 elements.
 */
 
/**
 * @typedef {object} Fallback
 * @property {boolean} [enabled] - Fallback actions are enabled.
 * @property {CopilotFallbackAction[]} [actions] - Fallback actions.
 */
 
/**
 * @typedef {object} GoogleDialogflowConfig
 * @property {string} [integrationId] - The integration identifier with which the assistant will fetch transcriptions and knowledge suggestions.
 * @property {ConversationProfile[]} conversationProfiles - The conversation profiles for which the assistant will fetch transcription and knowledge suggestions.
 */
 
/**
 * @typedef {object} KnowledgeAnswerConfig
 * @property {boolean} enabled - Knowledge answer is enabled.
 */
 
/**
 * @typedef {object} KnowledgeBaseReference
 * @property {string} id - The globally unique identifier for the knowledge base.
 * @property {string} [languageCode] - Language of the knowledge base
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeBaseWithDialectReference
 * @property {string} id - The globally unique identifier for the knowledge base.
 * @property {string} languageCode - The dialect for the knowledge base.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeSuggestionConfig
 * @property {string} vendorName - The name of vendor used for knowledge suggestions.
 * @property {KnowledgeBaseReference} [knowledgeBase] - The ID of knowledge base to query when Genesys is the knowledge suggestions provider.
 * @property {KnowledgeBaseWithDialectReference[]} [knowledgeBases] - The knowledge bases to query based on dialect, when Genesys is the knowledge suggestions provider.
 */
 
/**
 * @typedef {object} NluConfig
 * @property {CopilotNluDomain} domain - NLU domain.
 * @property {number} intentConfidenceThreshold - Minimum confidence value of accepting NLU intents, must be greater than 0 and less than 1.
 */
 
/**
 * @typedef {object} RuleConfig
 * @property {string} [id] - Rule ID.
 * @property {boolean} enabled - Rule enabled.
 * @property {CopilotRule} rule - Rule configuration.
 */
 
/**
 * @typedef {object} RuleEngineConfig
 * @property {RuleConfig[]} rules - List of rules to evaluate by the engine.
 * @property {Fallback} [fallback] - Fallback configuration.
 */
 
/**
 * @typedef {object} SummaryGenerationConfig
 * @property {boolean} enabled - Copilot generated summary is enabled.
 */
 
/**
 * @typedef {object} TranscriptionConfig
 * @property {string} vendorName - The name of the vendor used for speech transcription.
 */
 
/**
 * @typedef {object} UserReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WrapupCodePredictionConfig
 * @property {boolean} enabled - Copilot generated wrapup code prediction is enabled.
 */
 

/**
 * AgentAssistants - Manage virtual agent assistants.
 * @class AgentAssistants
 */
class AgentAssistantsAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the AgentAssistants class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Get queue Information for an assistant.
	 * @async
	 * @param {string} assistantId - Assistant ID
	 * @param {string} queueId - Queue ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.expand] -  Which fields, if any, to expand.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/{assistantId}/queues/{queueId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getAssistantQueue(assistantId, queueId, query) {
		const endpointPath = "/api/v2/assistants/{assistantId}/queues/{queueId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assistantId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assistantId", "string");
		}

		if (this.#checkJSONSchemaType(queueId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queueId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assistantId = assistantId;
		apiCallOptions.pathParameters.queueId = queueId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a queue assistant association.
	 * @async
	 * @param {string} assistantId - Assistant ID
	 * @param {string} queueId - Queue ID
	 * @param {AssistantQueue} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/{assistantId}/queues/{queueId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putAssistantQueue(assistantId, queueId, body) {
		const endpointPath = "/api/v2/assistants/{assistantId}/queues/{queueId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assistantId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assistantId", "string");
		}

		if (this.#checkJSONSchemaType(queueId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queueId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assistantId = assistantId;
		apiCallOptions.pathParameters.queueId = queueId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Disassociate a queue from an assistant.
	 * @async
	 * @param {string} assistantId - Assistant ID
	 * @param {string} queueId - Queue ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/{assistantId}/queues/{queueId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteAssistantQueue(assistantId, queueId) {
		const endpointPath = "/api/v2/assistants/{assistantId}/queues/{queueId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assistantId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assistantId", "string");
		}

		if (this.#checkJSONSchemaType(queueId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queueId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assistantId = assistantId;
		apiCallOptions.pathParameters.queueId = queueId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all the queues associated with an assistant.
	 * @async
	 * @param {string} assistantId - Assistant ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.expand] -  Which fields, if any, to expand.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/{assistantId}/queues" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getAssistantQueues(assistantId, query) {
		const endpointPath = "/api/v2/assistants/{assistantId}/queues";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assistantId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assistantId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assistantId = assistantId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Disassociate the queues from an assistant for the given assistant ID and queue IDs.
	 * @async
	 * @param {string} assistantId - Assistant ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.queueIds] -  Comma-separated identifiers of the queues that need to be deleted.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/{assistantId}/queues" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteAssistantQueues(assistantId, query) {
		const endpointPath = "/api/v2/assistants/{assistantId}/queues";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assistantId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assistantId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("queueIds" in query && this.#checkJSONSchemaType(query["queueIds"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queueIds", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assistantId = assistantId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update Queues for an Assistant.
	 * @async
	 * @param {string} assistantId - Assistant ID
	 * @param {AssistantQueue[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/{assistantId}/queues" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchAssistantQueues(assistantId, body) {
		const endpointPath = "/api/v2/assistants/{assistantId}/queues";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assistantId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assistantId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assistantId = assistantId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an assistant.
	 * @async
	 * @param {string} assistantId - Assistant ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.expand] -  Which fields, if any, to expand.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/{assistantId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getAssistant(assistantId, query) {
		const endpointPath = "/api/v2/assistants/{assistantId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assistantId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assistantId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assistantId = assistantId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an assistant.
	 * @async
	 * @param {string} assistantId - Assistant ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/{assistantId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteAssistant(assistantId) {
		const endpointPath = "/api/v2/assistants/{assistantId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assistantId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assistantId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assistantId = assistantId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an assistant.
	 * @async
	 * @param {string} assistantId - Assistant ID
	 * @param {Assistant} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/{assistantId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchAssistant(assistantId, body) {
		const endpointPath = "/api/v2/assistants/{assistantId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(assistantId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "assistantId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.assistantId = assistantId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all assistants.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.limit] -  Number of entities to return. Maximum of 200. Deprecated in favour of pageSize
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.name] -  Return the assistant by the given name.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getAssistants(query) {
		const endpointPath = "/api/v2/assistants";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an Assistant.
	 * @async
	 * @param {Assistant} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postAssistants(body) {
		const endpointPath = "/api/v2/assistants";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all queues assigned to any assistant.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.queueIds] -  Comma-separated identifiers of the queues that need to be retrieved.
	 * @param {string} [query.expand] -  Which fields, if any, to expand.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/assistants/queues" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getAssistantsQueues(query) {
		const endpointPath = "/api/v2/assistants/queues";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("queueIds" in query && this.#checkJSONSchemaType(query["queueIds"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queueIds", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { AgentAssistantsAPI };