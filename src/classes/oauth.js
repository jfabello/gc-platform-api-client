/**
 * OAuth clients, providers
 * @module gc-platform-api-oauth
 * @documentation https://developer.mypurecloud.com/api/rest/v2/oauth/
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.193Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} ApiUsageClientQuery
 * @property {string} interval - Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 * @property {string} [granularity] - Date granularity of the results
 * @property {string[]} [metrics] - Behaves like a SQL SELECT clause. Enables retrieving only named metrics. If omitted, all metrics that are available will be returned (like SELECT *).
 * @property {string[]} [groupBy] - Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.
 */
 
/**
 * @typedef {object} OAuthClientRequest
 * @property {string} name - The name of the OAuth client.
 * @property {number} [accessTokenValiditySeconds] - The number of seconds, between 5mins and 48hrs, until tokens created with this client expire. If this field is omitted, a default of 24 hours will be applied.
 * @property {string} [description]
 * @property {string[]} [registeredRedirectUri] - List of allowed callbacks for this client. For example: https://myap.example.com/auth/callback
 * @property {string[]} [roleIds] - Deprecated. Use roleDivisions instead.
 * @property {string} authorizedGrantType - The OAuth Grant/Client type supported by this client.
Code Authorization Grant/Client type - Preferred client type where the Client ID and Secret are required to create tokens. Used where the secret can be secured.
PKCE-Enabled Code Authorization grant type - Code grant type which requires PKCE challenge and verifier to create tokens. Used in public clients for increased security.
Implicit grant type - Client ID only is required to create tokens. Used in browser and mobile apps where the secret can not be secured.
SAML2-Bearer extension grant type - SAML2 assertion provider for user authentication at the token endpoint.
Client Credential grant type - Used to created access tokens that are tied only to the client.

 * @property {string[]} [scope] - The scope requested by this client. Scopes only apply to clients not using the client_credential grant
 * @property {RoleDivision[]} [roleDivisions] - Set of roles and their corresponding divisions associated with this client. Roles and divisions only apply to clients using the client_credential grant
 * @property {string} [state] - The state of the OAuth client.
Active: The OAuth client can be used to create access tokens. This is the default state.
Disabled: Access tokens created by the client are invalid and new ones cannot be created.
Inactive: Access tokens cannot be created with this OAuth client and it will be deleted.
 * @property {string} [dateToDelete] - The time at which this client will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} RoleDivision
 * @property {string} roleId - Role to be associated with the given division which forms a grant
 * @property {string} divisionId - Division associated with the given role which forms a grant
 */
 

/**
 * OAuth - OAuth clients, providers
 * @class OAuth
 */
class OAuthAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the OAuth class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Get a client that is authorized by the resource owner
	 * @async
	 * @param {string} clientId - The ID of client
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} Accept-Language - (optional) The language in which to display the client descriptions.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/authorizations/{clientId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 */
	getOauthAuthorization(clientId, headers) {
		const endpointPath = "/api/v2/oauth/authorizations/{clientId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(clientId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "clientId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("Accept-Language" in headers && this.#checkJSONSchemaType(headers["Accept-Language"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "Accept-Language", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.clientId = clientId;
		apiCallOptions.headers = headers;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List clients that have been authorized, requested, or revoked by the resource owner
	 * @async
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} Accept-Language - (optional) The language in which to display the client descriptions.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/authorizations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 */
	getOauthAuthorizations(headers) {
		const endpointPath = "/api/v2/oauth/authorizations";
		const endpointMethod = "GET";

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("Accept-Language" in headers && this.#checkJSONSchemaType(headers["Accept-Language"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "Accept-Language", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.headers = headers;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * An OAuth scope
	 * @async
	 * @param {string} scopeId - Scope ID
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} Accept-Language - (optional) The language with which to display the scope description.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/scopes/{scopeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 */
	getOauthScope(scopeId, headers) {
		const endpointPath = "/api/v2/oauth/scopes/{scopeId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(scopeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scopeId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("Accept-Language" in headers && this.#checkJSONSchemaType(headers["Accept-Language"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "Accept-Language", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.scopeId = scopeId;
		apiCallOptions.headers = headers;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * The list of OAuth scopes
	 * @async
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} Accept-Language - (optional) The language with which to display the scope descriptions.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/scopes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 */
	getOauthScopes(headers) {
		const endpointPath = "/api/v2/oauth/scopes";
		const endpointMethod = "GET";

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("Accept-Language" in headers && this.#checkJSONSchemaType(headers["Accept-Language"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "Accept-Language", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.headers = headers;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get OAuth Client
	 * @async
	 * @param {string} clientId - Client ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/clients/{clientId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOauthClient(clientId) {
		const endpointPath = "/api/v2/oauth/clients/{clientId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(clientId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "clientId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.clientId = clientId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update OAuth Client
	 * @async
	 * @param {string} clientId - Client ID
	 * @param {OAuthClientRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/clients/{clientId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOauthClient(clientId, body) {
		const endpointPath = "/api/v2/oauth/clients/{clientId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(clientId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "clientId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.clientId = clientId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete OAuth Client
	 * @async
	 * @param {string} clientId - Client ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/clients/{clientId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOauthClient(clientId) {
		const endpointPath = "/api/v2/oauth/clients/{clientId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(clientId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "clientId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.clientId = clientId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Regenerate Client Secret
	 * @async
	 * @param {string} clientId - Client ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/clients/{clientId}/secret" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postOauthClientSecret(clientId) {
		const endpointPath = "/api/v2/oauth/clients/{clientId}/secret";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(clientId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "clientId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.clientId = clientId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for OAuth client API usage
	 * @async
	 * @param {string} clientId - Client ID
	 * @param {ApiUsageClientQuery} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/clients/{clientId}/usage/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOauthClientUsageQuery(clientId, body) {
		const endpointPath = "/api/v2/oauth/clients/{clientId}/usage/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(clientId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "clientId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.clientId = clientId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a summary of OAuth client API usage
	 * @async
	 * @param {string} clientId - Client ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.days] -  Previous number of days to query
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/clients/{clientId}/usage/summary" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOauthClientUsageSummary(clientId, query) {
		const endpointPath = "/api/v2/oauth/clients/{clientId}/usage/summary";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(clientId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "clientId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("days" in query && this.#checkJSONSchemaType(query["days"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "days", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.clientId = clientId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the results of a usage query
	 * @async
	 * @param {string} executionId - ID of the query execution
	 * @param {string} clientId - Client ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/clients/{clientId}/usage/query/results/{executionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOauthClientUsageQueryResult(executionId, clientId) {
		const endpointPath = "/api/v2/oauth/clients/{clientId}/usage/query/results/{executionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(executionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "executionId", "string");
		}

		if (this.#checkJSONSchemaType(clientId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "clientId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.executionId = executionId;
		apiCallOptions.pathParameters.clientId = clientId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * The list of OAuth clients
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/clients" endpoint.
	 */
	getOauthClients() {
		const endpointPath = "/api/v2/oauth/clients";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create OAuth client
	 * @async
	 * @param {OAuthClientRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/oauth/clients" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOauthClients(body) {
		const endpointPath = "/api/v2/oauth/clients";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { OAuthAPI };