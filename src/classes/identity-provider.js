/**
 * Identity providers
 * @module gc-platform-api-identity-provider
 * @documentation https://developer.genesys.cloud/authorization/oauth-apis/identityprovider/
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.192Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} ADFS
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CustomerInteractionCenter
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CustomProvider
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {boolean} [endpointCompression]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} GenericSAML
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {boolean} [endpointCompression]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} GSuite
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} IdentityNow
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Okta
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} OneLogin
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} PingIdentity
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} PureCloud
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} PureEngage
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {boolean} [autoProvisionUsers]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Salesforce
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [disabled]
 * @property {string} [issuerURI]
 * @property {string} [ssoTargetURI]
 * @property {string} [sloURI]
 * @property {string} [sloBinding]
 * @property {string} [relyingPartyIdentifier]
 * @property {string} [certificate]
 * @property {string[]} [certificates]
 * @property {string} [logoImageData]
 * @property {string} [nameIdentifierFormat]
 * @property {string} [ssoBinding]
 * @property {boolean} [signAuthnRequests]
 * @property {string} [providerName]
 * @property {boolean} [displayOnLogin]
 * @property {string} [selfUri] - The URI for this object
 */
 

/**
 * IdentityProvider - Identity providers
 * @class IdentityProvider
 */
class IdentityProviderAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the IdentityProvider class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Get ADFS Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/adfs" endpoint.
	 */
	getIdentityprovidersAdfs() {
		const endpointPath = "/api/v2/identityproviders/adfs";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create ADFS Identity Provider
	 * @async
	 * @param {ADFS} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/adfs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersAdfs(body) {
		const endpointPath = "/api/v2/identityproviders/adfs";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete ADFS Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/adfs" endpoint.
	 */
	deleteIdentityprovidersAdfs() {
		const endpointPath = "/api/v2/identityproviders/adfs";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Customer Interaction Center (CIC) Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/cic" endpoint.
	 */
	getIdentityprovidersCic() {
		const endpointPath = "/api/v2/identityproviders/cic";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create Customer Interaction Center (CIC) Identity Provider
	 * @async
	 * @param {CustomerInteractionCenter} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/cic" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersCic(body) {
		const endpointPath = "/api/v2/identityproviders/cic";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Customer Interaction Center (CIC) Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/cic" endpoint.
	 */
	deleteIdentityprovidersCic() {
		const endpointPath = "/api/v2/identityproviders/cic";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get G Suite Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/gsuite" endpoint.
	 */
	getIdentityprovidersGsuite() {
		const endpointPath = "/api/v2/identityproviders/gsuite";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create G Suite Identity Provider
	 * @async
	 * @param {GSuite} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/gsuite" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersGsuite(body) {
		const endpointPath = "/api/v2/identityproviders/gsuite";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete G Suite Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/gsuite" endpoint.
	 */
	deleteIdentityprovidersGsuite() {
		const endpointPath = "/api/v2/identityproviders/gsuite";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Generic SAML Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/generic" endpoint.
	 */
	getIdentityprovidersGeneric() {
		const endpointPath = "/api/v2/identityproviders/generic";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create Generic SAML Identity Provider
	 * @async
	 * @param {GenericSAML} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/generic" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersGeneric(body) {
		const endpointPath = "/api/v2/identityproviders/generic";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Generic SAML Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/generic" endpoint.
	 */
	deleteIdentityprovidersGeneric() {
		const endpointPath = "/api/v2/identityproviders/generic";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get IdentityNow Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/identitynow" endpoint.
	 */
	getIdentityprovidersIdentitynow() {
		const endpointPath = "/api/v2/identityproviders/identitynow";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create IdentityNow Provider
	 * @async
	 * @param {IdentityNow} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/identitynow" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersIdentitynow(body) {
		const endpointPath = "/api/v2/identityproviders/identitynow";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete IdentityNow Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/identitynow" endpoint.
	 */
	deleteIdentityprovidersIdentitynow() {
		const endpointPath = "/api/v2/identityproviders/identitynow";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * The list of identity providers
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders" endpoint.
	 */
	getIdentityproviders() {
		const endpointPath = "/api/v2/identityproviders";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create Identity Provider
	 * @async
	 * @param {CustomProvider} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postIdentityproviders(body) {
		const endpointPath = "/api/v2/identityproviders";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Identity Provider
	 * @async
	 * @param {string} providerId - Provider ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/{providerId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getIdentityprovider(providerId) {
		const endpointPath = "/api/v2/identityproviders/{providerId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(providerId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "providerId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.providerId = providerId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update Identity Provider
	 * @async
	 * @param {string} providerId - Provider ID
	 * @param {CustomProvider} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/{providerId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovider(providerId, body) {
		const endpointPath = "/api/v2/identityproviders/{providerId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(providerId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "providerId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.providerId = providerId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Identity Provider
	 * @async
	 * @param {string} providerId - Provider ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/{providerId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteIdentityprovider(providerId) {
		const endpointPath = "/api/v2/identityproviders/{providerId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(providerId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "providerId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.providerId = providerId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Okta Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/okta" endpoint.
	 */
	getIdentityprovidersOkta() {
		const endpointPath = "/api/v2/identityproviders/okta";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create Okta Identity Provider
	 * @async
	 * @param {Okta} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/okta" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersOkta(body) {
		const endpointPath = "/api/v2/identityproviders/okta";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Okta Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/okta" endpoint.
	 */
	deleteIdentityprovidersOkta() {
		const endpointPath = "/api/v2/identityproviders/okta";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get OneLogin Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/onelogin" endpoint.
	 */
	getIdentityprovidersOnelogin() {
		const endpointPath = "/api/v2/identityproviders/onelogin";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create OneLogin Identity Provider
	 * @async
	 * @param {OneLogin} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/onelogin" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersOnelogin(body) {
		const endpointPath = "/api/v2/identityproviders/onelogin";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete OneLogin Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/onelogin" endpoint.
	 */
	deleteIdentityprovidersOnelogin() {
		const endpointPath = "/api/v2/identityproviders/onelogin";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Ping Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/ping" endpoint.
	 */
	getIdentityprovidersPing() {
		const endpointPath = "/api/v2/identityproviders/ping";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create Ping Identity Provider
	 * @async
	 * @param {PingIdentity} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/ping" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersPing(body) {
		const endpointPath = "/api/v2/identityproviders/ping";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Ping Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/ping" endpoint.
	 */
	deleteIdentityprovidersPing() {
		const endpointPath = "/api/v2/identityproviders/ping";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get PureCloud Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/purecloud" endpoint.
	 */
	getIdentityprovidersPurecloud() {
		const endpointPath = "/api/v2/identityproviders/purecloud";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create PureCloud Identity Provider
	 * @async
	 * @param {PureCloud} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/purecloud" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersPurecloud(body) {
		const endpointPath = "/api/v2/identityproviders/purecloud";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete PureCloud Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/purecloud" endpoint.
	 */
	deleteIdentityprovidersPurecloud() {
		const endpointPath = "/api/v2/identityproviders/purecloud";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get PureEngage Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/pureengage" endpoint.
	 */
	getIdentityprovidersPureengage() {
		const endpointPath = "/api/v2/identityproviders/pureengage";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create PureEngage Identity Provider
	 * @async
	 * @param {PureEngage} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/pureengage" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersPureengage(body) {
		const endpointPath = "/api/v2/identityproviders/pureengage";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete PureEngage Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/pureengage" endpoint.
	 */
	deleteIdentityprovidersPureengage() {
		const endpointPath = "/api/v2/identityproviders/pureengage";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Salesforce Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/salesforce" endpoint.
	 */
	getIdentityprovidersSalesforce() {
		const endpointPath = "/api/v2/identityproviders/salesforce";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update/Create Salesforce Identity Provider
	 * @async
	 * @param {Salesforce} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/salesforce" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putIdentityprovidersSalesforce(body) {
		const endpointPath = "/api/v2/identityproviders/salesforce";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Salesforce Identity Provider
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/identityproviders/salesforce" endpoint.
	 */
	deleteIdentityprovidersSalesforce() {
		const endpointPath = "/api/v2/identityproviders/salesforce";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { IdentityProviderAPI };