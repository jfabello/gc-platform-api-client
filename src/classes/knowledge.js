/**
 * Knowledge administration and search
 * @module gc-platform-api-knowledge
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.275Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} AddressableEntityRef
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} ArticleContent
 * @property {ArticleContentBody} [body] - Body of the article content.
 */
 
/**
 * @typedef {object} ArticleContentBody
 * @property {string} [locationUrl] - Presigned URL to retrieve the document content.
 */
 
/**
 * @typedef {object} CategoryCreateRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the category.
 * @property {string} [parentCategoryId]
 * @property {string} [description] - The description for the category.
 * @property {string} [externalId] - The external id associated with the category.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CategoryReference
 * @property {string} id - The globally unique identifier for the category.
 * @property {string} [name] - Category name.
 * @property {CategoryReference} [parentCategory] - The reference to category to which this category belongs to.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CategoryResponse
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the category.
 * @property {string} [description]
 * @property {string} [externalId]
 * @property {string} [dateCreated] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {CategoryReference} [parentCategory] - The reference to category to which this category belongs to.
 * @property {number} [documentCount] - Number of documents assigned to this category.
 * @property {KnowledgeBaseReference} [knowledgeBase] - The reference to knowledge base to which the category belongs to.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CategoryUpdateRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name] - The name of the category.
 * @property {string} [parentCategoryId] - The category to which this category belongs.
 * @property {string} [description]
 * @property {string} [externalId] - The external id associated with the category.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CreateUploadSourceUrlJobRequest
 * @property {string} uploadUrl - The URL of the content to upload.
 */
 
/**
 * @typedef {object} DocumentArticle
 * @property {string} title - The title of the Article.
 * @property {ArticleContent} [content] - The content of the Article.
 * @property {string[]} [alternatives] - List of Alternative questions related to the title which helps in improving the likelihood of a match to user query.
 */
 
/**
 * @typedef {object} DocumentBody
 * @property {DocumentBodyBlock[]} blocks - The list of building blocks for the document body.
 */
 
/**
 * @typedef {object} DocumentBodyBlock
 * @property {string} type - The type of the block for the body. This determines which body block object (paragraph, list, video, image or table) would have a value.
 * @property {DocumentBodyImage} [image] - Image. It must contain a value if the type of the block is Image.
 * @property {DocumentBodyVideo} [video] - Video. It must contain a value if the type of the block is Video.
 * @property {DocumentBodyParagraph} [paragraph] - Paragraph. It must contain a value if the type of the block is Paragraph.
 * @property {DocumentBodyList} [list] - List. It must contain a value if the type of the block is UnorderedList or OrderedList.
 * @property {DocumentBodyTable} [table] - Table. It must contain a value if type of the block is Table.
 */
 
/**
 * @typedef {object} DocumentBodyImage
 * @property {string} url - The URL for the image.
 * @property {string} [hyperlink] - The URL of the page OR an email OR the reference to the knowledge article that the hyperlink goes to. Possible URL value types are https://<url link> | mailto:<email> | grn:knowledge:::documentVariation/<knowledgeBaseId>/<documentId>/<variationId> | grn:knowledge:::document/<knowledgeBaseId>/<documentId> | grn:knowledge:::category/<knowledgeBaseId>/<categoryId> | grn:knowledge:::label/<knowledgeBaseId>/<labelId>
 * @property {DocumentBodyImageProperties} [properties] - The properties for the image.
 */
 
/**
 * @typedef {object} DocumentBodyImageProperties
 * @property {string} [backgroundColor] - The background color property for the image. The valid values in hex color code representation. For example black color - #000000
 * @property {string} [align] - The align property for the image.
 * @property {number} [indentation] - The indentation property for the image. The valid values in 'em'.
 * @property {number} [width] - The width of the image converted to em unit.
 * @property {DocumentElementLength} [widthWithUnit] - The width of the image in the specified unit.
 * @property {string} [altText] - Alternate text for the image for accessibility and when the image can't be loaded.
 */
 
/**
 * @typedef {object} DocumentBodyList
 * @property {DocumentBodyListBlockProperties} [properties] - Properties for the UnorderedList or OrderedList.
 * @property {DocumentBodyListBlock[]} blocks - The list of items for an OrderedList or an UnorderedList.
 */
 
/**
 * @typedef {object} DocumentBodyListBlock
 * @property {string} type - The type of the list block.
 * @property {DocumentBodyListItemProperties} [properties] - The properties for the list block.
 * @property {DocumentListContentBlock[]} blocks - The list of items for an OrderedList or an UnorderedList.
 */
 
/**
 * @typedef {object} DocumentBodyListBlockProperties
 * @property {string} [unorderedType] - The type of icon for the unordered list.
 * @property {string} [orderedType] - The type of icon for the ordered list.
 */
 
/**
 * @typedef {object} DocumentBodyListItemProperties
 * @property {string} [backgroundColor] - The background color for the list item. The valid values in hex color code representation. For example black color - #000000
 * @property {string} [align] - The align type for the list item.
 * @property {number} [indentation] - The indentation property for the list item. The valid values in 'em'.
 * @property {string} [fontSize] - The font size for the list item. The valid values in 'em'.
 * @property {string} [fontType] - The font type for the list item.
 * @property {string} [textColor] - The text color for the list item. The valid values in hex color code representation. For example black color - #000000
 * @property {string} [unorderedType] - The type of icon for the unordered list.
 * @property {string} [orderedType] - The type of icon for the ordered list.
 */
 
/**
 * @typedef {object} DocumentBodyParagraph
 * @property {DocumentContentBlock[]} blocks - The list of blocks for the paragraph.
 * @property {DocumentBodyParagraphProperties} [properties] - The properties for the paragraph.
 */
 
/**
 * @typedef {object} DocumentBodyParagraphProperties
 * @property {string} [fontSize] - The font size for the paragraph. The valid values in 'em'.
 * @property {string} [fontType] - The font type for the paragraph.
 * @property {string} [textColor] - The text color for the paragraph. The valid values in hex color code representation. For example black color - #000000
 * @property {string} [backgroundColor] - The background color for the paragraph. The valid values in hex color code representation. For example black color - #000000
 * @property {string} [align] - The align type for the paragraph.
 * @property {number} [indentation] - The indentation color for the paragraph. The valid values in 'em'.
 */
 
/**
 * @typedef {object} DocumentBodyRequest
 * @property {DocumentBodyBlock[]} blocks - The list of building blocks for the document body.
 */
 
/**
 * @typedef {object} DocumentBodyResponse
 * @property {DocumentBodyBlock[]} blocks - The list of building blocks for the document body.
 */
 
/**
 * @typedef {object} DocumentBodyTable
 * @property {DocumentBodyTableProperties} [properties] - The properties for the table.
 * @property {DocumentBodyTableRowBlock[]} rows - The list of rows for the table.
 */
 
/**
 * @typedef {object} DocumentBodyTableCaptionBlock
 * @property {DocumentBodyTableCaptionItem[]} blocks - The list of building blocks for the caption property.
 */
 
/**
 * @typedef {object} DocumentBodyTableCaptionItem
 * @property {string} type - The type of the caption item.
 * @property {DocumentText} [text] - Text. It must contain a value if the type of the block is Text.
 * @property {DocumentBodyParagraph} [paragraph] - Paragraph. It must contain a value if the type of the block is Paragraph.
 * @property {DocumentBodyImage} [image] - Image. It must contain a value if the type of the block is Image.
 * @property {DocumentBodyVideo} [video] - Video. It must contain a value if the type of the block is Video.
 * @property {DocumentBodyList} [list] - List. It must contain a value if the type of the block is UnorderedList or OrderedList.
 */
 
/**
 * @typedef {object} DocumentBodyTableCellBlock
 * @property {DocumentBodyTableCellBlockProperties} [properties] - The properties for the table cell.
 * @property {DocumentTableContentBlock[]} blocks - The list of content blocks for the table.
 */
 
/**
 * @typedef {object} DocumentBodyTableCellBlockProperties
 * @property {string} [cellType] - The type of the table cell.
 * @property {number} [width] - The width of the table cell converted to em unit.
 * @property {DocumentElementLength} [widthWithUnit] - The width of the table cell in the specified unit.
 * @property {number} [height] - The height for the table cell.
 * @property {string} [horizontalAlign] - The horizontal alignment for the table cell.
 * @property {string} [verticalAlign] - The vertical alignment for the table cell.
 * @property {number} [borderWidth] - The border width for the table cell. The valid values in 'em'
 * @property {string} [borderStyle] - The border style for the table cell.
 * @property {string} [borderColor] - The border color for the table cell. For example black color - #000000
 * @property {string} [backgroundColor] - The background color for the table cell. For example black color - #000000
 * @property {string} [scope] - The scope for the table cell.
 * @property {number} [colSpan] - The colSpan for the table cell.
 * @property {number} [rowSpan] - The rowSpan for the table cell.
 */
 
/**
 * @typedef {object} DocumentBodyTableProperties
 * @property {number} [width] - The width of the table converted to em unit.
 * @property {DocumentElementLength} [widthWithUnit] - The width of the table in the specified unit.
 * @property {number} [height] - The height for the table.
 * @property {number} [cellSpacing] - The cell spacing for the table. The valid values in 'em'.
 * @property {number} [cellPadding] - The cell padding for the table. The valid values in 'em'.
 * @property {number} [borderWidth] - The border width for the table. The valid values in 'em'
 * @property {string} [alignment] - The alignment for the table.
 * @property {string} [borderStyle] - The border style for the table.
 * @property {string} [borderColor] - The border color for the table. The valid values in hex color code representation. For example black color - #000000
 * @property {string} [backgroundColor] - The background color for the table. The valid values in hex color code representation. For example black color - #000000
 * @property {DocumentBodyTableCaptionBlock} [caption] - The caption for the table. The valid values in hex color code representation. For example black color - #000000
 */
 
/**
 * @typedef {object} DocumentBodyTableRowBlock
 * @property {DocumentBodyTableRowBlockProperties} [properties] - The properties for the table rows.
 * @property {DocumentBodyTableCellBlock[]} cells - The list of cells for the table.
 */
 
/**
 * @typedef {object} DocumentBodyTableRowBlockProperties
 * @property {string} [rowType] - The type of the table row.
 * @property {string} [alignment] - The alignment for the table row.
 * @property {number} [height] - The height for the table row.
 * @property {string} [borderStyle] - The border style for the table row.
 * @property {string} [borderColor] - The border color for the table row. For example black color - #000000
 * @property {string} [backgroundColor] - The background color for the table row. For example black color - #000000
 */
 
/**
 * @typedef {object} DocumentBodyVideo
 * @property {string} url - The URL for the video.
 * @property {DocumentBodyVideoProperties} [properties] - The properties for the video.
 */
 
/**
 * @typedef {object} DocumentBodyVideoProperties
 * @property {string} [backgroundColor] - The background color for the video. The valid values in hex color code representation. For example black color - #000000
 * @property {string} [align] - The align type for the video.
 * @property {number} [indentation] - The indentation for the video. The valid values in 'em'.
 * @property {DocumentElementLength} [width] - The width of the video in the specified unit.
 * @property {DocumentElementLength} [height] - The height of the video in the specified unit.
 */
 
/**
 * @typedef {object} DocumentCategoryInput
 * @property {string} id - KnowledgeBase Category ID
 */
 
/**
 * @typedef {object} DocumentContentBlock
 * @property {string} type - The type of the paragraph block.
 * @property {DocumentText} [text] - Text. It must contain a value if the type of the block is Text.
 * @property {DocumentBodyImage} [image] - Image. It must contain a value if the type of the block is Image.
 * @property {DocumentBodyVideo} [video] - Video. It must contain a value if the type of the block is Video.
 */
 
/**
 * @typedef {object} DocumentElementLength
 * @property {number} value - The length value of the element in the selected unit.
 * @property {string} unit - The unit of length.
 */
 
/**
 * @typedef {object} DocumentFaq
 * @property {string} question - The question for this FAQ
 * @property {string} answer - The answer for this FAQ
 * @property {string[]} [alternatives] - List of Alternative questions related to the answer which helps in improving the likelihood of a match to user query
 */
 
/**
 * @typedef {object} DocumentListContentBlock
 * @property {string} type - The type of the list block.
 * @property {DocumentText} [text] - Text. It must contain a value if the type of the block is Text.
 * @property {DocumentBodyImage} [image] - Image. It must contain a value if the type of the block is Image.
 * @property {DocumentBodyVideo} [video] - Video. It must contain a value if the type of the block is Video.
 * @property {DocumentBodyList} [list] - List. It must contain a value if the type of the block is UnorderedList or OrderedList.
 */
 
/**
 * @typedef {object} DocumentQuery
 * @property {DocumentQueryClause[]} clauses - Documents filter clauses/criteria. Limit of 20 clauses.
 * @property {string} operator - Specifies how the filter clauses will be applied together.
 */
 
/**
 * @typedef {object} DocumentQueryClause
 * @property {string} operator - Specifies how the predicates will be applied together.
 * @property {DocumentQueryPredicate[]} predicates - To apply multiple conditions. Limit of 10 predicates across all clauses.
 */
 
/**
 * @typedef {object} DocumentQueryInterval
 * @property {string} [field] - Specifies the date field to be used for date and time range.
 * @property {string} [value] - Specifies the date and time range for filtering the documents. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 */
 
/**
 * @typedef {object} DocumentQueryPredicate
 * @property {string[]} fields - Specifies the document fields to be matched against.
 * @property {string[]} values - Specifies the values of the fields to be matched against.
 * @property {string} type - Specifies the matching criteria between the fields and values.
 */
 
/**
 * @typedef {object} DocumentTableContentBlock
 * @property {string} type - The type of the block for the table cell. This determines which body block object (paragraph, list, video, image or table) would have a value.
 * @property {DocumentText} [text] - Text. It must contain a value if the type of the block is Text.
 * @property {DocumentBodyImage} [image] - Image. It must contain a value if the type of the block is Image.
 * @property {DocumentBodyVideo} [video] - Video. It must contain a value if the type of the block is Video.
 * @property {DocumentBodyParagraph} [paragraph] - Paragraph. It must contain a value if the type of the block is Paragraph.
 * @property {DocumentBodyList} [list] - List. It must contain a value if the type of the block is UnorderedList or OrderedList.
 * @property {DocumentBodyTable} [table] - Table. It must contain a value if the type of the block is Table.
 */
 
/**
 * @typedef {object} DocumentText
 * @property {string} text - Text.
 * @property {string[]} [marks] - The unique list of marks (whether it is bold and/or underlined etc.) for the text.
 * @property {string} [hyperlink] - The URL of the page OR an email OR the reference to the knowledge article that the hyperlink goes to. Possible URL value types are https://<url link> | mailto:<email> | grn:knowledge:::documentVariation/<knowledgeBaseId>/<documentId>/<variationId> | grn:knowledge:::document/<knowledgeBaseId>/<documentId> | grn:knowledge:::category/<knowledgeBaseId>/<categoryId> | grn:knowledge:::label/<knowledgeBaseId>/<labelId>
 * @property {DocumentTextProperties} [properties] - The properties for the text.
 */
 
/**
 * @typedef {object} DocumentTextProperties
 * @property {string} [fontSize] - The font size for the text. The valid values in 'em'.
 * @property {string} [textColor] - The text color for the text. The valid values in hex color code representation. For example black color - #000000
 * @property {string} [backgroundColor] - The background color for the text. The valid values in hex color code representation. For example black color - #000000
 */
 
/**
 * @typedef {object} DocumentVariationContext
 * @property {KnowledgeContextReference} context - The knowledge context associated with the variation.
 * @property {KnowledgeContextValueReference[]} values - The list of knowledge context values associated with the variation.
 */
 
/**
 * @typedef {object} DocumentVariationRequest
 * @property {string} [id] - The globally unique identifier for the variation.
 * @property {string} [dateCreated] - The creation date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - The last modification date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {AddressableEntityRef} [documentVersion] - The version of the document.
 * @property {DocumentVariationContext[]} contexts - The context values associated with the variation.
 * @property {KnowledgeDocumentReference} [document] - The reference to document to which the variation is associated.
 * @property {number} [priority] - The priority of the variation.
 * @property {string} [name] - The name of the variation.
 * @property {DocumentBodyRequest} [body] - The content for the variation.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} DocumentVariationResponse
 * @property {string} [id] - The globally unique identifier for the variation.
 * @property {string} [dateCreated] - The creation date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - The last modification date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {AddressableEntityRef} [documentVersion] - The version of the document.
 * @property {DocumentVariationContext[]} contexts - The context values associated with the variation.
 * @property {KnowledgeDocumentReference} [document] - The reference to document to which the variation is associated.
 * @property {number} [priority] - The priority of the variation.
 * @property {string} [name] - The name of the variation.
 * @property {DocumentBodyResponse} [body] - The content for the variation.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Entity
 * @property {string} [id] - The globally unique identifier for the object.
 */
 
/**
 * @typedef {object} EntityReference
 * @property {string} id - The globally unique identifier for the object.
 */
 
/**
 * @typedef {object} ImportError
 * @property {string} [message]
 * @property {number} [line]
 */
 
/**
 * @typedef {object} ImportReport
 * @property {ImportError[]} [errors]
 * @property {ResultCounters} [validated]
 * @property {ResultCounters} [imported]
 * @property {number} [totalDocuments]
 */
 
/**
 * @typedef {object} ImportStatusRequest
 * @property {string} status - New status for existing import operation
 */
 
/**
 * @typedef {object} KnowledgeBase
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [description] - Knowledge base description
 * @property {string} coreLanguage - Core language for knowledge base in which initial content must be created, language codes [en-US, en-UK, en-AU, de-DE] are supported currently. However, the new DX knowledge will support all these language codes, along with 'early preview' language codes [ca-ES, tr-TR, sv-SE, fi-FI, nb-NO, da-DK, ja-JP, ar-AE, zh-CN, zh-TW, zh-HK, ko-KR, pl-PL, hi-IN, th-TH, hu-HU, vi-VN, uk-UA] which might have a lower accuracy.
 * @property {string} [dateCreated] - Knowledge base creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Knowledge base last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [faqCount] - The count representing the number of documents of type FAQ in the KnowledgeBase
 * @property {string} [dateDocumentLastModified] - The date representing when the last document is modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [articleCount] - The count representing the number of documents of type Article in the KnowledgeBase
 * @property {boolean} [published] - Flag that indicates the knowledge base is published
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeBaseCreateRequest
 * @property {string} name - Knowledge base name
 * @property {string} [description] - Knowledge base description
 * @property {string} coreLanguage - Core language for knowledge base in which initial content must be created, language codes [en-US, en-UK, en-AU, de-DE] are supported currently. However, the new DX knowledge will support all these language codes, along with 'early preview' language codes [ca-ES, tr-TR, sv-SE, fi-FI, nb-NO, da-DK, ja-JP, ar-AE, zh-CN, zh-TW, zh-HK, ko-KR, pl-PL, hi-IN, th-TH, hu-HU, vi-VN, uk-UA] which might have a lower accuracy.
 */
 
/**
 * @typedef {object} KnowledgeBaseReference
 * @property {string} id - The globally unique identifier for the knowledge base.
 * @property {string} [languageCode] - Language of the knowledge base
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeBaseUpdateRequest
 * @property {string} [name] - Knowledge base name
 * @property {string} [description] - Knowledge base description
 */
 
/**
 * @typedef {object} KnowledgeCategoryRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - Category name
 * @property {string} [description] - Category description
 * @property {DocumentCategoryInput} [parent] - Category parent
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeContextReference
 * @property {string} id - The globally unique identifier for the knowledge context.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeContextValueReference
 * @property {string} id - The globally unique identifier for the knowledge context value.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeConversationContext
 * @property {string} conversationId - The unique identifier of the conversation.
 * @property {string} [mediaType] - The media type of the conversation.
 * @property {string} [queueId] - The unique identifier of the queue used to assign the interaction to the user.
 * @property {string} [externalContactId] - The external contact identifier of the end-user participant.
 */
 
/**
 * @typedef {object} KnowledgeDocumentAlternative
 * @property {string} phrase - Alternate phrasing to the document title, having a limit of 500 words.
 * @property {boolean} autocomplete - Autocomplete enabled for the alternate phrase.
 */
 
/**
 * @typedef {object} KnowledgeDocumentBulkRemoveRequest
 * @property {WritableEntity[]} entities - List of unique identifiers referencing documents that are to be deleted
 */
 
/**
 * @typedef {object} KnowledgeDocumentBulkRequest
 * @property {string} type - Document type according to assigned template
 * @property {string} [externalUrl] - External Url to the document
 * @property {DocumentFaq} [faq] - Faq document details
 * @property {DocumentCategoryInput[]} [categories] - Document categories
 * @property {DocumentArticle} [article] - Article details
 * @property {string} [id] - Identifier of document for update. Omit for create new Document.
 */
 
/**
 * @typedef {object} KnowledgeDocumentBulkUpdateEntity
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [categoryId] - The category associated with the document.
 * @property {string[]} [labelIds] - The ids of labels associated with the document.
 */
 
/**
 * @typedef {object} KnowledgeDocumentBulkUpdateRequest
 * @property {KnowledgeDocumentBulkUpdateEntity[]} entities - List of unique identifiers referencing documents that are to be updated
 */
 
/**
 * @typedef {object} KnowledgeDocumentBulkVersionAddEntity
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [restoreFromVersionId] - The globally unique identifier for the document version. If the value is provided, the document is restored to the given version.
 * @property {boolean} [restorePrevious] - Indicates if the document's previous version will be restored
 */
 
/**
 * @typedef {object} KnowledgeDocumentBulkVersionAddRequest
 * @property {KnowledgeDocumentBulkVersionAddEntity[]} entities - List of unique identifiers referencing documents that are to be versioned
 */
 
/**
 * @typedef {object} KnowledgeDocumentContentUpload
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} contentType - Type of Article Content.
 * @property {string} fileName - Name of the file to upload. It must not start with a dot and not end with a forward slash. Whitespace and the following characters are not allowed: \{^}%`]">[~<#|
 * @property {string} [status] - Status of the upload operation
 * @property {string} [uploadKey] - Key that identifies the file in the storage including the file name
 * @property {string} [url] - Presigned URL to PUT the file to
 * @property {object} [headers] - Required headers when uploading a file through PUT request to the URL
 * @property {AddressableEntityRef} [document] - ID of the document for which article content is to be uploaded
 * @property {string} [errorMessage] - Error message when upload fails
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeDocumentCopy
 * @property {string} documentVariationId - The variation of the document whose content was copied.
 * @property {string} documentVersionId - The version of the document whose content was copied.
 * @property {string} [searchId] - The search that surfaced the document whose content was copied.
 * @property {string} [queryType] - The type of the query that surfaced the document.
 * @property {string} [surfacingMethod] - The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.
 * @property {string} [sessionId] - Knowledge session ID.
 * @property {KnowledgeConversationContext} [conversationContext] - Conversation context information, if the document content is copied in the context of a conversation.
 * @property {KnowledgeSearchClientApplication} application - The client application in which the document content was copied.
 */
 
/**
 * @typedef {object} KnowledgeDocumentCreateRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} title - Document title.
 * @property {boolean} [visible] - Indicates if the knowledge document should be included in search results.
 * @property {KnowledgeDocumentAlternative[]} [alternatives] - List of alternate phrases related to the title which improves search results.
 * @property {string} [categoryId] - The category associated with the document.
 * @property {string[]} [labelIds] - The ids of labels associated with the document.
 * @property {string} [externalId] - The external id associated with the document.
 * @property {string} [externalUrl] - The URL to external document.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeDocumentFeedback
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {EntityReference} documentVariation - The variation of the document on which feedback was given.
 * @property {string} rating - Feedback rating.
 * @property {string} [reason] - Feedback reason.
 * @property {string} [comment] - Free-text comment of the feedback. Maximum length: 2000 characters.
 * @property {EntityReference} [search] - The search that surfaced the document on which feedback was given.
 * @property {string} [sessionId] - Knowledge guest session ID.
 * @property {string} [dateCreated] - The date and time of the feedback. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [queryType] - The type of the query that surfaced the document on which the feedback was given.
 * @property {string} [surfacingMethod] - The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.
 * @property {string} [state] - The state of the feedback.
 * @property {KnowledgeDocumentVersionReference} document - The document on which feedback was given.
 * @property {KnowledgeSearchClientApplication} application - The client application from which feedback was given.
 * @property {KnowledgeConversationContext} [conversationContext] - Conversation context information if the feedback is given in the context of a conversation.
 * @property {string} [userId] - The ID of the user who created the feedback.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeDocumentFeedbackUpdateRequest
 * @property {string} rating - Feedback rating.
 * @property {string} [reason] - Feedback reason
 * @property {string} [comment] - Feedback comment
 * @property {string} [state] - Feedback state
 */
 
/**
 * @typedef {object} KnowledgeDocumentGuestSearchRequest
 * @property {string} query - Query to search content in the knowledge base. Maximum of 30 records per query can be fetched.
 * @property {number} [pageSize] - Page size of the returned results.
 * @property {number} [pageNumber] - Page number of the returned results.
 * @property {string} [searchId] - The globally unique identifier for the search.
 * @property {number} [total] - The total number of documents matching the query.
 * @property {number} [pageCount] - Number of pages returned in the result calculated according to the pageSize and the total
 * @property {string} [queryType] - The type of the query that initiates the search.
 * @property {string} [sessionId] - Session ID of the search.
 * @property {number} [answerHighlightTopResults] - The number of articles to be sent for answer-highlighting. Can range from 1-5.
 * @property {boolean} [includeDraftDocuments] - Indicates whether the search results would also include draft documents.
 */
 
/**
 * @typedef {object} KnowledgeDocumentPresentation
 * @property {PresentedKnowledgeDocument[]} documents - The presented documents
 * @property {string} [searchId] - The search that surfaced the documents that were presented.
 * @property {string} [queryType] - The type of the query that surfaced the documents.
 * @property {string} [surfacingMethod] - The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.
 * @property {string} [sessionId] - Knowledge session ID.
 * @property {KnowledgeConversationContext} [conversationContext] - Conversation context information if the documents were presented in the context of a conversation.
 * @property {KnowledgeSearchClientApplication} application - The client application in which the documents were presented.
 */
 
/**
 * @typedef {object} KnowledgeDocumentQuery
 * @property {number} [pageSize] - Page size of the returned results.
 * @property {number} [pageNumber] - Page number of the returned results.
 * @property {boolean} [includeDraftDocuments] - Indicates whether the results would also include draft documents.
 * @property {DocumentQueryInterval} [interval] - Retrieves the documents created/modified/published in specified date and time range.
 * @property {DocumentQuery} filter - Filter for the document query.
 * @property {string} [includeVariations] - Indicates which document variations to include in returned documents. All: all variations regardless of the filter expression; AllMatching: all variations that match the filter expression; SingleMostRelevant: single variation that matches the filter expression and has the highest priority. The default is All.
 * @property {string} [sortOrder] - The sort order for results.
 * @property {string} [sortBy] - The field in the documents that you want to sort the results by.
 */
 
/**
 * @typedef {object} KnowledgeDocumentReference
 * @property {string} id - The globally unique identifier for the document.
 * @property {KnowledgeBaseReference} knowledgeBase - The knowledge base that the document belongs to.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeDocumentReq
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} title - Document title.
 * @property {boolean} [visible] - Indicates if the knowledge document should be included in search results.
 * @property {KnowledgeDocumentAlternative[]} [alternatives] - List of alternate phrases related to the title which improves search results.
 * @property {string} [categoryId] - The category associated with the document.
 * @property {string[]} [labelIds] - The ids of labels associated with the document.
 * @property {string} [externalId] - The external id associated with the document.
 * @property {string} [externalUrl] - The URL to external document.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeDocumentRequest
 * @property {string} type - Document type according to assigned template
 * @property {string} [externalUrl] - External Url to the document
 * @property {DocumentFaq} [faq] - Faq document details
 * @property {DocumentCategoryInput[]} [categories] - Document categories
 * @property {DocumentArticle} [article] - Article details
 */
 
/**
 * @typedef {object} KnowledgeDocumentResponse
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [title] - Document title, having a limit of 500 words.
 * @property {boolean} [visible] - Indicates if the knowledge document should be included in search results.
 * @property {KnowledgeDocumentAlternative[]} [alternatives] - List of alternate phrases related to the title which improves search results.
 * @property {string} [state] - State of the document.
 * @property {string} [dateCreated] - Document creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Document last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateImported] - Document import date-time, or null if was not imported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [lastPublishedVersionNumber] - The last published version number of the document.
 * @property {string} [datePublished] - The date on which the document was last published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {UserReference} [createdBy] - The user who created the document.
 * @property {UserReference} [modifiedBy] - The user who modified the document.
 * @property {AddressableEntityRef} [documentVersion] - The version of the document.
 * @property {CategoryResponse} [category] - The reference to category associated with the document.
 * @property {LabelResponse[]} [labels] - The references to labels associated with the document.
 * @property {KnowledgeBaseReference} [knowledgeBase] - Knowledge base to which the document belongs to.
 * @property {string} [externalId] - The reference to external id associated with the document.
 * @property {string} [externalUrl] - The URL to external document.
 * @property {AddressableEntityRef} [source] - The reference to source associated with the document.
 * @property {boolean} [readonly] - Whether the document is read-only.
 * @property {DocumentVariationResponse[]} [variations] - Variations of the document.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeDocumentsAnswerFilter
 * @property {string} [query] - The search query.
 * @property {string} [language] - The language of the documents.
 * @property {string} [appType] - The appType
 * @property {string} [queryType] - The query type
 * @property {string} [searchId] - The search id.
 * @property {boolean} [insertHighlightIntoVariationContent] - If specified - insert highlight data into the variation content.
 * @property {string[]} [answerMode] - Allows extracted answers from an article (AnswerHighlight) and/or AI-generated answers (AnswerGeneration). Default mode: AnswerHighlight
 * @property {string[]} variationIds - The variation Ids to answer.
 */
 
/**
 * @typedef {object} KnowledgeDocumentSearchRequest
 * @property {string} query - Query to search content in the knowledge base. Maximum of 30 records per query can be fetched.
 * @property {number} [pageSize] - Page size of the returned results.
 * @property {number} [pageNumber] - Page number of the returned results.
 * @property {string} [searchId] - The globally unique identifier for the search.
 * @property {number} [total] - The total number of documents matching the query.
 * @property {number} [pageCount] - Number of pages returned in the result calculated according to the pageSize and the total
 * @property {string} [queryType] - The type of the query that initiates the search.
 * @property {boolean} [includeDraftDocuments] - Indicates whether the search results would also include draft documents.
 * @property {DocumentQueryInterval} [interval] - Retrieves the documents created/modified/published in specified date and time range.
 * @property {DocumentQuery} [filter] - Filter for the document search.
 * @property {string} [sortOrder] - The sort order for search results.
 * @property {string} [sortBy] - The field in the documents that you want to sort the search results by.
 * @property {KnowledgeSearchClientApplication} [application] - The client application details from which search request was sent.
 * @property {KnowledgeConversationContext} [conversationContext] - Conversation context information if the search is initiated in the context of a conversation.
 * @property {number} [confidenceThreshold] - The confidence threshold for the search results. If applied, the returned results will have an equal or higher confidence than the threshold. The value should be between 0 to 1.
 * @property {number} [answerHighlightTopResults] - The number of articles to be sent for answer-highlighting. Can range from 1-5.
 * @property {string[]} [answerMode] - Allows extracted answers from an article (AnswerHighlight) and/or AI-generated answers (AnswerGeneration). Default mode: AnswerHighlight. Use this property with answerHighlightTopResults.
 */
 
/**
 * @typedef {object} KnowledgeDocumentSuggestionRequest
 * @property {string} query - Query to get autocomplete suggestions for the matching knowledge documents.
 * @property {number} [pageSize] - Page size of the returned results.
 * @property {boolean} [includeDraftDocuments] - Indicates whether the suggestion results would also include draft documents.
 * @property {DocumentQueryInterval} [interval] - Retrieves the documents created/modified/published in specified date and time range.
 * @property {DocumentQuery} [filter] - Filter for the document suggestions.
 */
 
/**
 * @typedef {object} KnowledgeDocumentVersion
 * @property {string} [id] - Globally unique identifier for the document version.
 * @property {string} [datePublished] - Published date of document version. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {KnowledgeDocumentResponse} [document] - The document which is versioned.
 * @property {string} restoreFromVersionId - The globally unique identifier for the document version. If the value is provided, the document is restored to the given version. If not, it publishes the draft changes as a new version of the document.
 * @property {number} [versionNumber] - Version Number of the document.
 * @property {string} [dateExpires] - Expiry date of document version, applicable only to the 'Archived' version of the document. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeDocumentVersionReference
 * @property {string} [id] - The globally unique identifier for the document.
 * @property {KnowledgeBaseReference} knowledgeBase - The knowledge base that the document belongs to.
 * @property {string} versionId - The globally unique identifier for the version of the document.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeDocumentView
 * @property {string} documentVariationId - The variation of the viewed document.
 * @property {string} documentVersionId - The version of the viewed document.
 * @property {string} [searchId] - The search that surfaced the viewed document.
 * @property {string} [queryType] - The type of the query that surfaced the document.
 * @property {string} [surfacingMethod] - The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.
 * @property {KnowledgeSearchClientApplication} application - The client application from which the document was viewed.
 * @property {string} [sessionId] - The unique identifier of the knowledge session in which the document was viewed.
 * @property {KnowledgeConversationContext} [conversationContext] - Conversation context information if the document was viewed in the context of a conversation.
 */
 
/**
 * @typedef {object} KnowledgeExportJobDocumentsFilter
 * @property {string} [interval] - Retrieves the documents modified in specified date and time range. Cannot be used together with entities filter. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 * @property {Entity[]} [entities] - Retrieves the documents with the given ids. Cannot be used together with internal filter.
 * @property {string} [sourceId]
 * @property {boolean} [includeDocumentsWithFileBody]
 */
 
/**
 * @typedef {object} KnowledgeExportJobFilter
 * @property {KnowledgeExportJobDocumentsFilter} [documentsFilter] - Filters for narrowing down which documents to export.
 * @property {string} versionFilter - Specifies what version should be exported.
 * @property {string[]} [exclude] - Reduce the size of the export file by excluding certain items.
 */
 
/**
 * @typedef {object} KnowledgeExportJobRequest
 * @property {KnowledgeExportJobFilter} exportFilter - What to export.
 * @property {string} fileType - File type of the document
 * @property {string} [sourceId] - Knowledge integration source id.
 * @property {number} [jsonFileVersion] - Requested version of the exported json file. Available versions are 2 and 3, default is 2
 */
 
/**
 * @typedef {object} KnowledgeGuestDocumentCopy
 * @property {string} documentVariationId - The variation of the document whose content was copied.
 * @property {string} documentVersionId - The version of the document whose content was copied.
 * @property {string} [searchId] - The search that surfaced the document whose content was copied.
 * @property {string} [queryType] - The type of the query that surfaced the document.
 * @property {string} [surfacingMethod] - The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.
 * @property {string} [sessionId] - Knowledge session ID.
 * @property {KnowledgeGuestSearchClientApplication} [application] - The client application in which the document content was copied.
 */
 
/**
 * @typedef {object} KnowledgeGuestDocumentFeedback
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {EntityReference} documentVariation - The variation of the document on which feedback was given.
 * @property {string} rating - Feedback rating.
 * @property {string} [reason] - Feedback reason.
 * @property {string} [comment] - Free-text comment of the feedback. Maximum length: 2000 characters.
 * @property {EntityReference} [search] - The search that surfaced the document on which feedback was given.
 * @property {string} [sessionId] - Knowledge guest session ID.
 * @property {string} [dateCreated] - The date and time of the feedback. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [queryType] - The type of the query that surfaced the document on which the feedback was given.
 * @property {string} [surfacingMethod] - The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.
 * @property {string} [state] - The state of the feedback.
 * @property {KnowledgeGuestDocumentVersionReference} document - The document on which feedback was given.
 * @property {KnowledgeGuestSearchClientApplication} [application] - The client application from which feedback was given.
 */
 
/**
 * @typedef {object} KnowledgeGuestDocumentPresentation
 * @property {PresentedKnowledgeDocument[]} documents - The presented documents
 * @property {string} [searchId] - The search that surfaced the documents that were presented.
 * @property {string} [queryType] - The type of the query that surfaced the documents.
 * @property {string} [surfacingMethod] - The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.
 * @property {string} [sessionId] - Knowledge session ID.
 * @property {KnowledgeGuestSearchClientApplication} [application] - The client application in which the documents were presented.
 */
 
/**
 * @typedef {object} KnowledgeGuestDocumentSuggestionRequest
 * @property {string} query - Query to get autocomplete suggestions for the matching knowledge documents.
 * @property {number} [pageSize] - Page size of the returned results.
 * @property {boolean} [includeDraftDocuments] - Indicates whether the suggestion results would also include draft documents.
 */
 
/**
 * @typedef {object} KnowledgeGuestDocumentVersionReference
 * @property {string} [id] - The globally unique identifier for the document.
 * @property {string} versionId - The globally unique identifier for the version of the document.
 */
 
/**
 * @typedef {object} KnowledgeGuestDocumentView
 * @property {string} documentVariationId - The variation of the viewed document.
 * @property {string} documentVersionId - The version of the viewed document.
 * @property {string} [searchId] - The search that surfaced the viewed document.
 * @property {string} [queryType] - The type of the query that surfaced the document.
 * @property {string} [surfacingMethod] - The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.
 */
 
/**
 * @typedef {object} KnowledgeGuestSearchClientApplication
 * @property {string} type - Application type.
 * @property {EntityReference} [deployment] - Application details when type is MessengerKnowledgeApp or SupportCenter.
 * @property {EntityReference} [botFlow] - Application details when type is BotFlow.
 * @property {EntityReference} [assistant] - Application details when type is Assistant.
 */
 
/**
 * @typedef {object} KnowledgeGuestSession
 * @property {string} [id] - Session ID.
 * @property {KnowledgeGuestSessionApp} app - The app where the session is started.
 * @property {string} customerId - An arbitrary ID for the customer starting the session. Used to track multiple sessions started by the same customer.
 * @property {string} [pageUrl] - URL of the page where the session is started.
 * @property {KnowledgeGuestSessionContext[]} [contexts] - The session contexts.
 * @property {string} [journeySessionId] - Journey session ID. Used to get the segments of the customer to filter search results.
 */
 
/**
 * @typedef {object} KnowledgeGuestSessionApp
 * @property {string} deploymentId - App deployment ID.
 * @property {string} type - App type.
 */
 
/**
 * @typedef {object} KnowledgeGuestSessionContext
 * @property {string} id - The context id associated with the session.
 * @property {Entity[]} values - The list of knowledge context values associated with the session.
 */
 
/**
 * @typedef {object} KnowledgeImport
 * @property {string} [id] - Id of the import operation
 * @property {string} [name] - Name of the import operation
 * @property {string} uploadKey - Upload key
 * @property {string} fileType - file type of the document
 * @property {boolean} [ignoreHeaders] - Ignore headers for the specified file
 * @property {string} [status] - Status of the operation
 * @property {ImportReport} [report] - Report of the import operation
 * @property {KnowledgeBase} [knowledgeBase] - Knowledge base which document import does belong to
 * @property {string} [languageCode] - Language code
 * @property {string} [dateCreated] - Created date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} KnowledgeImportJobRequest
 * @property {string} uploadKey - Upload key
 * @property {string} fileType - File type of the document
 * @property {KnowledgeImportJobSettings} [settings] - Additional optional settings
 * @property {boolean} [skipConfirmationStep] - If enabled pre-validation step will be skipped.
 */
 
/**
 * @typedef {object} KnowledgeImportJobSettings
 * @property {boolean} [importAsNew] - If enabled import creates a new document even if update is available.
 * @property {boolean} [visible] - If specified, import will override the visibility of the imported documents.
 * @property {string} [categoryId] - If specified, import will override the category of the imported documents.
 * @property {string[]} [labelIds] - If specified, import will add this labels to the imported documents.
 */
 
/**
 * @typedef {object} KnowledgeParseJobRequest
 * @property {string} uploadKey - Upload key
 * @property {string[]} [hints] - Hinted titles for the parser.
 */
 
/**
 * @typedef {object} KnowledgeParseJobRequestImport
 * @property {KnowledgeParseRecord[]} [edits] - Override of the result of the parse.
 * @property {string[]} [excludes] - Excluded results.
 */
 
/**
 * @typedef {object} KnowledgeParseJobRequestPatch
 * @property {string[]} [hints] - Hinted titles for the parser.
 */
 
/**
 * @typedef {object} KnowledgeParseRecord
 * @property {string} [id] - Unique id for the parsed data.
 * @property {string} [title] - Parsed article title.
 * @property {DocumentBody} [body] - Parsed article content.
 */
 
/**
 * @typedef {object} KnowledgeSearchClientApplication
 * @property {string} type - Application type.
 * @property {AddressableEntityRef} [deployment] - Application details when type is MessengerKnowledgeApp or SupportCenter.
 * @property {AddressableEntityRef} [botFlow] - Application details when type is BotFlow.
 * @property {AddressableEntityRef} [assistant] - Application details when type is Assistant.
 */
 
/**
 * @typedef {object} KnowledgeSearchRequest
 * @property {string} query - Input query to search content in the knowledge base
 * @property {number} [pageSize] - Page size of the returned results
 * @property {number} [pageNumber] - Page number of the returned results
 * @property {string} [documentType] - Document type to be used while searching
 * @property {string} languageCode - query search for specific languageCode
 * @property {boolean} [searchOnDraftDocuments] - If true the search query will be executed on draft documents, else it will be on active documents
 */
 
/**
 * @typedef {object} KnowledgeSyncJobRequest
 * @property {string} uploadKey - Upload key
 * @property {string} [sourceId] - Knowledge integration source id.
 */
 
/**
 * @typedef {object} KnowledgeSyncRequest
 */
 
/**
 * @typedef {object} LabelCreateRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the label.
 * @property {string} color - The color for the label.
 * @property {string} [externalId] - The external id associated with the label.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} LabelResponse
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name] - The name of the label.
 * @property {string} [color] - The color of the label.
 * @property {string} [dateCreated] - The creation date and time of the label. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - The last modification date and time of the label. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [documentCount] - Number of documents assigned to this label.
 * @property {string} [externalId] - The external id associated with the label.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} LabelUpdateRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name] - The name of the label.
 * @property {string} [color] - The color for the label.
 * @property {string} [externalId] - The external id associated with the label.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} PhraseAssociations
 * @property {string} phraseId - Id of the phrase to be linked
 * @property {string} documentId - Id of the document to be linked
 */
 
/**
 * @typedef {object} PresentedKnowledgeDocument
 * @property {string} documentId - The ID of the document.
 * @property {string} documentVariationId - The variation of the document.
 * @property {string} documentVersionId - The version of the document.
 * @property {string} [surfacingMethod] - The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.
 */
 
/**
 * @typedef {object} ResultCounters
 * @property {number} [success]
 * @property {number} [failure]
 */
 
/**
 * @typedef {object} SalesforceSettings
 * @property {string} [channel] - Filter source by channel.
 * @property {string} [language] - Filter source by language.
 * @property {string[]} [categories] - Filter source by categories.
 * @property {string} [baseUrl] - The base URL to resources.
 */
 
/**
 * @typedef {object} SalesforceSourceRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the integration source.
 * @property {string} [integrationId] - The integration associated with the source.
 * @property {number} [schedulePeriod] - The schedule period of the source in hours. Must be at least 6 and at most 48 hours.
 * @property {SalesforceSettings} [settings] - The settings of the source.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} SearchUpdateRequest
 * @property {string} [sessionId] - The unique identifier of this session
 * @property {boolean} answered - Mark the search as answered/unanswered
 * @property {SelectedAnswer} [selectedAnswer] - The selected search result chosen as the answer.
 */
 
/**
 * @typedef {object} SelectedAnswer
 * @property {AddressableEntityRef} document - The search result document chosen as the answer.
 */
 
/**
 * @typedef {object} ServiceNowSettings
 * @property {string[]} [knowledgeBaseIds] - Filter source by knowledge base ids.
 * @property {string} [language] - Filter source by language.
 * @property {string[]} [categories] - Filter source by categories.
 * @property {string} [baseUrl] - The base URL to resources.
 */
 
/**
 * @typedef {object} ServiceNowSourceRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the integration source.
 * @property {string} [integrationId] - The integration associated with the source.
 * @property {number} [schedulePeriod] - The schedule period of the source in hours. Must be at least 6 and at most 48 hours.
 * @property {ServiceNowSettings} [settings] - The settings of the source.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} SyncStatusRequest
 * @property {string} status - New status for an existing sync operation
 */
 
/**
 * @typedef {object} UnansweredPhraseGroupPatchRequestBody
 * @property {PhraseAssociations[]} phraseAssociations - List of phrases and documents to be linked
 * @property {string} [dateStart] - The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [dateEnd] - The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} UploadUrlRequest
 * @property {string} [fileName] - Name of the file to upload. It must not start with a dot and not end with a forward slash. Whitespace and the following characters are not allowed: \{^}%`]">[~<#|
 * @property {string} [contentMd5] - Content MD5 of the file to upload
 * @property {number} [signedUrlTimeoutSeconds] - The number of seconds the presigned URL is valid for (from 1 to 604800 seconds). If none provided, defaults to 600 seconds
 * @property {string} [contentType] - The content type of the file to upload. Allows all MIME types
 * @property {string} [serverSideEncryption]
 */
 
/**
 * @typedef {object} UserReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WritableEntity
 * @property {string} [id] - The globally unique identifier for the object.
 */
 

/**
 * Knowledge - Knowledge administration and search
 * @class Knowledge
 */
class KnowledgeAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the Knowledge class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Get categories
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.parentId] -  If specified, retrieves the children categories by parent category ID.
	 * @param {boolean} [query.isRoot] -  If specified, retrieves only the root categories.
	 * @param {string} [query.name] -  Filter to return the categories that starts with the given category name.
	 * @param {string} [query.sortBy] -  Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically
	 * @param {string} [query.expand] -  The specified entity attribute will be filled. Supported value:"Ancestors": every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors.
	 * @param {boolean} [query.includeDocumentCount] -  If specified, retrieves the number of documents related to category.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseCategories(knowledgeBaseId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("parentId" in query && this.#checkJSONSchemaType(query["parentId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "parentId", "string");
			}
			if ("isRoot" in query && this.#checkJSONSchemaType(query["isRoot"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "isRoot", "boolean");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
			if ("includeDocumentCount" in query && this.#checkJSONSchemaType(query["includeDocumentCount"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeDocumentCount", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create new category
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {CategoryCreateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseCategories(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get category
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} categoryId - Category ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeKnowledgebaseCategory(knowledgeBaseId, categoryId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(categoryId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "categoryId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.categoryId = categoryId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete category
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} categoryId - Category ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebaseCategory(knowledgeBaseId, categoryId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(categoryId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "categoryId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.categoryId = categoryId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update category
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} categoryId - Category ID
	 * @param {CategoryUpdateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseCategory(knowledgeBaseId, categoryId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/categories/{categoryId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(categoryId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "categoryId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.categoryId = categoryId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Search Documents
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeSearchRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postKnowledgeKnowledgebaseSearch(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/search";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get categories
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.limit] -  Number of entities to return. Maximum of 200. Deprecated in favour of pageSize
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.name] -  Filter to return the categories that starts with the given category name.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @deprecated
	 */
	getKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create new category
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {KnowledgeCategoryRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postKnowledgeKnowledgebaseLanguageCategories(knowledgeBaseId, languageCode, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get category
	 * @async
	 * @param {string} categoryId - Category ID
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(categoryId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "categoryId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.categoryId = categoryId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete category
	 * @async
	 * @param {string} categoryId - Category ID
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	deleteKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(categoryId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "categoryId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.categoryId = categoryId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update category
	 * @async
	 * @param {string} categoryId - Category ID
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {KnowledgeCategoryRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	patchKnowledgeKnowledgebaseLanguageCategory(categoryId, knowledgeBaseId, languageCode, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/categories/{categoryId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(categoryId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "categoryId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.categoryId = categoryId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get document content upload status
	 * @async
	 * @param {string} documentId - Document ID
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {string} uploadId - UploadId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}/uploads/{uploadId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getKnowledgeKnowledgebaseLanguageDocumentUpload(documentId, knowledgeBaseId, languageCode, uploadId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}/uploads/{uploadId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		if (this.#checkJSONSchemaType(uploadId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "uploadId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.pathParameters.uploadId = uploadId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Upload Article Content
	 * @async
	 * @param {string} documentId - Document ID
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {KnowledgeDocumentContentUpload} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}/uploads" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postKnowledgeKnowledgebaseLanguageDocumentUploads(documentId, knowledgeBaseId, languageCode, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}/uploads";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get import operation report
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {string} importId - Import ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		if (this.#checkJSONSchemaType(importId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.pathParameters.importId = importId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete import operation
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {string} importId - Import ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	deleteKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		if (this.#checkJSONSchemaType(importId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.pathParameters.importId = importId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Start import operation
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {string} importId - Import ID
	 * @param {ImportStatusRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	patchKnowledgeKnowledgebaseLanguageDocumentsImport(knowledgeBaseId, languageCode, importId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports/{importId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		if (this.#checkJSONSchemaType(importId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.pathParameters.importId = importId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create import operation
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {KnowledgeImport} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postKnowledgeKnowledgebaseLanguageDocumentsImports(knowledgeBaseId, languageCode, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/imports";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get document
	 * @async
	 * @param {string} documentId - Document ID
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete document
	 * @async
	 * @param {string} documentId - Document ID
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	deleteKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update document
	 * @async
	 * @param {string} documentId - Document ID
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {KnowledgeDocumentRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	patchKnowledgeKnowledgebaseLanguageDocument(documentId, knowledgeBaseId, languageCode, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents/{documentId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get documents
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.limit] -  Number of entities to return. Maximum of 200. Deprecated in favour of pageSize
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.categories] -  Filter by categories ids, comma separated values expected.
	 * @param {string} [query.title] -  Filter by document title.
	 * @param {string} [query.sortBy] -  Sort by.
	 * @param {string} [query.sortOrder] -  Sort Order.
	 * @param {string[]} [query.documentIds] -  Comma-separated list of document identifiers to fetch by.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @deprecated
	 */
	getKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("categories" in query && this.#checkJSONSchemaType(query["categories"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "categories", "string");
			}
			if ("title" in query && this.#checkJSONSchemaType(query["title"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "title", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("documentIds" in query && this.#checkJSONSchemaType(query["documentIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentIds", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create document
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {KnowledgeDocumentRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update documents collection
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {KnowledgeDocumentBulkRequest[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	patchKnowledgeKnowledgebaseLanguageDocuments(knowledgeBaseId, languageCode, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/documents";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get sync options available for a knowledge-connect integration
	 * @async
	 * @param {string} integrationId - Integration ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.knowledgeBaseIds] -  Narrowing down filtering option results by knowledge base.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/integrations/{integrationId}/options" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeIntegrationOptions(integrationId, query) {
		const endpointPath = "/api/v2/knowledge/integrations/{integrationId}/options";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(integrationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "integrationId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("knowledgeBaseIds" in query && this.#checkJSONSchemaType(query["knowledgeBaseIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseIds", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.integrationId = integrationId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get knowledge base
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeKnowledgebase(knowledgeBaseId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete knowledge base
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebase(knowledgeBaseId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update knowledge base
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeBaseUpdateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebase(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get knowledge bases
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.limit] -  Number of entities to return. Maximum of 100. Deprecated in favour of pageSize
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 100.
	 * @param {string} [query.name] -  Filter by Name.
	 * @param {string} [query.coreLanguage] -  Filter by core language.
	 * @param {boolean} [query.published] -  Filter by published status.
	 * @param {string} [query.sortBy] -  Sort by.
	 * @param {string} [query.sortOrder] -  Sort Order.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebases(query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("coreLanguage" in query && this.#checkJSONSchemaType(query["coreLanguage"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "coreLanguage", "string");
			}
			if ("published" in query && this.#checkJSONSchemaType(query["published"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "published", "boolean");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create new knowledge base
	 * @async
	 * @param {KnowledgeBaseCreateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebases(body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get knowledge base unanswered groups
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.app] -  The app value to be used for filtering phrases.
	 * @param {string} [query.dateStart] -  The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} [query.dateEnd] -  The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseUnansweredGroups(knowledgeBaseId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("app" in query && this.#checkJSONSchemaType(query["app"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "app", "string");
			}
			if ("dateStart" in query && this.#checkJSONSchemaType(query["dateStart"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dateStart", "string");
			}
			if ("dateEnd" in query && this.#checkJSONSchemaType(query["dateEnd"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dateEnd", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get knowledge base unanswered group for a particular groupId
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} groupId - The ID of the group to be retrieved.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.app] -  The app value to be used for filtering phrases.
	 * @param {string} [query.dateStart] -  The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} [query.dateEnd] -  The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseUnansweredGroup(knowledgeBaseId, groupId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("app" in query && this.#checkJSONSchemaType(query["app"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "app", "string");
			}
			if ("dateStart" in query && this.#checkJSONSchemaType(query["dateStart"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dateStart", "string");
			}
			if ("dateEnd" in query && this.#checkJSONSchemaType(query["dateEnd"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dateEnd", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get knowledge base unanswered phrase group for a particular phraseGroupId
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} groupId - The ID of the group to be retrieved.
	 * @param {string} phraseGroupId - The ID of the phraseGroup to be retrieved.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.app] -  The app value to be used for filtering phrases.
	 * @param {string} [query.dateStart] -  The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} [query.dateEnd] -  The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseUnansweredGroupPhrasegroup(knowledgeBaseId, groupId, phraseGroupId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		if (this.#checkJSONSchemaType(phraseGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "phraseGroupId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("app" in query && this.#checkJSONSchemaType(query["app"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "app", "string");
			}
			if ("dateStart" in query && this.#checkJSONSchemaType(query["dateStart"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dateStart", "string");
			}
			if ("dateEnd" in query && this.#checkJSONSchemaType(query["dateEnd"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dateEnd", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.pathParameters.phraseGroupId = phraseGroupId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a Knowledge base unanswered phrase group
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} groupId - The ID of the group to be updated.
	 * @param {string} phraseGroupId - The ID of the phraseGroup to be updated.
	 * @param {UnansweredPhraseGroupPatchRequestBody} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseUnansweredGroupPhrasegroup(knowledgeBaseId, groupId, phraseGroupId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/unanswered/groups/{groupId}/phrasegroups/{phraseGroupId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		if (this.#checkJSONSchemaType(phraseGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "phraseGroupId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.pathParameters.phraseGroupId = phraseGroupId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get label
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} labelId - Label ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeKnowledgebaseLabel(knowledgeBaseId, labelId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(labelId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "labelId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.labelId = labelId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete label
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} labelId - Label ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebaseLabel(knowledgeBaseId, labelId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(labelId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "labelId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.labelId = labelId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update label
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} labelId - Label ID
	 * @param {LabelUpdateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseLabel(knowledgeBaseId, labelId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels/{labelId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(labelId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "labelId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.labelId = labelId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get labels
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.name] -  Filter to return the labels that contains the given phrase in the name.
	 * @param {boolean} [query.includeDocumentCount] -  If specified, retrieves the number of documents related to label.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseLabels(knowledgeBaseId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("includeDocumentCount" in query && this.#checkJSONSchemaType(query["includeDocumentCount"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeDocumentCount", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create new label
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {LabelCreateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseLabels(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/labels";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Knowledge integration sources
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.type] -  If specified, retrieves integration sources with specified integration type.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected.
	 * @param {string[]} [query.ids] -  If specified, retrieves integration sources with specified IDs.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseSources(knowledgeBaseId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("type" in query && this.#checkJSONSchemaType(query["type"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "type", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("ids" in query && this.#checkJSONSchemaType(query["ids"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ids", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Salesforce Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} sourceId - Source ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce/{sourceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseSourcesSalesforceSourceId(knowledgeBaseId, sourceId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce/{sourceId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(sourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sourceId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.sourceId = sourceId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update Salesforce Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} sourceId - Source ID
	 * @param {SalesforceSourceRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce/{sourceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putKnowledgeKnowledgebaseSourcesSalesforceSourceId(knowledgeBaseId, sourceId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce/{sourceId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(sourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sourceId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.sourceId = sourceId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Salesforce Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} sourceId - Source ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce/{sourceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebaseSourcesSalesforceSourceId(knowledgeBaseId, sourceId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce/{sourceId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(sourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sourceId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.sourceId = sourceId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Start sync on Salesforce Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} sourceId - Source ID
	 * @param {KnowledgeSyncRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce/{sourceId}/sync" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseSourcesSalesforceSourceIdSync(knowledgeBaseId, sourceId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce/{sourceId}/sync";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(sourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sourceId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.sourceId = sourceId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create Salesforce Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {SalesforceSourceRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseSourcesSalesforce(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/salesforce";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get ServiceNow Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} sourceId - Source ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow/{sourceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseSourcesServicenowSourceId(knowledgeBaseId, sourceId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow/{sourceId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(sourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sourceId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.sourceId = sourceId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update ServiceNow Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} sourceId - Source ID
	 * @param {ServiceNowSourceRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow/{sourceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putKnowledgeKnowledgebaseSourcesServicenowSourceId(knowledgeBaseId, sourceId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow/{sourceId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(sourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sourceId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.sourceId = sourceId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete ServiceNow Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} sourceId - Source ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow/{sourceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebaseSourcesServicenowSourceId(knowledgeBaseId, sourceId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow/{sourceId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(sourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sourceId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.sourceId = sourceId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Start synchronization on ServiceNow Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} sourceId - Source ID
	 * @param {KnowledgeSyncRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow/{sourceId}/sync" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseSourcesServicenowSourceIdSync(knowledgeBaseId, sourceId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow/{sourceId}/sync";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(sourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sourceId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.sourceId = sourceId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create ServiceNow Knowledge integration source
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {ServiceNowSourceRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseSourcesServicenow(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/sources/servicenow";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get training detail
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {string} trainingId - Training ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getKnowledgeKnowledgebaseLanguageTraining(knowledgeBaseId, languageCode, trainingId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		if (this.#checkJSONSchemaType(trainingId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "trainingId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.pathParameters.trainingId = trainingId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Promote trained documents from draft state to active.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {string} trainingId - Training ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	postKnowledgeKnowledgebaseLanguageTrainingPromote(knowledgeBaseId, languageCode, trainingId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings/{trainingId}/promote";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		if (this.#checkJSONSchemaType(trainingId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "trainingId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.pathParameters.trainingId = trainingId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all trainings information for a knowledgebase
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.limit] -  Number of entities to return. Maximum of 200. Deprecated in favour of pageSize
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.knowledgeDocumentsState] -  Return the training with the specified state of the trained documents.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @deprecated
	 */
	getKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("knowledgeDocumentsState" in query && this.#checkJSONSchemaType(query["knowledgeDocumentsState"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeDocumentsState", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Trigger training
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} languageCode - Language code, format: iso2-LOCALE
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	postKnowledgeKnowledgebaseLanguageTrainings(knowledgeBaseId, languageCode) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/languages/{languageCode}/trainings";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(languageCode, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "languageCode", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.languageCode = languageCode;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get content upload from URL job status
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} jobId - Upload job ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/uploads/urls/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeKnowledgebaseUploadsUrlsJob(knowledgeBaseId, jobId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/uploads/urls/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create content upload from URL job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {CreateUploadSourceUrlJobRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/uploads/urls/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseUploadsUrlsJobs(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/uploads/urls/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates a presigned URL for uploading a knowledge import file with a set of documents
	 * @async
	 * @param {UploadUrlRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/documentuploads" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeDocumentuploads(body) {
		const endpointPath = "/api/v2/knowledge/documentuploads";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Answer documents.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeDocumentsAnswerFilter} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/answers" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentsAnswers(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/answers";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get document.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {string} documentId - Document ID.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected. Max No. of variations that can be returned on expand is 20.
	 * @param {string} [query.state] -  "when state is "Draft", draft version of the document is returned,otherwise by default published version is returned in the response.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocument(knowledgeBaseId, documentId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("state" in query && this.#checkJSONSchemaType(query["state"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "state", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete document.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {string} documentId - Document ID.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebaseDocument(knowledgeBaseId, documentId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update document.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {string} documentId - Document ID.
	 * @param {KnowledgeDocumentReq} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseDocument(knowledgeBaseId, documentId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get document version.
	 * @async
	 * @param {string} knowledgeBaseId - Globally unique identifier for the knowledge base.
	 * @param {string} documentId - Globally unique identifier for the document.
	 * @param {string} versionId - Globally unique identifier for the document version.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocumentVersion(knowledgeBaseId, documentId, versionId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.versionId = versionId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get document versions.
	 * @async
	 * @param {string} knowledgeBaseId - Globally unique identifier for the knowledge base.
	 * @param {string} documentId - Globally unique identifier for the document.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocumentVersions(knowledgeBaseId, documentId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates or restores a document version.
	 * @async
	 * @param {string} knowledgeBaseId - Globally unique identifier for the knowledge base.
	 * @param {string} documentId - Globally unique identifier for the document.
	 * @param {KnowledgeDocumentVersion} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentVersions(knowledgeBaseId, documentId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get documents.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.interval] -  Retrieves the documents modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ
	 * @param {string[]} [query.documentId] -  Retrieves the specified documents, comma separated values expected.
	 * @param {string[]} [query.categoryId] -  If specified, retrieves documents associated with category ids, comma separated values expected.
	 * @param {boolean} [query.includeSubcategories] -  Works along with 'categoryId' query parameter. If specified, retrieves documents associated with category ids and its children categories.
	 * @param {boolean} [query.includeDrafts] -  If includeDrafts is true, Documents in the draft state are also returned in the response.
	 * @param {string[]} [query.labelIds] -  If specified, retrieves documents associated with label ids, comma separated values expected.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected.
	 * @param {string[]} [query.externalIds] -  If specified, retrieves documents associated with external ids, comma separated values expected.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocuments(knowledgeBaseId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("interval" in query && this.#checkJSONSchemaType(query["interval"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "interval", "string");
			}
			if ("documentId" in query && this.#checkJSONSchemaType(query["documentId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "array");
			}
			if ("categoryId" in query && this.#checkJSONSchemaType(query["categoryId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "categoryId", "array");
			}
			if ("includeSubcategories" in query && this.#checkJSONSchemaType(query["includeSubcategories"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeSubcategories", "boolean");
			}
			if ("includeDrafts" in query && this.#checkJSONSchemaType(query["includeDrafts"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeDrafts", "boolean");
			}
			if ("labelIds" in query && this.#checkJSONSchemaType(query["labelIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "labelIds", "array");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("externalIds" in query && this.#checkJSONSchemaType(query["externalIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalIds", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create document.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeDocumentCreateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocuments(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk remove documents.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeDocumentBulkRemoveRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/bulk/remove" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentsBulkRemove(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/bulk/remove";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk update documents.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeDocumentBulkUpdateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/bulk/update" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentsBulkUpdate(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/bulk/update";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk add document versions.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeDocumentBulkVersionAddRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/versions/bulk/add" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentsVersionsBulkAdd(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/versions/bulk/add";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a variation for a document.
	 * @async
	 * @param {string} documentVariationId - Globally unique identifier for a document variation.
	 * @param {string} documentId - Globally unique identifier for a document.
	 * @param {string} knowledgeBaseId - Globally unique identifier for a knowledge base.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.documentState] -  The state of the document.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocumentVariation(documentVariationId, documentId, knowledgeBaseId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(documentVariationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentVariationId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("documentState" in query && this.#checkJSONSchemaType(query["documentState"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentState", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.documentVariationId = documentVariationId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a variation for a document.
	 * @async
	 * @param {string} documentVariationId - Globally unique identifier for a document variation.
	 * @param {string} documentId - Globally unique identifier for a document.
	 * @param {string} knowledgeBaseId - Globally unique identifier for a knowledge base.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebaseDocumentVariation(documentVariationId, documentId, knowledgeBaseId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(documentVariationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentVariationId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.documentVariationId = documentVariationId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a variation for a document.
	 * @async
	 * @param {string} documentVariationId - Globally unique identifier for a document variation.
	 * @param {string} documentId - Globally unique identifier for a document.
	 * @param {string} knowledgeBaseId - Globally unique identifier for a knowledge base.
	 * @param {DocumentVariationRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseDocumentVariation(documentVariationId, documentId, knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations/{documentVariationId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(documentVariationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentVariationId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.documentVariationId = documentVariationId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get variations for a document.
	 * @async
	 * @param {string} knowledgeBaseId - Globally unique identifier for the knowledge base.
	 * @param {string} documentId - Globally unique identifier for the document.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.documentState] -  The state of the document.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocumentVariations(knowledgeBaseId, documentId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("documentState" in query && this.#checkJSONSchemaType(query["documentState"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentState", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a variation for a document.
	 * @async
	 * @param {string} knowledgeBaseId - Globally unique identifier for the knowledge base.
	 * @param {string} documentId - Globally unique identifier for the document.
	 * @param {DocumentVariationRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentVariations(knowledgeBaseId, documentId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/variations";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get variation for the given document version.
	 * @async
	 * @param {string} knowledgeBaseId - Globally unique identifier for the knowledge base.
	 * @param {string} documentId - Globally unique identifier for the document.
	 * @param {string} versionId - Globally unique identifier for the document version.
	 * @param {string} variationId - Globally unique identifier for the document version variation.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}/variations/{variationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocumentVersionVariation(knowledgeBaseId, documentId, versionId, variationId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}/variations/{variationId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		if (this.#checkJSONSchemaType(variationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "variationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.versionId = versionId;
		apiCallOptions.pathParameters.variationId = variationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get variations for the given document version.
	 * @async
	 * @param {string} knowledgeBaseId - Globally unique identifier for the knowledge base.
	 * @param {string} documentId - Globally unique identifier for the document.
	 * @param {string} versionId - Globally unique identifier for the document version.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}/variations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocumentVersionVariations(knowledgeBaseId, documentId, versionId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/versions/{versionId}/variations";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.versionId = versionId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Indicate that the document was copied by the user.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {string} documentId - Document ID.
	 * @param {KnowledgeDocumentCopy} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/copies" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentCopies(knowledgeBaseId, documentId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/copies";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Indicate that documents were presented to the user.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {KnowledgeDocumentPresentation} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/presentations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentsPresentations(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/presentations";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a single feedback record given on a document
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {string} documentId - Document ID.
	 * @param {string} feedbackId - Feedback ID.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback/{feedbackId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocumentFeedbackFeedbackId(knowledgeBaseId, documentId, feedbackId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback/{feedbackId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(feedbackId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "feedbackId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.feedbackId = feedbackId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update feedback on a document
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {string} documentId - Document ID.
	 * @param {string} feedbackId - Feedback ID.
	 * @param {KnowledgeDocumentFeedbackUpdateRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback/{feedbackId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseDocumentFeedbackFeedbackId(knowledgeBaseId, documentId, feedbackId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback/{feedbackId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		if (this.#checkJSONSchemaType(feedbackId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "feedbackId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.pathParameters.feedbackId = feedbackId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of feedback records given on a document
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {string} documentId - Document ID.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {boolean} [query.onlyCommented] -  If true, only feedback records that have comment are returned. If false, feedback records with and without comment are returned. Default: false.
	 * @param {string} [query.documentVersionId] -  Document version ID to filter by. Supported only if onlyCommented=true is set.
	 * @param {string} [query.documentVariationId] -  Document variation ID to filter by. Supported only if onlyCommented=true is set.
	 * @param {string} [query.appType] -  Application type to filter by. Supported only if onlyCommented=true is set.
	 * @param {string} [query.queryType] -  Query type to filter by. Supported only if onlyCommented=true is set.
	 * @param {string} [query.userId] -  The ID of the user, who created the feedback, to filter by. Supported only if onlyCommented=true is set.
	 * @param {string} [query.queueId] -  Queue ID to filter by. Supported only if onlyCommented=true is set.
	 * @param {string} [query.state] -  State to filter by. Supported only if onlyCommented=true is set. Default: Final
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseDocumentFeedback(knowledgeBaseId, documentId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("onlyCommented" in query && this.#checkJSONSchemaType(query["onlyCommented"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "onlyCommented", "boolean");
			}
			if ("documentVersionId" in query && this.#checkJSONSchemaType(query["documentVersionId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentVersionId", "string");
			}
			if ("documentVariationId" in query && this.#checkJSONSchemaType(query["documentVariationId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentVariationId", "string");
			}
			if ("appType" in query && this.#checkJSONSchemaType(query["appType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appType", "string");
			}
			if ("queryType" in query && this.#checkJSONSchemaType(query["queryType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queryType", "string");
			}
			if ("userId" in query && this.#checkJSONSchemaType(query["userId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
			}
			if ("queueId" in query && this.#checkJSONSchemaType(query["queueId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queueId", "string");
			}
			if ("state" in query && this.#checkJSONSchemaType(query["state"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "state", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Give feedback on a document
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {string} documentId - Document ID.
	 * @param {KnowledgeDocumentFeedback} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentFeedback(knowledgeBaseId, documentId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/feedback";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for knowledge documents.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge Base ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Fields, if any, to expand for each document in the search result matching the query.
	 * @param {KnowledgeDocumentQuery} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentsQuery(knowledgeBaseId, query, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get export job report
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} exportJobId - Export job ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs/{exportJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeKnowledgebaseExportJob(knowledgeBaseId, exportJobId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs/{exportJobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(exportJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "exportJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.exportJobId = exportJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete export job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} exportJobId - Export job ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs/{exportJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebaseExportJob(knowledgeBaseId, exportJobId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs/{exportJobId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(exportJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "exportJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.exportJobId = exportJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create export job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeExportJobRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseExportJobs(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/export/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get import job report
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} importJobId - Import job ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  If expand contains 'urls' downloadURL and failedEntitiesURL will be filled.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseImportJob(knowledgeBaseId, importJobId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(importJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importJobId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.importJobId = importJobId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete import job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} importJobId - Import job ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebaseImportJob(knowledgeBaseId, importJobId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(importJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.importJobId = importJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Start import job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} importJobId - Import job ID
	 * @param {ImportStatusRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseImportJob(knowledgeBaseId, importJobId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs/{importJobId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(importJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importJobId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.importJobId = importJobId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create import job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeImportJobRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseImportJobs(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/import/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get synchronization job report
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} syncJobId - Synchronization job ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/synchronize/jobs/{syncJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeKnowledgebaseSynchronizeJob(knowledgeBaseId, syncJobId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/synchronize/jobs/{syncJobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(syncJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "syncJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.syncJobId = syncJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete synchronization job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} syncJobId - Synchronization job ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/synchronize/jobs/{syncJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteKnowledgeKnowledgebaseSynchronizeJob(knowledgeBaseId, syncJobId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/synchronize/jobs/{syncJobId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(syncJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "syncJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.syncJobId = syncJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update synchronization job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} syncJobId - Synchronization job ID
	 * @param {SyncStatusRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/synchronize/jobs/{syncJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseSynchronizeJob(knowledgeBaseId, syncJobId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/synchronize/jobs/{syncJobId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(syncJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "syncJobId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.syncJobId = syncJobId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create synchronization job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeSyncJobRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/synchronize/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseSynchronizeJobs(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/synchronize/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get operations
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string[]} [query.userId] -  If specified, retrieves operations associated with user ids, comma separated values expected.
	 * @param {string[]} [query.type] -  If specified, retrieves operations with specified operation type, comma separated values expected.
	 * @param {string[]} [query.status] -  If specified, retrieves operations with specified operation status, comma separated values expected.
	 * @param {string} [query.interval] -  Retrieves the operations modified in specified date and time range. If the after and before cursor parameters are within this interval, it would return valid data, otherwise it throws an error.The dates in the interval are represented in ISO-8601 format: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ
	 * @param {string[]} [query.sourceId] -  If specified, retrieves operations associated with source ids, comma separated values expected.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/operations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseOperations(knowledgeBaseId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/operations";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("userId" in query && this.#checkJSONSchemaType(query["userId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "array");
			}
			if ("type" in query && this.#checkJSONSchemaType(query["type"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "type", "array");
			}
			if ("status" in query && this.#checkJSONSchemaType(query["status"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "status", "array");
			}
			if ("interval" in query && this.#checkJSONSchemaType(query["interval"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "interval", "string");
			}
			if ("sourceId" in query && this.#checkJSONSchemaType(query["sourceId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sourceId", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get ids of operation creator users and oauth clients
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/operations/users/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeKnowledgebaseOperationsUsersQuery(knowledgeBaseId) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/operations/users/query";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get parse job report
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} parseJobId - Parse job ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  If expand contains 'urls' downloadURL and failedEntitiesURL will be filled.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeKnowledgebaseParseJob(knowledgeBaseId, parseJobId, query) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(parseJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "parseJobId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.parseJobId = parseJobId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Send update to the parse operation
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} parseJobId - Parse job ID
	 * @param {KnowledgeParseJobRequestPatch} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseParseJob(knowledgeBaseId, parseJobId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(parseJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "parseJobId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.parseJobId = parseJobId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Import the parsed articles
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {string} parseJobId - Parse job ID
	 * @param {KnowledgeParseJobRequestImport} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}/import" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseParseJobImport(knowledgeBaseId, parseJobId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs/{parseJobId}/import";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(parseJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "parseJobId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.parseJobId = parseJobId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create parse job
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID
	 * @param {KnowledgeParseJobRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseParseJobs(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/parse/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update search result.
	 * @async
	 * @param {string} knowledgeBaseId - The ID of knowledge base containing the documents to query.
	 * @param {string} searchId - Search Result ID
	 * @param {SearchUpdateRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search/{searchId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeKnowledgebaseDocumentsSearchSearchId(knowledgeBaseId, searchId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search/{searchId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(searchId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "searchId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.searchId = searchId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the knowledge documents to provide suggestions for auto completion.
	 * @async
	 * @param {string} knowledgeBaseId - The ID of knowledge base containing the documents to query.
	 * @param {KnowledgeDocumentSuggestionRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search/suggestions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentsSearchSuggestions(knowledgeBaseId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search/suggestions";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Search the documents in a knowledge base.
	 * @async
	 * @param {string} knowledgeBaseId - The ID of knowledge base containing the documents to query.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Fields, if any, to expand for each document in the search result matching the query.
	 * @param {KnowledgeDocumentSearchRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentsSearch(knowledgeBaseId, query, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/search";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create view for a document.
	 * @async
	 * @param {string} knowledgeBaseId - Knowledge base ID.
	 * @param {string} documentId - Document ID.
	 * @param {KnowledgeDocumentView} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/views" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeKnowledgebaseDocumentViews(knowledgeBaseId, documentId, body) {
		const endpointPath = "/api/v2/knowledge/knowledgebases/{knowledgeBaseId}/documents/{documentId}/views";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(knowledgeBaseId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "knowledgeBaseId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.knowledgeBaseId = knowledgeBaseId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Answer documents.
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {KnowledgeDocumentsAnswerFilter} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents/answers" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeGuestSessionDocumentsAnswers(sessionId, body) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/answers";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Give feedback on a document
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {string} documentId - Document ID.
	 * @param {KnowledgeGuestDocumentFeedback} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/feedback" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeGuestSessionDocumentFeedback(sessionId, documentId, body) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/feedback";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a knowledge document by ID.
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {string} documentId - Document ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getKnowledgeGuestSessionDocument(sessionId, documentId) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.pathParameters.documentId = documentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get documents.
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.categoryId] -  If specified, retrieves documents associated with category ids, comma separated values expected.
	 * @param {number} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeGuestSessionDocuments(sessionId, query) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("categoryId" in query && this.#checkJSONSchemaType(query["categoryId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "categoryId", "array");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create view event for a document.
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {string} documentId - Document ID
	 * @param {KnowledgeGuestDocumentView} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/views" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeGuestSessionDocumentViews(sessionId, documentId, body) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/views";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Indicate that the document was copied by the user.
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {string} documentId - Document ID
	 * @param {KnowledgeGuestDocumentCopy} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/copies" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeGuestSessionDocumentCopies(sessionId, documentId, body) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/{documentId}/copies";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		if (this.#checkJSONSchemaType(documentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "documentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.pathParameters.documentId = documentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Indicate that documents were presented to the user.
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {KnowledgeGuestDocumentPresentation} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents/presentations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeGuestSessionDocumentsPresentations(sessionId, body) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/presentations";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get categories
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.before] -  The cursor that points to the start of the set of entities that has been returned.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.parentId] -  If specified, retrieves the children categories by parent category ID.
	 * @param {boolean} [query.isRoot] -  If specified, retrieves only the root categories.
	 * @param {string} [query.name] -  Filter to return the categories that starts with the given category name.
	 * @param {string} [query.sortBy] -  Name: sort by category names alphabetically; Hierarchy: sort by the full path of hierarchical category names alphabetically
	 * @param {string} [query.expand] -  The specified entity attribute will be filled. Supported value:"Ancestors": every ancestors will be filled via the parent attribute recursively,but only the id, name, parentId will be present for the ancestors.
	 * @param {boolean} [query.includeDocumentCount] -  If specified, retrieves the number of documents related to category.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/categories" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getKnowledgeGuestSessionCategories(sessionId, query) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/categories";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("before" in query && this.#checkJSONSchemaType(query["before"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "before", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("parentId" in query && this.#checkJSONSchemaType(query["parentId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "parentId", "string");
			}
			if ("isRoot" in query && this.#checkJSONSchemaType(query["isRoot"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "isRoot", "boolean");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
			if ("includeDocumentCount" in query && this.#checkJSONSchemaType(query["includeDocumentCount"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeDocumentCount", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Search the documents in a guest session.
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Fields, if any, to expand for each document in the search result matching the query.
	 * @param {KnowledgeDocumentGuestSearchRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeGuestSessionDocumentsSearch(sessionId, query, body) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the knowledge documents to provide suggestions for auto completion.
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {KnowledgeGuestDocumentSuggestionRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search/suggestions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeGuestSessionDocumentsSearchSuggestions(sessionId, body) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search/suggestions";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update search result.
	 * @async
	 * @param {string} sessionId - Knowledge guest session ID.
	 * @param {string} searchId - Search Result ID
	 * @param {SearchUpdateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search/{searchId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchKnowledgeGuestSessionDocumentsSearchSearchId(sessionId, searchId, body) {
		const endpointPath = "/api/v2/knowledge/guest/sessions/{sessionId}/documents/search/{searchId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		if (this.#checkJSONSchemaType(searchId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "searchId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.pathParameters.searchId = searchId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create guest session
	 * @async
	 * @param {KnowledgeGuestSession} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/knowledge/guest/sessions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postKnowledgeGuestSessions(body) {
		const endpointPath = "/api/v2/knowledge/guest/sessions";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { KnowledgeAPI };