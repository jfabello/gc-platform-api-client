/**
 * Predictive Engagement, Customer Journey
 * @module gc-platform-api-journey
 * @documentation https://developer.genesys.cloud/commdigital/digital/webmessaging/journey/journey-apis
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.222Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} ActionEventRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} sessionId - UUID of the customer session for this action.
 * @property {string} actionId - UUID for the action, as returned by the Ping endpoint when the action was qualified.
 * @property {string} actionState - State the action is transitioning to.
 * @property {string} [errorCode] - Client defined error code (when state transitions to errored)
 * @property {string} [errorMessage] - Message of the error returned when the action fails (when state transitions to errored)
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ActionMap
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {number} [version] - The version of the action map.
 * @property {boolean} [isActive] - Whether the action map is active.
 * @property {string} displayName - Display name of the action map.
 * @property {string[]} triggerWithSegments - Trigger action map if any segment in the list is assigned to a given customer.
 * @property {EventCondition[]} [triggerWithEventConditions] - List of event conditions that must be satisfied to trigger the action map.
 * @property {OutcomeProbabilityCondition[]} [triggerWithOutcomeProbabilityConditions] - (deprecated - use triggerWithOutcomeQuantileConditions instead) Probability conditions for outcomes that must be satisfied to trigger the action map.
 * @property {OutcomePercentileCondition[]} [triggerWithOutcomePercentileConditions] - (deprecated - use triggerWithOutcomeQuantileConditions instead) Percentile conditions for outcomes that must be satisfied to trigger the action map.
 * @property {OutcomeQuantileCondition[]} [triggerWithOutcomeQuantileConditions] - Quantile conditions for outcomes that must be satisfied to trigger the action map.
 * @property {UrlCondition[]} pageUrlConditions - URL conditions that a page must match for web actions to be displayable.
 * @property {Activation} [activation] - Type of activation.
 * @property {number} [weight] - Weight of the action map with higher number denoting higher weight.
 * @property {ActionMapAction} [action] - The action that will be executed if this action map is triggered.
 * @property {ActionMapScheduleGroups} [actionMapScheduleGroups] - The action map's associated schedule groups.
 * @property {boolean} [ignoreFrequencyCap] - Override organization-level frequency cap and always offer web engagements from this action map.
 * @property {string} [selfUri] - The URI for this object
 * @property {string} [createdDate] - Timestamp indicating when the action map was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [modifiedDate] - Timestamp indicating when the action map was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [startDate] - Timestamp at which the action map is scheduled to start firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endDate] - Timestamp at which the action map is scheduled to stop firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} ActionMapAction
 * @property {ActionMapActionTemplate} [actionTemplate] - Action template associated with the action map.
 * @property {string} [mediaType] - Media type of action.
 * @property {string} [actionTargetId] - Action target ID.
 * @property {boolean} [isPacingEnabled] - Whether this action should be throttled.
 * @property {ActionProperties} [props] - Additional properties.
 * @property {ArchitectFlowFields} [architectFlowFields] - Architect Flow Id and input contract.
 * @property {WebMessagingOfferFields} [webMessagingOfferFields] - Admin-configurable fields of a web messaging offer action.
 * @property {OpenActionFields} [openActionFields] - Admin-configurable fields of an open action.
 */
 
/**
 * @typedef {object} ActionMapActionTemplate
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ActionMapEstimateOutcomeCriteria
 * @property {string} outcomeId - ID of outcome.
 * @property {number} [maxProbability] - Probability value for the selected outcome at or above which the action map will trigger.
 * @property {number} [probability] - Additional probability condition, where if set, the action map will trigger if the current outcome probability is lower or equal to the value.
 * @property {number} [quantile] - Represents the quantity of sessions that have a maximum probability less than the predicted probability.
 * @property {number} [maxQuantile] - Represents the quantity of sessions that have a maximum probability less than the predicted session max probability.
 */
 
/**
 * @typedef {object} ActionMapEstimateRequest
 * @property {string[]} [segmentIds] - List of Segment IDs.
 * @property {ActionMapEstimateOutcomeCriteria} [outcomeCriteria] - Outcome Criteria containing outcomeId and probability thresholds.
 */
 
/**
 * @typedef {object} ActionMapScheduleGroup
 * @property {string} id - The ID of the action maps's associated schedule group.
 */
 
/**
 * @typedef {object} ActionMapScheduleGroups
 * @property {ActionMapScheduleGroup} actionMapScheduleGroup - The actions map's associated schedule group.
 * @property {ActionMapScheduleGroup} [emergencyActionMapScheduleGroup] - The action map's associated emergency schedule group.
 */
 
/**
 * @typedef {object} ActionProperties
 * @property {string} [webchatPrompt] - Prompt message shown to user, used for webchat type action.
 * @property {string} [webchatTitleText] - Title shown to the user, used for webchat type action.
 * @property {string} [webchatAcceptText] - Accept button text shown to user, used for webchat type action.
 * @property {string} [webchatDeclineText] - Decline button text shown to user, used for webchat type action.
 * @property {ActionSurvey} [webchatSurvey] - Survey provided to the user, used for webchat type action.
 */
 
/**
 * @typedef {object} ActionSurvey
 * @property {JourneySurveyQuestion[]} questions - Questions shown to the user.
 */
 
/**
 * @typedef {object} ActionTemplate
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - Name of the action template.
 * @property {string} [description] - Description of the action template's functionality.
 * @property {number} [version] - The version of the action template.
 * @property {string} mediaType - Media type of action described by the action template.
 * @property {string} state - Whether the action template is currently active, inactive or deleted.
 * @property {ContentOffer} [contentOffer] - Properties used to configure an action of type content offer
 * @property {string} [selfUri] - The URI for this object
 * @property {string} [createdDate] - Date when action template was created in ISO-8601 format.
 * @property {string} [modifiedDate] - Date when action template was last modified in ISO-8601 format.
 */
 
/**
 * @typedef {object} Activation
 * @property {string} type - Type of activation.
 * @property {number} [delayInSeconds] - Activation delay time amount.
 */
 
/**
 * @typedef {object} AddressableEntityRef
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} AggregationRange
 * @property {number} [gte] - Greater than or equal to
 * @property {number} [lt] - Less than
 */
 
/**
 * @typedef {object} AppEventRequest
 * @property {string} eventName - Represents the action the customer performed. Event types are created for each unique event name and can be faceted on in segment and outcome conditions. A valid event name must only contain alphanumeric characters and underscores. A good event name is typically an object followed by the action performed in past tense, e.g. screen_viewed, search_performed, user_registered.
 * @property {string} screenName - The name of the screen, view, or fragment in the app where the event took place.
 * @property {JourneyApp} app - Application that the customer is interacting with.
 * @property {RequestDevice} device - Customer's device.
 * @property {SdkLibrary} [sdkLibrary] - SDK library used to generate the event.
 * @property {NetworkConnectivity} [networkConnectivity] - Information relating to the device's network connectivity.
 * @property {string} [referrerUrl] - The referrer URL of the first event in the app session.
 * @property {string} [searchQuery] - Represents the keywords in a customer search query.
 * @property {object} [attributes] - User-defined attributes associated with a particular event. These attributes provide additional context about the event. For example, items_in_cart or subscription_level.
 * @property {object} [traits] - Traits are attributes intrinsic to the customer that may be sent in selected events, (e.g. email, lastName, cellPhone). Traits are used to collect information for identity resolution. For example, the same person might be using an application on different devices which might create two sessions with different customerIds. Additional information can be provided as traits to help link those two sessions and customers to a single external contact through common identifiers that were submitted via a form fill, message, or other input in both sessions.
 * @property {string} customerCookieId - A UUID representing the customer associated with the app event. This is expected to be set per application install or device and can be used to identify a single customer across multiple sessions. This identifier, along with others passed as traits, is used for identity resolution.
 * @property {string} createdDate - UTC timestamp indicating when the event actually took place, events older than an hour will be rejected. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} ArchitectFlowFields
 * @property {AddressableEntityRef} [architectFlow] - The architect flow.
 * @property {RequestMapping[]} [flowRequestMappings] - Collection of Architect Flow Request Mappings to use.
 */
 
/**
 * @typedef {object} AssociatedValueField
 * @property {string} dataType - The data type of the value field.
 * @property {string} name - The field name for extracting value from event.
 */
 
/**
 * @typedef {object} CallToAction
 * @property {string} [text] - Text displayed on the call to action button.
 * @property {string} url - URL to open when user clicks on the call to action button.
 * @property {string} [target] - Where the URL should be opened when the user clicks on the call to action button.
 */
 
/**
 * @typedef {object} CloseButtonStyleProperties
 * @property {string} [color] - Color of button. (eg. #FF0000)
 * @property {number} [opacity] - Opacity of button.
 */
 
/**
 * @typedef {object} ContentOffer
 * @property {string} [imageUrl] - URL for image displayed to the customer when displaying content offer.
 * @property {string} displayMode - The display mode of Genesys Widgets when displaying content offer.
 * @property {string} layoutMode - The layout mode of the text shown to the user when displaying content offer.
 * @property {string} [title] - Title used in the header of the content offer.
 * @property {string} [headline] - Headline displayed above the body text of the content offer.
 * @property {string} [body] - Body text of the content offer.
 * @property {CallToAction} [callToAction] - Properties customizing the call to action button on the content offer.
 * @property {ContentOfferStylingConfiguration} [style] - Properties customizing the styling of the content offer.
 */
 
/**
 * @typedef {object} ContentOfferStyleProperties
 * @property {string} [padding] - Padding of the offer. (eg. 10px)
 * @property {string} [color] - Text color of the offer. (eg. #FF0000)
 * @property {string} [backgroundColor] - Background color of the offer. (eg. #000000)
 */
 
/**
 * @typedef {object} ContentOfferStylingConfiguration
 * @property {ContentPositionProperties} [position] - Properties for customizing the positioning of the content offer.
 * @property {ContentOfferStyleProperties} [offer] - Properties for customizing the appearance of the content offer.
 * @property {CloseButtonStyleProperties} [closeButton] - Properties for customizing the appearance of the close button.
 * @property {CtaButtonStyleProperties} [ctaButton] - Properties for customizing the appearance of the CTA button.
 * @property {TextStyleProperties} [title] - Properties for customizing the appearance of the title text.
 * @property {TextStyleProperties} [headline] - Properties for customizing the appearance of the headline text.
 * @property {TextStyleProperties} [body] - Properties for customizing the appearance of the body text.
 */
 
/**
 * @typedef {object} ContentPositionProperties
 * @property {string} [top] - Top positioning offset.
 * @property {string} [bottom] - Bottom positioning offset.
 * @property {string} [left] - Left positioning offset.
 * @property {string} [right] - Right positioning offset.
 */
 
/**
 * @typedef {object} CtaButtonStyleProperties
 * @property {string} [color] - Color of the text. (eg. #FFFFFF)
 * @property {string} [font] - Font of the text. (eg. Helvetica)
 * @property {string} [fontSize] - Font size of the text. (eg. '12')
 * @property {string} [textAlign] - Text alignment.
 * @property {string} [backgroundColor] - Background color of the CTA button. (eg. #FF0000)
 */
 
/**
 * @typedef {object} DomainEntityRef
 * @property {string} [id]
 * @property {string} [name]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} EventCondition
 * @property {string} key - The event key.
 * @property {string[]} values - The event values.
 * @property {string} [operator] - The comparison operator.
 * @property {string} streamType - The stream type for which this condition can be satisfied.
 * @property {string} sessionType - The session type for which this condition can be satisfied.
 * @property {string} [eventName] - The name of the event for which this condition can be satisfied.
 */
 
/**
 * @typedef {object} FlowPathsFlowFilter
 * @property {string} id - The identifier of the flow.
 */
 
/**
 * @typedef {object} FlowPathsQuery
 * @property {string} category - Category (use case) of the paths within a given domain.
 * @property {FlowPathsFlowFilter[]} flows - List of flows to query the paths result.
 */
 
/**
 * @typedef {object} JourneyAggregateQueryClause
 * @property {string} type - Boolean operation to apply to the provided predicates
 * @property {JourneyAggregateQueryPredicate[]} predicates - Like a three-word sentence: (attribute-name) (operator) (target-value).
 */
 
/**
 * @typedef {object} JourneyAggregateQueryFilter
 * @property {string} type - Boolean operation to apply to the provided predicates and clauses
 * @property {JourneyAggregateQueryClause[]} [clauses] - Boolean 'and/or' logic with up to two-levels of nesting
 * @property {JourneyAggregateQueryPredicate[]} [predicates] - Like a three-word sentence: (attribute-name) (operator) (target-value).
 */
 
/**
 * @typedef {object} JourneyAggregateQueryPredicate
 * @property {string} [type] - Optional type, can usually be inferred
 * @property {string} [dimension] - Left hand side for dimension predicates
 * @property {string} [operator] - Optional operator, default is matches
 * @property {string} [value] - Right hand side for dimension predicates
 * @property {NumericRange} [range] - Right hand side for dimension predicates
 */
 
/**
 * @typedef {object} JourneyAggregationQuery
 * @property {string} interval - Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 * @property {string} [granularity] - Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H
 * @property {string} [timeZone] - Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London
 * @property {string[]} [groupBy] - Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.
 * @property {JourneyAggregateQueryFilter} [filter] - Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters
 * @property {string[]} metrics - Behaves like a SQL SELECT clause. Only named metrics will be retrieved.
 * @property {boolean} [flattenMultivaluedDimensions] - Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']->'a,b,c')
 * @property {JourneyAggregationView[]} [views] - Custom derived metric views
 * @property {string} [alternateTimeDimension] - Dimension to use as the alternative timestamp for data in the aggregate.  Choosing "eventTime" uses the actual time of the data event.
 */
 
/**
 * @typedef {object} JourneyAggregationView
 * @property {string} target - Target metric name
 * @property {string} name - A unique name for this view. Must be distinct from other views and built-in metric names.
 * @property {string} function - Type of view you wish to create
 * @property {AggregationRange} [range] - Range of numbers for slicing up data
 */
 
/**
 * @typedef {object} JourneyApp
 * @property {string} name - Name of the application (e.g. mybankingapp).
 * @property {string} namespace - Namespace of the application (e.g. com.genesys.bancodinero).
 * @property {string} version - Version of the application (e.g. 5.9.27).
 * @property {string} buildNumber - Build number of the application (e.g. 701).
 */
 
/**
 * @typedef {object} JourneySegmentRequest
 * @property {boolean} [isActive] - Whether or not the segment is active.
 * @property {string} displayName - The display name of the segment.
 * @property {number} [version] - The version of the segment.
 * @property {string} [description] - A description of the segment.
 * @property {string} color - The hexadecimal color value of the segment.
 * @property {string} [scope] - The target entity that a segment applies to.
 * @property {boolean} [shouldDisplayToAgent] - Whether or not the segment should be displayed to agent/supervisor users.
 * @property {RequestContext} context - The context of the segment.
 * @property {RequestJourney} journey - The pattern of rules defining the segment.
 * @property {RequestExternalSegment} [externalSegment] - Details of an entity corresponding to this segment in an external system.
 * @property {number} [assignmentExpirationDays] - Time, in days, from when the segment is assigned until it is automatically unassigned.
 */
 
/**
 * @typedef {object} JourneySurveyQuestion
 * @property {string} [type] - Type of survey question.
 * @property {string} label - Label of question.
 * @property {string} [customerProperty] - The customer property that the answer maps to.
 * @property {string[]} [choices] - Choices available to user.
 * @property {boolean} [isMandatory] - Whether answering this question is mandatory.
 */
 
/**
 * A journey view
 * @typedef {object} JourneyView
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [description] - A description of the journey view
 * @property {number} [version] - The version of the journey view
 * @property {JourneyViewUser} [createdBy] - User that has created the view.
 * @property {JourneyViewUser} [modifiedBy] - User that has modified the view.
 * @property {string} [interval] - An absolute timeframe for the journey view, expressed as an ISO 8601 interval. Only one of interval or duration must be specified. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 * @property {string} [duration] - A relative timeframe for the journey view, expressed as an ISO 8601 duration. Only one of interval or duration must be specified. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H
 * @property {JourneyViewElement[]} elements - The elements within the journey view
 * @property {JourneyViewChart[]} [charts] - A list of charts to measure within context of the elements of the the journey view
 * @property {string} [dateCreated] - The date when the journey view was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - The date when this version of the journey view was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * A chart within the context of the elements of the the journey view
 * @typedef {object} JourneyViewChart
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {number} [version] - The version of the journey view chart
 * @property {string} [groupByTime] - A time unit to group the metrics by. There is a limit on the number of groupBy properties which can be specified.
 * @property {JourneyViewChartGroupByAttribute[]} [groupByAttributes] - A list of attributes to group the metrics by. There is a limit on the number of groupBy properties which can be specified.
 * @property {JourneyViewChartMetric[]} metrics - A list of metrics to calculate within the chart by (aka the y axis)
 * @property {JourneyViewChartDisplayAttributes} [displayAttributes] - Optional display attributes for rendering the chart
 * @property {number} [groupByMax] - A maximum on the number of values being grouped by
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Display attributes for the chart, such as type, labels and legends
 * @typedef {object} JourneyViewChartDisplayAttributes
 * @property {string} [type] - The type of chart to display
 * @property {string} [groupByTitle] - A title for the grouped by attributes (aka the x axis)
 * @property {string} [metricsTitle] - A title for the metrics (aka the y axis)
 * @property {boolean} [showLegend] - Whether to show a legend
 */
 
/**
 * A journey element attribute to group by within the chart
 * @typedef {object} JourneyViewChartGroupByAttribute
 * @property {string} elementId - The element in the list of elements which is being grouped by
 * @property {string} attribute - The attribute of the element being grouped by
 */
 
/**
 * A metric to measure within the chart
 * @typedef {object} JourneyViewChartMetric
 * @property {string} id - The unique identifier of the metric within the chart
 * @property {string} elementId - The element in the list of elements which the metric is measuring
 * @property {string} [aggregate] - How to aggregate the given element, defaults to CustomerCount
 * @property {string} [displayLabel] - A display label for the metric
 */
 
/**
 * An element within a journey view
 * @typedef {object} JourneyViewElement
 * @property {string} id - The unique identifier of the element within the elements list
 * @property {string} name - The unique name of the element within the view
 * @property {JourneyViewElementAttributes} attributes - Required attributes of the element
 * @property {JourneyViewElementDisplayAttributes} [displayAttributes] - Attributes that defines the visualization of the element in the journey view
 * @property {JourneyViewElementFilter} [filter] - Any filters applied to this element
 * @property {JourneyViewLink[]} [followedBy] - A list of JourneyViewLink objects, listing the elements downstream of this element
 */
 
/**
 * Attributes on an element in a journey view
 * @typedef {object} JourneyViewElementAttributes
 * @property {string} type - The type of the element (e.g. Event)
 * @property {string} [id] - The identifier for the element based on its type
 * @property {string} [source] - The source for the element (e.g. IVR, Voice, Chat). Used for informational purposes only
 */
 
/**
 * Display attributes for an element in a journey view
 * @typedef {object} JourneyViewElementDisplayAttributes
 * @property {number} x - The horizontal position (x-coordinate) of the element on the journey view canvas
 * @property {number} y - The vertical position (y-coordinate) of the element on the journey view canvas
 * @property {number} col - The column position for the element in the journey view canvas
 */
 
/**
 * A set of filters on an element within a journey view
 * @typedef {object} JourneyViewElementFilter
 * @property {string} type - Boolean operation to apply to the provided predicates and clauses. Valid values: And
 * @property {JourneyViewElementFilterPredicate[]} [predicates] - predicates
 * @property {JourneyViewElementFilterNumberPredicate[]} [numberPredicates] - numberPredicates
 */
 
/**
 * A numeric filter on an element within a journey view
 * @typedef {object} JourneyViewElementFilterNumberPredicate
 * @property {string} dimension - the element's attribute being filtered on
 * @property {string} [operator] - Optional operator, default is Matches. Valid values: Matches
 * @property {boolean} [noValue] - set this to true if no specific value to be considered
 * @property {JourneyViewElementFilterRange} range - the range of comparators to filter on
 */
 
/**
 * A filter on an element within a journey view
 * @typedef {object} JourneyViewElementFilterPredicate
 * @property {string} dimension - the element's attribute being filtered on
 * @property {string[]} values - the values of the attribute to filter on
 * @property {string} [operator] - Optional operator, default is Matches. Valid values: Matches
 * @property {boolean} [noValue] - set this to true if no specific value to be considered
 */
 
/**
 * the range of attribute values to filter on. At least one comparator must be defined
 * @typedef {object} JourneyViewElementFilterRange
 * @property {JourneyViewElementFilterRangeData} [lt] - comparator: less than
 * @property {JourneyViewElementFilterRangeData} [lte] - comparator: less than or equal
 * @property {JourneyViewElementFilterRangeData} [gt] - comparator: greater than
 * @property {JourneyViewElementFilterRangeData} [gte] - comparator: greater than or equal
 * @property {JourneyViewElementFilterRangeData} [eq] - comparator: is equal to
 * @property {JourneyViewElementFilterRangeData} [neq] - comparator: is not equal to
 */
 
/**
 * @typedef {object} JourneyViewElementFilterRangeData
 * @property {string} [duration] - An ISO 8601 time duration. Only one of number or duration must be specified.
 * @property {number} [number] - A numeric value. Only one of number or duration must be specified.
 */
 
/**
 * @typedef {object} JourneyViewJob
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} dateCreated - Timestamp of execution. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} dateCompleted - Timestamp of completion. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} status - The status of the job
 * @property {JourneyView} journeyView - The journey view for which the job is executed
 * @property {string} dateCompletionEstimated - Timestamp for the estimated time of completion. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * A link between elements in a journey view
 * @typedef {object} JourneyViewLink
 * @property {string} id - The identifier of the element downstream
 * @property {JourneyViewLinkTimeConstraint} [constraintWithin] - A time constraint on this link, which requires a customer to complete the downstream element within this amount of time to be counted.
 * @property {JourneyViewLinkTimeConstraint} [constraintAfter] - A time constraint on this link, which requires a customer must complete the downstream element after this amount of time to be counted.
 * @property {string} [eventCountType] - The type of events that will be counted. Note: Concurrent will override any JourneyViewLinkTimeConstraint. Default is Sequential.
 * @property {string[]} [joinAttributes] - Other (secondary) attributes on which this link should join the customers being counted
 */
 
/**
 * @typedef {object} JourneyViewLinkTimeConstraint
 * @property {string} [unit] - The unit for the link's time constraint
 * @property {number} [value] - The value for the link's time constraint
 */
 
/**
 * @typedef {object} JourneyViewSchedule
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} frequency - Frequency of execution
 * @property {string} dateModified - Timestamp of last update. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {AddressableEntityRef} user - Last modified user
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} JourneyViewUser
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [emailAddress] - Email address of the user
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Label
 * @property {string} name - Name of the label
 * @property {string} value - Value of the label
 * @property {boolean} encoded - Whether the label is encoded or not
 */
 
/**
 * @typedef {object} NetworkConnectivity
 * @property {string} [carrier] - The name of the network carrier.
 * @property {boolean} bluetoothEnabled - Whether Bluetooth is enabled.
 * @property {boolean} cellularEnabled - Whether Cellular is enabled.
 * @property {boolean} wifiEnabled - Whether Wi-Fi is enabled.
 */
 
/**
 * @typedef {object} NumericRange
 * @property {number} [gt] - Greater than
 * @property {number} [gte] - Greater than or equal to
 * @property {number} [lt] - Less than
 * @property {number} [lte] - Less than or equal to
 */
 
/**
 * @typedef {object} OpenActionFields
 * @property {DomainEntityRef} openAction - The specific type of the open action.
 * @property {object} [configurationFields] - Custom fields defined in the schema referenced by the open action type selected.
 */
 
/**
 * @typedef {object} OutcomePercentileCondition
 * @property {string} outcomeId - The outcome ID.
 * @property {number} maximumPercentile - Percentile value for the selected outcome, at or above which the action map will trigger.
 * @property {number} [fallbackPercentile] - Additional percentile condition, where if set, the action map will trigger if the current outcome percentile is lower or equal to the value.
 */
 
/**
 * @typedef {object} OutcomePredictorRequest
 * @property {OutcomeRefRequest} outcome - The outcome for which this predictor will provide predictions.
 */
 
/**
 * @typedef {object} OutcomeProbabilityCondition
 * @property {string} outcomeId - The outcome ID.
 * @property {number} maximumProbability - Probability value for the selected outcome at or above which the action map will trigger.
 * @property {number} [probability] - Additional probability condition, where if set, the action map will trigger if the current outcome probability is lower or equal to the value.
 */
 
/**
 * @typedef {object} OutcomeQuantileCondition
 * @property {string} outcomeId - The outcome ID.
 * @property {number} maxQuantileThreshold - This Outcome Quantile Condition is met when sessionMaxQuantile of the OutcomeScore is above this value, (unless fallbackQuantile is set). Range 0.00-1.00
 * @property {number} [fallbackQuantileThreshold] - (Optional) If set, this Condition is met when maxQuantileThreshold is met, AND the current quantile of the OutcomeScore is below this fallbackQuantileThreshold. Range 0.00-1.00
 */
 
/**
 * @typedef {object} OutcomeRefRequest
 * @property {string} id - ID of outcome.
 */
 
/**
 * @typedef {object} OutcomeRequest
 * @property {boolean} [isActive] - Whether or not the outcome is active.
 * @property {string} displayName - The display name of the outcome.
 * @property {number} [version] - The version of the outcome.
 * @property {string} [description] - A description of the outcome.
 * @property {boolean} [isPositive] - Whether or not the outcome is positive.
 * @property {RequestContext} [context] - The context of the outcome.
 * @property {RequestJourney} [journey] - The pattern of rules defining the filter of the outcome.
 * @property {AssociatedValueField} [associatedValueField] - The field from the event indicating the associated value.
 */
 
/**
 * @typedef {object} PatchAction
 * @property {string} mediaType - Media type of action.
 * @property {ActionMapActionTemplate} [actionTemplate] - Action template associated with the action map.
 * @property {string} [actionTargetId] - Action target ID.
 * @property {boolean} [isPacingEnabled] - Whether this action should be throttled.
 * @property {PatchActionProperties} [props] - Additional properties.
 * @property {ArchitectFlowFields} [architectFlowFields] - Architect Flow Id and input contract.
 * @property {PatchWebMessagingOfferFields} [webMessagingOfferFields] - Admin-configurable fields of a web messaging offer action.
 * @property {OpenActionFields} [openActionFields] - Admin-configurable fields of an open action.
 */
 
/**
 * @typedef {object} PatchActionMap
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {number} [version] - The version of the action map.
 * @property {boolean} [isActive] - Whether the action map is active.
 * @property {string} displayName - Display name of the action map.
 * @property {string[]} triggerWithSegments - Trigger action map if any segment in the list is assigned to a given customer.
 * @property {EventCondition[]} [triggerWithEventConditions] - List of event conditions that must be satisfied to trigger the action map.
 * @property {OutcomeProbabilityCondition[]} [triggerWithOutcomeProbabilityConditions] - (deprecated - use triggerWithOutcomeQuantileConditions instead) Probability conditions for outcomes that must be satisfied to trigger the action map.
 * @property {OutcomePercentileCondition[]} [triggerWithOutcomePercentileConditions] - (deprecated - use triggerWithOutcomeQuantileConditions instead) Percentile conditions for outcomes that must be satisfied to trigger the action map.
 * @property {OutcomeQuantileCondition[]} [triggerWithOutcomeQuantileConditions] - Quantile conditions for outcomes that must be satisfied to trigger the action map.
 * @property {UrlCondition[]} pageUrlConditions - URL conditions that a page must match for web actions to be displayable.
 * @property {Activation} [activation] - Type of activation.
 * @property {number} [weight] - Weight of the action map with higher number denoting higher weight.
 * @property {PatchAction} [action] - The action that will be executed if this action map is triggered.
 * @property {PatchActionMapScheduleGroups} [actionMapScheduleGroups] - The action map's associated schedule groups.
 * @property {boolean} [ignoreFrequencyCap] - Override organization-level frequency cap and always offer web engagements from this action map.
 * @property {string} [selfUri] - The URI for this object
 * @property {string} [createdDate] - Timestamp indicating when the action map was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [modifiedDate] - Timestamp indicating when the action map was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [startDate] - Timestamp at which the action map is scheduled to start firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endDate] - Timestamp at which the action map is scheduled to stop firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} PatchActionMapScheduleGroups
 * @property {ActionMapScheduleGroup} actionMapScheduleGroup - The actions map's associated schedule group.
 * @property {ActionMapScheduleGroup} [emergencyActionMapScheduleGroup] - The action map's associated emergency schedule group.
 */
 
/**
 * @typedef {object} PatchActionProperties
 * @property {string} [webchatPrompt] - Prompt message shown to user, used for webchat type action.
 * @property {string} [webchatTitleText] - Title shown to the user, used for webchat type action.
 * @property {string} [webchatAcceptText] - Accept button text shown to user, used for webchat type action.
 * @property {string} [webchatDeclineText] - Decline button text shown to user, used for webchat type action.
 * @property {PatchActionSurvey} [webchatSurvey] - Survey provided to the user, used for webchat type action.
 */
 
/**
 * @typedef {object} PatchActionSurvey
 * @property {PatchSurveyQuestion[]} questions - Questions shown to the user.
 */
 
/**
 * @typedef {object} PatchActionTarget
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {ServiceLevel} [serviceLevel] - Service Level of the action target. Chat offers for the target will be throttled with the aim of achieving this service level.
 * @property {number} [shortAbandonThreshold] - Indicates the non-default short abandon threshold
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} PatchActionTemplate
 * @property {string} name - Name of the action template.
 * @property {string} [description] - Description of the action template's functionality.
 * @property {number} [version] - The version of the action template.
 * @property {string} [mediaType] - Media type of action described by the action template.
 * @property {string} [state] - Whether the action template is currently active, inactive or deleted.
 * @property {PatchContentOffer} [contentOffer] - Properties used to configure an action of type content offer
 */
 
/**
 * @typedef {object} PatchAssociatedValueField
 * @property {string} [dataType] - The data type of the value field.
 * @property {string} [name] - The field name for extracting value from event.
 */
 
/**
 * @typedef {object} PatchCallToAction
 * @property {string} [text] - Text displayed on the call to action button.
 * @property {string} [url] - URL to open when user clicks on the call to action button.
 * @property {string} [target] - Where the URL should be opened when the user clicks on the call to action button.
 */
 
/**
 * @typedef {object} PatchCloseButtonStyleProperties
 * @property {string} [color] - Color of button. (eg. #FF0000)
 * @property {number} [opacity] - Opacity of button.
 */
 
/**
 * @typedef {object} PatchContentOffer
 * @property {string} [imageUrl] - URL for image displayed to the customer when displaying content offer.
 * @property {string} [displayMode] - The display mode of Genesys Widgets when displaying content offer.
 * @property {string} [layoutMode] - The layout mode of the text shown to the user when displaying content offer.
 * @property {string} [title] - Title used in the header of the content offer.
 * @property {string} [headline] - Headline displayed above the body text of the content offer.
 * @property {string} [body] - Body text of the content offer.
 * @property {PatchCallToAction} [callToAction] - Properties customizing the call to action button on the content offer.
 * @property {PatchContentOfferStylingConfiguration} [style] - Properties customizing the styling of the content offer.
 */
 
/**
 * @typedef {object} PatchContentOfferStyleProperties
 * @property {string} [padding] - Padding of the offer. (eg. 10px)
 * @property {string} [color] - Text color of the offer. (eg. #FF0000)
 * @property {string} [backgroundColor] - Background color of the offer. (eg. #000000)
 */
 
/**
 * @typedef {object} PatchContentOfferStylingConfiguration
 * @property {PatchContentPositionProperties} [position] - Properties for customizing the positioning of the content offer.
 * @property {PatchContentOfferStyleProperties} [offer] - Properties for customizing the appearance of the content offer.
 * @property {PatchCloseButtonStyleProperties} [closeButton] - Properties for customizing the appearance of the close button.
 * @property {PatchCtaButtonStyleProperties} [ctaButton] - Properties for customizing the appearance of the CTA button.
 * @property {PatchTextStyleProperties} [title] - Properties for customizing the appearance of the title text.
 * @property {PatchTextStyleProperties} [headline] - Properties for customizing the appearance of the headline text.
 * @property {PatchTextStyleProperties} [body] - Properties for customizing the appearance of the body text.
 */
 
/**
 * @typedef {object} PatchContentPositionProperties
 * @property {string} [top] - Top positioning offset.
 * @property {string} [bottom] - Bottom positioning offset.
 * @property {string} [left] - Left positioning offset.
 * @property {string} [right] - Right positioning offset.
 */
 
/**
 * @typedef {object} PatchContext
 * @property {PatchContextPattern[]} [patterns] - A list of one or more patterns to match.
 */
 
/**
 * @typedef {object} PatchContextPattern
 * @property {PatchEntityTypeCriteria[]} [criteria] - A list of one or more criteria to satisfy.
 */
 
/**
 * @typedef {object} PatchCriteria
 * @property {string} [key] - The criteria key.
 * @property {string[]} [values] - The criteria values.
 * @property {boolean} [shouldIgnoreCase] - Should criteria be case insensitive.
 * @property {string} [operator] - The comparison operator.
 */
 
/**
 * @typedef {object} PatchCtaButtonStyleProperties
 * @property {string} [color] - Color of the text. (eg. #FFFFFF)
 * @property {string} [font] - Font of the text. (eg. Helvetica)
 * @property {string} [fontSize] - Font size of the text. (eg. '12')
 * @property {string} [textAlign] - Text alignment.
 * @property {string} [backgroundColor] - Background color of the CTA button. (eg. #A04033)
 */
 
/**
 * @typedef {object} PatchEntityTypeCriteria
 * @property {string} [key] - The criteria key.
 * @property {string[]} [values] - The criteria values.
 * @property {boolean} [shouldIgnoreCase] - Should criteria be case insensitive.
 * @property {string} [operator] - The comparison operator.
 * @property {string} [entityType] - The entity to match the pattern against.
 */
 
/**
 * @typedef {object} PatchExternalSegment
 * @property {string} [name] - Name for the external segment in the system where it originates from.
 */
 
/**
 * @typedef {object} PatchJourney
 * @property {PatchJourneyPattern[]} [patterns] - A list of zero or more patterns to match.
 */
 
/**
 * @typedef {object} PatchJourneyPattern
 * @property {PatchCriteria[]} [criteria] - A list of one or more criteria to satisfy.
 * @property {number} [count] - The number of times the pattern must match.
 * @property {string} [streamType] - The stream type for which this pattern can be matched on.
 * @property {string} [sessionType] - The session type for which this pattern can be matched on.
 * @property {string} [eventName] - The name of the event for which this pattern can be matched on.
 */
 
/**
 * @typedef {object} PatchOutcome
 * @property {boolean} [isActive] - Whether or not the outcome is active.
 * @property {string} displayName - The display name of the outcome.
 * @property {number} [version] - The version of the outcome.
 * @property {string} [description] - A description of the outcome.
 * @property {boolean} [isPositive] - Whether or not the outcome is positive.
 * @property {PatchContext} [context] - The context of the outcome.
 * @property {PatchJourney} [journey] - The pattern of rules defining the filter of the outcome.
 * @property {PatchAssociatedValueField} [associatedValueField] - The field from the event indicating the associated value.
 */
 
/**
 * @typedef {object} PatchSegment
 * @property {boolean} [isActive] - Whether or not the segment is active.
 * @property {string} [displayName] - The display name of the segment.
 * @property {number} [version] - The version of the segment.
 * @property {string} [description] - A description of the segment.
 * @property {string} [color] - The hexadecimal color value of the segment.
 * @property {boolean} [shouldDisplayToAgent] - Whether or not the segment should be displayed to agent/supervisor users.
 * @property {PatchContext} [context] - The context of the segment.
 * @property {PatchJourney} [journey] - The pattern of rules defining the segment.
 * @property {PatchExternalSegment} [externalSegment] - Details of an entity corresponding to this segment in an external system.
 * @property {number} [assignmentExpirationDays] - Time, in days, from when the segment is assigned until it is automatically unassigned.
 */
 
/**
 * @typedef {object} PatchSurveyQuestion
 * @property {string} [type] - Type of survey question.
 * @property {string} label - Label of question.
 * @property {string} [customerProperty] - The customer property that the answer maps to.
 * @property {string[]} [choices] - Choices available to user.
 * @property {boolean} [isMandatory] - Whether answering this question is mandatory.
 */
 
/**
 * @typedef {object} PatchTextStyleProperties
 * @property {string} [color] - Color of the text. (eg. #FFFFFF)
 * @property {string} [font] - Font of the text. (eg. Helvetica)
 * @property {string} [fontSize] - Font size of the text. (eg. '12')
 * @property {string} [textAlign] - Text alignment.
 */
 
/**
 * @typedef {object} PatchWebMessagingOfferFields
 * @property {string} [offerText] - Text value to be used when inviting a visitor to engage with a web messaging offer.
 * @property {AddressableEntityRef} [architectFlow] - Flow to be invoked, overrides default flow when specified.
 */
 
/**
 * @typedef {object} RequestContext
 * @property {RequestContextPattern[]} [patterns] - A list of one or more patterns to match.
 */
 
/**
 * @typedef {object} RequestContextPattern
 * @property {RequestEntityTypeCriteria[]} criteria - A list of one or more criteria to satisfy.
 */
 
/**
 * @typedef {object} RequestCriteria
 * @property {string} key - The criteria key.
 * @property {string[]} values - The criteria values.
 * @property {boolean} [shouldIgnoreCase] - Should criteria be case insensitive.
 * @property {string} [operator] - The comparison operator.
 */
 
/**
 * @typedef {object} RequestDevice
 * @property {string} category - Device category.
 * @property {string} type - Device type (e.g. iPad, iPhone, Other).
 * @property {boolean} [isMobile] - Flag that is true for mobile devices.
 * @property {number} [screenHeight] - Device's screen height.
 * @property {number} [screenWidth] - Device's screen width.
 * @property {number} [screenDensity] - Device's screen density, measured as a scale factor where a value of 1 represents a baseline 1:1 ratio of pixels to logical (device-independent) pixels.
 * @property {string} [fingerprint] - Fingerprint generated by looking at the individual device features.
 * @property {string} osFamily - Operating system family.
 * @property {string} osVersion - Operating system version.
 * @property {string} [manufacturer] - Manufacturer of the device.
 */
 
/**
 * @typedef {object} RequestEntityTypeCriteria
 * @property {string} key - The criteria key.
 * @property {string[]} values - The criteria values.
 * @property {boolean} [shouldIgnoreCase] - Should criteria be case insensitive.
 * @property {string} [operator] - The comparison operator.
 * @property {string} entityType - The entity to match the pattern against.
 */
 
/**
 * @typedef {object} RequestExternalSegment
 * @property {string} id - Identifier for the external segment in the system where it originates from.
 * @property {string} name - Name for the external segment in the system where it originates from.
 * @property {string} [source] - The external system where the segment originates from.
 */
 
/**
 * @typedef {object} RequestJourney
 * @property {RequestJourneyPattern[]} [patterns] - A list of zero or more patterns to match.
 */
 
/**
 * @typedef {object} RequestJourneyPattern
 * @property {RequestCriteria[]} criteria - A list of one or more criteria to satisfy.
 * @property {number} count - The number of times the pattern must match.
 * @property {string} streamType - The stream type for which this pattern can be matched on.
 * @property {string} sessionType - The session type for which this pattern can be matched on.
 * @property {string} [eventName] - The name of the event for which this pattern can be matched on.
 */
 
/**
 * @typedef {object} RequestMapping
 * @property {string} [name] - Name of the Integration Action Attribute to supply the value for
 * @property {string} [attributeType] - Type of the value supplied
 * @property {string} [mappingType] - Method of finding value to use with Attribute
 * @property {string} [value] - Value to supply for the specified Attribute
 */
 
/**
 * @typedef {object} RequestPage
 * @property {string} url - The page URL.
 * @property {string} title - Title of the page.
 * @property {string} [keywords] - Keywords from the HTML <meta> tag of the page.
 * @property {string} [lang] - ISO 639-1 language code for the page as defined in the <html> tag.
 */
 
/**
 * @typedef {object} SdkLibrary
 * @property {string} name - The name of the SDK.
 * @property {string} version - The version of the SDK.
 */
 
/**
 * @typedef {object} ServiceLevel
 * @property {number} [percentage] - The desired Service Level. A value between 0 and 1.
 * @property {number} [durationMs] - Service Level target in milliseconds.
 */
 
/**
 * @typedef {object} TextStyleProperties
 * @property {string} [color] - Color of the text. (eg. #FFFFFF)
 * @property {string} [font] - Font of the text. (eg. Helvetica)
 * @property {string} [fontSize] - Font size of the text. (eg. '12')
 * @property {string} [textAlign] - Text alignment.
 */
 
/**
 * @typedef {object} UrlCondition
 * @property {string[]} values - The URL condition value.
 * @property {string} operator - The comparison operator.
 */
 
/**
 * @typedef {object} WebEventBrowser
 * @property {string} family - Browser family (e.g. Chrome, Safari, Firefox).
 * @property {string} version - Browser version (e.g. 68.0.3440.84).
 * @property {string} [lang] - Language the browser is set to. Must conform to BCP 47.
 */
 
/**
 * @typedef {object} WebEventDevice
 * @property {string} category - Device category.
 * @property {string} type - Device type (e.g. iPad, iPhone, Other).
 * @property {boolean} [isMobile] - Flag that is true for mobile devices.
 * @property {number} [screenHeight] - Device's screen height.
 * @property {number} [screenWidth] - Device's screen width.
 * @property {number} [screenDensity] - Device's screen density, measured as a scale factor where a value of 1 represents a baseline 1:1 ratio of pixels to logical (device-independent) pixels.
 * @property {string} osFamily - Operating system family.
 * @property {string} osVersion - Operating system version.
 * @property {string} [manufacturer] - Manufacturer of the device.
 */
 
/**
 * @typedef {object} WebEventRequest
 * @property {string} customerCookieId - A UUID representing the customer making the request.
 * @property {string} eventName - Represents the action the customer performed. Event types are created for each unique event name and can be faceted on in segment and outcome conditions. A valid event name must only contain alphanumeric characters and underscores. A good event name is typically an object followed by the action performed in past tense, e.g. page_viewed, order_completed, user_registered.
 * @property {RequestPage} page - The webpage where the user interaction occurred.
 * @property {string} [userAgentString] - Override for HTTP User-Agent string from request header (see https://tools.ietf.org/html/rfc1945#section-10.15).
 * @property {WebEventBrowser} [browser] - Customer's browser.
 * @property {WebEventDevice} [device] - Customer's device.
 * @property {string} [searchQuery] - Represents the keywords in a customer search query.
 * @property {string} [ipAddress] - Customer's IP address.
 * @property {string} [referrerUrl] - Identifies the referrer URL that originally generated the request for the current page being viewed.
 * @property {object} [attributes] - User-defined attributes associated with a particular event. These attributes provide additional context about the event. For example, items_in_cart or subscription_level.
 * @property {object} [traits] - Traits are attributes intrinsic to the customer that may be sent in selected events, e.g. email, lastName, cellPhone. Traits are used to collect information for identity resolution. For example, the same person might be using an application on different devices which might create two sessions with different customerIds. Additional information can be provided as traits to help link those two sessions and customers to a single external contact through common identifiers that were submitted via a form fill, message, or other input in both sessions.
 * @property {string} createdDate - UTC timestamp indicating when the event actually took place, events older than an hour will be rejected. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} WebMessagingOfferFields
 * @property {string} [offerText] - Text value to be used when inviting a visitor to engage with a web messaging offer.
 * @property {AddressableEntityRef} [architectFlow] - Flow to be invoked, overrides default flow when specified.
 */
 

/**
 * Journey - Predictive Engagement, Customer Journey
 * @class Journey
 */
class JourneyAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the Journey class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Query for journey aggregates
	 * @async
	 * @param {JourneyAggregationQuery} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/analytics/journeys/aggregates/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postAnalyticsJourneysAggregatesQuery(body) {
		const endpointPath = "/api/v2/analytics/journeys/aggregates/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all sessions for a given external contact.
	 * @async
	 * @param {string} contactId - ExternalContact ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {boolean} [query.includeMerged] -  Indicates whether to return sessions from all external contacts in the merge-set of the given one.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/journey/sessions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsContactJourneySessions(contactId, query) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/journey/sessions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("includeMerged" in query && this.#checkJSONSchemaType(query["includeMerged"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeMerged", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve a single action map.
	 * @async
	 * @param {string} actionMapId - ID of the action map.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actionmaps/{actionMapId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyActionmap(actionMapId) {
		const endpointPath = "/api/v2/journey/actionmaps/{actionMapId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(actionMapId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "actionMapId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.actionMapId = actionMapId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete single action map.
	 * @async
	 * @param {string} actionMapId - ID of the action map.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actionmaps/{actionMapId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteJourneyActionmap(actionMapId) {
		const endpointPath = "/api/v2/journey/actionmaps/{actionMapId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(actionMapId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "actionMapId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.actionMapId = actionMapId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update single action map.
	 * @async
	 * @param {string} actionMapId - ID of the action map.
	 * @param {PatchActionMap} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actionmaps/{actionMapId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchJourneyActionmap(actionMapId, body) {
		const endpointPath = "/api/v2/journey/actionmaps/{actionMapId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(actionMapId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "actionMapId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.actionMapId = actionMapId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all action maps.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @param {string} [query.sortBy] -  Field(s) to sort by. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).
	 * @param {string} [query.filterField] -  Field to filter by (e.g. filterField=weight or filterField=action.actionTemplate.id). Requires 'filterField' to also be set.
	 * @param {string} [query.filterValue] -  Value to filter by. Requires 'filterValue' to also be set.
	 * @param {string[]} [query.actionMapIds] -  IDs of action maps to return. Use of this parameter is not compatible with pagination, filtering, sorting or querying. A maximum of 100 action maps are allowed per request.
	 * @param {string[]} [query.queryFields] -  Action Map field(s) to query on. Requires 'queryValue' to also be set.
	 * @param {string} [query.queryValue] -  Value to query on. Requires 'queryFields' to also be set.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actionmaps" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneyActionmaps(query) {
		const endpointPath = "/api/v2/journey/actionmaps";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("filterField" in query && this.#checkJSONSchemaType(query["filterField"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterField", "string");
			}
			if ("filterValue" in query && this.#checkJSONSchemaType(query["filterValue"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterValue", "string");
			}
			if ("actionMapIds" in query && this.#checkJSONSchemaType(query["actionMapIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "actionMapIds", "array");
			}
			if ("queryFields" in query && this.#checkJSONSchemaType(query["queryFields"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queryFields", "array");
			}
			if ("queryValue" in query && this.#checkJSONSchemaType(query["queryValue"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queryValue", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an action map.
	 * @async
	 * @param {ActionMap} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actionmaps" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyActionmaps(body) {
		const endpointPath = "/api/v2/journey/actionmaps";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve a single action target.
	 * @async
	 * @param {string} actionTargetId - ID of the action target.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actiontargets/{actionTargetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyActiontarget(actionTargetId) {
		const endpointPath = "/api/v2/journey/actiontargets/{actionTargetId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(actionTargetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "actionTargetId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.actionTargetId = actionTargetId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a single action target.
	 * @async
	 * @param {string} actionTargetId - ID of the action target.
	 * @param {PatchActionTarget} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actiontargets/{actionTargetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchJourneyActiontarget(actionTargetId, body) {
		const endpointPath = "/api/v2/journey/actiontargets/{actionTargetId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(actionTargetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "actionTargetId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.actionTargetId = actionTargetId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all action targets.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actiontargets" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneyActiontargets(query) {
		const endpointPath = "/api/v2/journey/actiontargets";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve a single action template.
	 * @async
	 * @param {string} actionTemplateId - ID of the action template.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actiontemplates/{actionTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyActiontemplate(actionTemplateId) {
		const endpointPath = "/api/v2/journey/actiontemplates/{actionTemplateId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(actionTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "actionTemplateId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.actionTemplateId = actionTemplateId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a single action template.
	 * @async
	 * @param {string} actionTemplateId - ID of the action template.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.hardDelete] -  Determines whether Action Template should be soft-deleted (have it's state set to deleted) or hard-deleted (permanently removed). Set to false (soft-delete) by default.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actiontemplates/{actionTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteJourneyActiontemplate(actionTemplateId, query) {
		const endpointPath = "/api/v2/journey/actiontemplates/{actionTemplateId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(actionTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "actionTemplateId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("hardDelete" in query && this.#checkJSONSchemaType(query["hardDelete"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "hardDelete", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.actionTemplateId = actionTemplateId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a single action template.
	 * @async
	 * @param {string} actionTemplateId - ID of the action template.
	 * @param {PatchActionTemplate} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actiontemplates/{actionTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchJourneyActiontemplate(actionTemplateId, body) {
		const endpointPath = "/api/v2/journey/actiontemplates/{actionTemplateId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(actionTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "actionTemplateId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.actionTemplateId = actionTemplateId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all action templates.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @param {string} [query.sortBy] -  Field(s) to sort by. Prefix with '-' for descending (e.g. sortBy=name,-createdDate).
	 * @param {string} [query.mediaType] -  Media type
	 * @param {string} [query.state] -  Action template state.
	 * @param {string[]} [query.queryFields] -  ActionTemplate field(s) to query on. Requires 'queryValue' to also be set.
	 * @param {string} [query.queryValue] -  Value to query on. Requires 'queryFields' to also be set.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actiontemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneyActiontemplates(query) {
		const endpointPath = "/api/v2/journey/actiontemplates";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("mediaType" in query && this.#checkJSONSchemaType(query["mediaType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "mediaType", "string");
			}
			if ("state" in query && this.#checkJSONSchemaType(query["state"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "state", "string");
			}
			if ("queryFields" in query && this.#checkJSONSchemaType(query["queryFields"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queryFields", "array");
			}
			if ("queryValue" in query && this.#checkJSONSchemaType(query["queryValue"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queryValue", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a single action template.
	 * @async
	 * @param {ActionTemplate} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actiontemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyActiontemplates(body) {
		const endpointPath = "/api/v2/journey/actiontemplates";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get status of job.
	 * @async
	 * @param {string} jobId - ID of the job.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actionmaps/estimates/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyActionmapsEstimatesJob(jobId) {
		const endpointPath = "/api/v2/journey/actionmaps/estimates/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get estimates from completed job.
	 * @async
	 * @param {string} jobId - ID of the job.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actionmaps/estimates/jobs/{jobId}/results" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyActionmapsEstimatesJobResults(jobId) {
		const endpointPath = "/api/v2/journey/actionmaps/estimates/jobs/{jobId}/results";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for estimates
	 * @async
	 * @param {ActionMapEstimateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/actionmaps/estimates/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyActionmapsEstimatesJobs(body) {
		const endpointPath = "/api/v2/journey/actionmaps/estimates/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all events for a given session.
	 * @async
	 * @param {string} sessionId - System-generated UUID that represents the session the event is a part of.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.eventType] -  A comma separated list of journey event types to include in the results.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/sessions/{sessionId}/events" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneySessionEvents(sessionId, query) {
		const endpointPath = "/api/v2/journey/sessions/{sessionId}/events";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("eventType" in query && this.#checkJSONSchemaType(query["eventType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "eventType", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for flow paths.
	 * @async
	 * @param {FlowPathsQuery} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/flows/paths/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyFlowsPathsQuery(body) {
		const endpointPath = "/api/v2/journey/flows/paths/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve a single outcome.
	 * @async
	 * @param {string} outcomeId - ID of the outcome.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/outcomes/{outcomeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyOutcome(outcomeId) {
		const endpointPath = "/api/v2/journey/outcomes/{outcomeId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(outcomeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "outcomeId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.outcomeId = outcomeId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an outcome.
	 * @async
	 * @param {string} outcomeId - ID of the outcome.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/outcomes/{outcomeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteJourneyOutcome(outcomeId) {
		const endpointPath = "/api/v2/journey/outcomes/{outcomeId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(outcomeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "outcomeId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.outcomeId = outcomeId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an outcome.
	 * @async
	 * @param {string} outcomeId - ID of the outcome.
	 * @param {PatchOutcome} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/outcomes/{outcomeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchJourneyOutcome(outcomeId, body) {
		const endpointPath = "/api/v2/journey/outcomes/{outcomeId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(outcomeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "outcomeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.outcomeId = outcomeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all outcomes.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @param {string} [query.sortBy] -  Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).
	 * @param {string[]} [query.outcomeIds] -  IDs of outcomes to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 20 outcomes are allowed per request.
	 * @param {string[]} [query.queryFields] -  Outcome field(s) to query on. Requires 'queryValue' to also be set.
	 * @param {string} [query.queryValue] -  Value to query on. Requires 'queryFields' to also be set.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/outcomes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneyOutcomes(query) {
		const endpointPath = "/api/v2/journey/outcomes";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("outcomeIds" in query && this.#checkJSONSchemaType(query["outcomeIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "outcomeIds", "array");
			}
			if ("queryFields" in query && this.#checkJSONSchemaType(query["queryFields"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queryFields", "array");
			}
			if ("queryValue" in query && this.#checkJSONSchemaType(query["queryValue"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queryValue", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an outcome.
	 * @async
	 * @param {OutcomeRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/outcomes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyOutcomes(body) {
		const endpointPath = "/api/v2/journey/outcomes";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve latest outcome score associated with a session for all outcomes.
	 * @async
	 * @param {string} sessionId - ID of the session.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/sessions/{sessionId}/outcomescores" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneySessionOutcomescores(sessionId) {
		const endpointPath = "/api/v2/journey/sessions/{sessionId}/outcomescores";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve a single outcome predictor.
	 * @async
	 * @param {string} predictorId - ID of predictor
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/outcomes/predictors/{predictorId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyOutcomesPredictor(predictorId) {
		const endpointPath = "/api/v2/journey/outcomes/predictors/{predictorId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(predictorId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "predictorId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.predictorId = predictorId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an outcome predictor.
	 * @async
	 * @param {string} predictorId - ID of predictor
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/outcomes/predictors/{predictorId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteJourneyOutcomesPredictor(predictorId) {
		const endpointPath = "/api/v2/journey/outcomes/predictors/{predictorId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(predictorId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "predictorId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.predictorId = predictorId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all outcome predictors.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/outcomes/predictors" endpoint.
	 */
	getJourneyOutcomesPredictors() {
		const endpointPath = "/api/v2/journey/outcomes/predictors";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an outcome predictor.
	 * @async
	 * @param {OutcomePredictorRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/outcomes/predictors" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyOutcomesPredictors(body) {
		const endpointPath = "/api/v2/journey/outcomes/predictors";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve a single segment.
	 * @async
	 * @param {string} segmentId - ID of the segment.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/segments/{segmentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneySegment(segmentId) {
		const endpointPath = "/api/v2/journey/segments/{segmentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(segmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "segmentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.segmentId = segmentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a segment.
	 * @async
	 * @param {string} segmentId - ID of the segment.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/segments/{segmentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteJourneySegment(segmentId) {
		const endpointPath = "/api/v2/journey/segments/{segmentId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(segmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "segmentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.segmentId = segmentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a segment.
	 * @async
	 * @param {string} segmentId - ID of the segment.
	 * @param {PatchSegment} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/segments/{segmentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchJourneySegment(segmentId, body) {
		const endpointPath = "/api/v2/journey/segments/{segmentId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(segmentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "segmentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.segmentId = segmentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all segments.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.sortBy] -  Field(s) to sort by. The response can be sorted by any first level property on the Outcome response. Prefix with '-' for descending (e.g. sortBy=displayName,-createdDate).
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.isActive] -  Determines whether or not to show only active segments.
	 * @param {string[]} [query.segmentIds] -  IDs of segments to return. Use of this parameter is not compatible with pagination, sorting or querying. A maximum of 100 segments are allowed per request.
	 * @param {string[]} [query.queryFields] -  Segment field(s) to query on. Requires 'queryValue' to also be set.
	 * @param {string} [query.queryValue] -  Value to query on. Requires 'queryFields' to also be set.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/segments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneySegments(query) {
		const endpointPath = "/api/v2/journey/segments";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("isActive" in query && this.#checkJSONSchemaType(query["isActive"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "isActive", "boolean");
			}
			if ("segmentIds" in query && this.#checkJSONSchemaType(query["segmentIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "segmentIds", "array");
			}
			if ("queryFields" in query && this.#checkJSONSchemaType(query["queryFields"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queryFields", "array");
			}
			if ("queryValue" in query && this.#checkJSONSchemaType(query["queryValue"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queryValue", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a segment.
	 * @async
	 * @param {JourneySegmentRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/segments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneySegments(body) {
		const endpointPath = "/api/v2/journey/segments";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve a single session.
	 * @async
	 * @param {string} sessionId - ID of the session.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/sessions/{sessionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneySession(sessionId) {
		const endpointPath = "/api/v2/journey/sessions/{sessionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a Journey View by ID
	 * @async
	 * @param {string} viewId - viewId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyView(viewId) {
		const endpointPath = "/api/v2/journey/views/{viewId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a Journey View by ID
	 * @async
	 * @param {string} viewId - viewId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteJourneyView(viewId) {
		const endpointPath = "/api/v2/journey/views/{viewId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a Journey View by ID and version
	 * @async
	 * @param {string} viewId - viewId
	 * @param {string} versionId - versionId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{versionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyViewVersion(viewId, versionId) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{versionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.versionId = versionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a Journey View by ID and version
	 * @async
	 * @param {string} viewId - viewId
	 * @param {string} versionId - versionId
	 * @param {JourneyView} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{versionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putJourneyViewVersion(viewId, versionId, body) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{versionId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.versionId = versionId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a Journey View by ID
	 * @async
	 * @param {string} viewId - viewId
	 * @param {JourneyView} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyViewVersions(viewId, body) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of Journey Views
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @param {string} [query.nameOrCreatedBy] -  Journey View Name or Created By
	 * @param {string} [query.expand] -  Parameter to request additional data to return in Journey payload
	 * @param {string} [query.id] -  Parameter to request a list of Journey Views by id, separated by commas. Limit of 100 items.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneyViews(query) {
		const endpointPath = "/api/v2/journey/views";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("nameOrCreatedBy" in query && this.#checkJSONSchemaType(query["nameOrCreatedBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "nameOrCreatedBy", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new Journey View
	 * @async
	 * @param {JourneyView} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyViews(body) {
		const endpointPath = "/api/v2/journey/views";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a Chart by ID
	 * @async
	 * @param {string} viewId - viewId
	 * @param {string} journeyViewVersion - Journey View Version
	 * @param {string} chartId - chartId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{journeyViewVersion}/charts/{chartId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyViewVersionChart(viewId, journeyViewVersion, chartId) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{journeyViewVersion}/charts/{chartId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(journeyViewVersion, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "journeyViewVersion", "string");
		}

		if (this.#checkJSONSchemaType(chartId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "chartId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.journeyViewVersion = journeyViewVersion;
		apiCallOptions.pathParameters.chartId = chartId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a Chart by ID and version
	 * @async
	 * @param {string} viewId - viewId
	 * @param {string} journeyViewVersion - Journey View Version
	 * @param {string} chartId - chartId
	 * @param {string} chartVersion - chartVersion
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{journeyViewVersion}/charts/{chartId}/versions/{chartVersion}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyViewVersionChartVersion(viewId, journeyViewVersion, chartId, chartVersion) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{journeyViewVersion}/charts/{chartId}/versions/{chartVersion}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(journeyViewVersion, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "journeyViewVersion", "string");
		}

		if (this.#checkJSONSchemaType(chartId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "chartId", "string");
		}

		if (this.#checkJSONSchemaType(chartVersion, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "chartVersion", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.journeyViewVersion = journeyViewVersion;
		apiCallOptions.pathParameters.chartId = chartId;
		apiCallOptions.pathParameters.chartVersion = chartVersion;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get details about the data available for journey queries including oldest and newest event dates
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/data/details" endpoint.
	 */
	getJourneyViewsDataDetails() {
		const endpointPath = "/api/v2/journey/views/data/details";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Validate whether an encoding exist for a label/value combination.
	 * @async
	 * @param {Label[]} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/encodings/validate" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyViewsEncodingsValidate(body) {
		const endpointPath = "/api/v2/journey/views/encodings/validate";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an Event Definition
	 * @async
	 * @param {string} eventDefinitionId - Event Definition ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/eventdefinitions/{eventDefinitionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyViewsEventdefinition(eventDefinitionId) {
		const endpointPath = "/api/v2/journey/views/eventdefinitions/{eventDefinitionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(eventDefinitionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "eventDefinitionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.eventDefinitionId = eventDefinitionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of Event Definitions
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/eventdefinitions" endpoint.
	 */
	getJourneyViewsEventdefinitions() {
		const endpointPath = "/api/v2/journey/views/eventdefinitions";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the latest job of a journey view version.
	 * @async
	 * @param {string} viewId - Journey View Id
	 * @param {string} journeyVersionId - Journey View Version
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs/latest" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyViewVersionJobsLatest(viewId, journeyVersionId) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs/latest";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(journeyVersionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "journeyVersionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.journeyVersionId = journeyVersionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the job for a journey view version.
	 * @async
	 * @param {string} viewId - Journey View Id
	 * @param {string} journeyVersionId - Journey View Version
	 * @param {string} jobId - JobId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyViewVersionJob(viewId, journeyVersionId, jobId) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(journeyVersionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "journeyVersionId", "string");
		}

		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.journeyVersionId = journeyVersionId;
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the job for a journey view version. Only the status can be changed and only to Cancelled
	 * @async
	 * @param {string} viewId - Journey View Id
	 * @param {string} journeyVersionId - Journey View Version
	 * @param {string} jobId - JobId
	 * @param {JourneyViewJob} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchJourneyViewVersionJob(viewId, journeyVersionId, jobId, body) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs/{jobId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(journeyVersionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "journeyVersionId", "string");
		}

		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.journeyVersionId = journeyVersionId;
		apiCallOptions.pathParameters.jobId = jobId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the jobs for an organization.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  The number of the page to return
	 * @param {number} [query.pageSize] -  Max number of entities to return
	 * @param {string} [query.interval] -  An absolute timeframe for filtering the jobs, expressed as an ISO 8601 interval.
	 * @param {string} [query.statuses] -  Job statuses to filter for
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneyViewsJobs(query) {
		const endpointPath = "/api/v2/journey/views/jobs";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("interval" in query && this.#checkJSONSchemaType(query["interval"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "interval", "string");
			}
			if ("statuses" in query && this.#checkJSONSchemaType(query["statuses"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "statuses", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Submit a job request for a journey view version.
	 * @async
	 * @param {string} viewId - Journey View Id
	 * @param {string} journeyVersionId - Journey View Version
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postJourneyViewVersionJobs(viewId, journeyVersionId) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(journeyVersionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "journeyVersionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.journeyVersionId = journeyVersionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the chart result associated with a journey view job.
	 * @async
	 * @param {string} viewId - Journey View Id
	 * @param {string} journeyVersionId - Journey View Version
	 * @param {string} jobId - JobId
	 * @param {string} chartId - ChartId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs/{jobId}/results/charts/{chartId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyViewVersionJobResultsChart(viewId, journeyVersionId, jobId, chartId) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{journeyVersionId}/jobs/{jobId}/results/charts/{chartId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(journeyVersionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "journeyVersionId", "string");
		}

		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		if (this.#checkJSONSchemaType(chartId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "chartId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.journeyVersionId = journeyVersionId;
		apiCallOptions.pathParameters.jobId = jobId;
		apiCallOptions.pathParameters.chartId = chartId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the result of a job for a journey view version.
	 * @async
	 * @param {string} viewId - JourneyViewResult id
	 * @param {string} journeyViewVersion - Journey View Version
	 * @param {string} jobId - Id of the executing job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/versions/{journeyViewVersion}/jobs/{jobId}/results" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyViewVersionJobResults(viewId, journeyViewVersion, jobId) {
		const endpointPath = "/api/v2/journey/views/{viewId}/versions/{journeyViewVersion}/jobs/{jobId}/results";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		if (this.#checkJSONSchemaType(journeyViewVersion, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "journeyViewVersion", "string");
		}

		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.pathParameters.journeyViewVersion = journeyViewVersion;
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the journey schedules for an organization.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  The number of the page to return
	 * @param {number} [query.pageSize] -  Max number of entities to return
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/schedules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneyViewsSchedules(query) {
		const endpointPath = "/api/v2/journey/views/schedules";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the Schedule for a JourneyView
	 * @async
	 * @param {string} viewId - Journey View Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/schedules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getJourneyViewSchedules(viewId) {
		const endpointPath = "/api/v2/journey/views/{viewId}/schedules";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add a new Schedule to a JourneyView
	 * @async
	 * @param {string} viewId - Journey View Id
	 * @param {JourneyViewSchedule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/schedules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyViewSchedules(viewId, body) {
		const endpointPath = "/api/v2/journey/views/{viewId}/schedules";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the Schedule for a JourneyView
	 * @async
	 * @param {string} viewId - Journey View Id
	 * @param {JourneyViewSchedule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/schedules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putJourneyViewSchedules(viewId, body) {
		const endpointPath = "/api/v2/journey/views/{viewId}/schedules";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete the Schedule of a JourneyView
	 * @async
	 * @param {string} viewId - Journey View Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/views/{viewId}/schedules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteJourneyViewSchedules(viewId) {
		const endpointPath = "/api/v2/journey/views/{viewId}/schedules";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(viewId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "viewId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.viewId = viewId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Sends an action event, which is used for changing the state of actions that have been offered to the user.
	 * @async
	 * @param {string} deploymentId - The ID of the deployment sending the beacon.
	 * @param {ActionEventRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/deployments/{deploymentId}/actionevent" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyDeploymentActionevent(deploymentId, body) {
		const endpointPath = "/api/v2/journey/deployments/{deploymentId}/actionevent";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Send a journey app event, used for tracking customer activity on an application.
	 * @async
	 * @param {string} deploymentId - The ID of the deployment sending the app event.
	 * @param {AppEventRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/deployments/{deploymentId}/appevents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyDeploymentAppevents(deploymentId, body) {
		const endpointPath = "/api/v2/journey/deployments/{deploymentId}/appevents";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Send a ping.
	 * @async
	 * @param {string} deploymentId - The ID of the deployment sending the ping.
	 * @param {string} customerCookieId - ID of the customer associated with the ping.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.dl] -  Document Location: 1) Web Page URL if overridden or URL fragment identifier (window.location.hash). OR  2) Application screen name that the ping request was sent from in the app. e.g. 'home' or 'help. Pings without this parameter will not return actions.
	 * @param {string} [query.dt] -  Document Title.  A human readable name for the page or screen
	 * @param {string} [query.appNamespace] -  Namespace of the application (e.g. com.genesys.bancodinero). Used for domain filtering in application sessions
	 * @param {string} [query.sessionId] -  UUID of the customer session. Use the same Session Id for all pings, AppEvents and ActionEvents in the session
	 * @param {number} [query.sinceLastBeaconMilliseconds] -  How long (milliseconds) since the last app event or beacon was sent. The response may return a pollInternvalMilliseconds to reduce the frequency of pings.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/deployments/{deploymentId}/customers/{customerCookieId}/ping" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getJourneyDeploymentCustomerPing(deploymentId, customerCookieId, query) {
		const endpointPath = "/api/v2/journey/deployments/{deploymentId}/customers/{customerCookieId}/ping";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		if (this.#checkJSONSchemaType(customerCookieId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "customerCookieId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("dl" in query && this.#checkJSONSchemaType(query["dl"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dl", "string");
			}
			if ("dt" in query && this.#checkJSONSchemaType(query["dt"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dt", "string");
			}
			if ("appNamespace" in query && this.#checkJSONSchemaType(query["appNamespace"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "appNamespace", "string");
			}
			if ("sessionId" in query && this.#checkJSONSchemaType(query["sessionId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
			}
			if ("sinceLastBeaconMilliseconds" in query && this.#checkJSONSchemaType(query["sinceLastBeaconMilliseconds"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sinceLastBeaconMilliseconds", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.pathParameters.customerCookieId = customerCookieId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Send a journey web event, used for tracking customer activity on a website.
	 * @async
	 * @param {string} deploymentId - The ID of the deployment sending the web event.
	 * @param {WebEventRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/journey/deployments/{deploymentId}/webevents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postJourneyDeploymentWebevents(deploymentId, body) {
		const endpointPath = "/api/v2/journey/deployments/{deploymentId}/webevents";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { JourneyAPI };