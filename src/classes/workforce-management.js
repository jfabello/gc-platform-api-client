/**
 * Adherence, Schedules, Forecasts, Intraday Monitoring, Time Off Requests, Configuration
 * @module gc-platform-api-workforce-management
 * @documentation https://developer.genesys.cloud/useragentman/workforcemanagement/
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.288Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} ActivityPlanAbandonRateImpactOverride
 * @property {number} increaseByPercent - Allowed abandon rate increase percent, from 0.0 to 100.0
 */
 
/**
 * @typedef {object} ActivityPlanAsaImpactOverride
 * @property {number} increaseByPercent - Allowed average speed of answer increase percent, from 0.0 to 100.0
 */
 
/**
 * @typedef {object} ActivityPlanServiceGoalImpactOverrides
 * @property {ActivityPlanAbandonRateImpactOverride} abandonRate - Abandon rate service goal override for the associated activity plan
 * @property {ActivityPlanServiceLevelImpactOverride} serviceLevel - Service level goal override for the associated activity plan
 * @property {ActivityPlanAsaImpactOverride} averageSpeedOfAnswer - Average speed of answer service goal override for the associated activity plan
 */
 
/**
 * @typedef {object} ActivityPlanServiceLevelImpactOverride
 * @property {number} decreaseByPercent - Allowed service level decrease percent, from 0.0 to 100.0
 */
 
/**
 * @typedef {object} AddAdherenceExplanationAdminRequest
 * @property {string} type - The type of the adherence explanation
 * @property {string} startDate - The start timestamp of the adherence explanation in ISO-8601 format
 * @property {number} lengthMinutes - The length of the adherence explanation in minutes
 * @property {string} [notes] - Notes about the adherence explanation
 * @property {string} [status] - The status of the adherence explanation
 */
 
/**
 * @typedef {object} AddAdherenceExplanationAgentRequest
 * @property {string} type - The type of the adherence explanation
 * @property {string} startDate - The start timestamp of the adherence explanation in ISO-8601 format
 * @property {number} lengthMinutes - The length of the adherence explanation in minutes
 * @property {string} [notes] - Notes about the adherence explanation
 */
 
/**
 * @typedef {object} AddShiftTradeRequest
 * @property {string} scheduleId - The ID of the schedule to which the initiating and receiving shifts belong
 * @property {string} initiatingShiftId - The ID of the shift that the initiating user wants to give up
 * @property {string} [receivingUserId] - The ID of the user to whom to send the request (for use in direct trade requests)
 * @property {string} [expiration] - When this shift trade request should expire. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string[]} [acceptableIntervals] - The acceptable intervals the initiating user is willing to accept in trade.  Empty indicates the user is giving up the shift. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 */
 
/**
 * @typedef {object} AddWorkPlanRotationAgentRequest
 * @property {string} userId - The ID of an agent in this work plan rotation
 * @property {DateRangeWithOptionalEnd} dateRange - The date range to which this agent is effective in the work plan rotation
 * @property {number} position - Start position of the work plan in the pattern for this agent in the work plan rotation. Position value starts from 0
 */
 
/**
 * @typedef {object} AddWorkPlanRotationRequest
 * @property {string} name - Name of this work plan rotation
 * @property {DateRangeWithOptionalEnd} dateRange - The date range to which this work plan rotation applies
 * @property {AddWorkPlanRotationAgentRequest[]} [agents] - Agents in this work plan rotation
 * @property {WorkPlanPatternRequest} pattern - Pattern with list of work plan IDs that rotate on a weekly basis
 */
 
/**
 * @typedef {object} AdherenceExplanationNotification
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {UserReference} [agent] - The agent for whom the adherence explanation applies
 * @property {ManagementUnitReference} [managementUnit] - The management unit to which the agent belonged at the time the adherence explanation was submitted
 * @property {BusinessUnitReference} [businessUnit] - The business unit to which the agent belonged at the time the adherence explanation was submitted
 * @property {string} [startDate] - The start date of the adherence explanation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [lengthMinutes] - The length of the adherence explanation in minutes
 * @property {string} [status] - The status of the adherence explanation
 * @property {string} [type] - The type of the adherence explanation
 * @property {string} [notes] - Notes about the adherence explanation
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} AdherenceSettings
 * @property {number} [severeAlertThresholdMinutes] - The threshold in minutes where an alert will be triggered when an agent is considered severely out of adherence
 * @property {number} [adherenceTargetPercent] - Target adherence percentage
 * @property {number} [adherenceExceptionThresholdSeconds] - The threshold in seconds for which agents should not be penalized for being momentarily out of adherence
 * @property {boolean} [nonOnQueueActivitiesEquivalent] - Whether to treat all non-on-queue activities as equivalent for adherence purposes
 * @property {boolean} [trackOnQueueActivity] - Whether to track on-queue activities
 * @property {IgnoredActivityCategories} [ignoredActivityCategories] - Activity categories that should be ignored for adherence purposes
 */
 
/**
 * @typedef {object} AdminBulkUpdateAlternativeShiftTradeState
 * @property {string} tradeId - The ID of the trade for this alternative shift trade
 * @property {string} state - The new alternative shift trade state
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for this alternative shift trade
 */
 
/**
 * @typedef {object} AdminBulkUpdateAlternativeShiftTradeStateRequest
 * @property {AdminBulkUpdateAlternativeShiftTradeState[]} [entities]
 * @property {string} managementUnitId - The ID of the management unit for this alternative shift bulk trade update
 */
 
/**
 * @typedef {object} AdminTimeOffRequestPatch
 * @property {string} [status] - The status of this time off request
 * @property {string} [activityCodeId] - The ID of the activity code associated with this time off request. Activity code must be of the TimeOff category
 * @property {boolean} [paid] - Whether this is a paid time off request
 * @property {string} [notes] - Notes about the time off request
 * @property {string[]} [fullDayManagementUnitDates] - A set of dates in yyyy-MM-dd format. Should be interpreted in the management unit's configured time zone.
 * @property {string[]} [partialDayStartDateTimes] - A set of start date-times in ISO-8601 format for partial day requests.
 * @property {number} [dailyDurationMinutes] - The daily duration of this time off request in minutes
 * @property {number[]} [durationMinutes] - Daily durations for each day of this time off request in minutes
 * @property {number[]} [payableMinutes] - Payable minutes for each day of this time off request
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the time off request
 */
 
/**
 * @typedef {object} AgentBidWorkPlanOverrideRequest
 * @property {string} agentId - The ID of agent
 * @property {string} [overrideWorkPlanId] - The ID of the work plan that overrides the assigned work plan for the agent
 * @property {string} [overrideReason] - The reason for overriding the assigned work plan. This must be null if overrideWorkPlanId is not specified
 */
 
/**
 * @typedef {object} AgentCountRange
 * @property {number} minimum - The minimum value of agent count per work plan
 * @property {number} maximum - The maximum value of agent count per work plan
 */
 
/**
 * @typedef {object} AgentIntegrationAssociationRequest
 * @property {string} agentExternalId - The ID of the agent in external system
 * @property {string} integrationId - The ID of the integration associated with the agent
 * @property {boolean} locked - Whether agentExternalId should be protected from update by automatic processes
 */
 
/**
 * @typedef {object} AgentIntegrationsRequest
 * @property {string} [selectedIntegrationId] - The ID of the integration selected for the agent. If not set, no integration will be used for the agent
 * @property {AgentIntegrationAssociationRequest[]} associatedIntegrations - The list of integrations associated with the agent
 */
 
/**
 * @typedef {object} AgentPossibleWorkShiftsRequest
 * @property {string} weekStartDate - Start date of requested effective work plan, day of week will be in line with business unit start day of week. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {number} weekCount - Number of weeks for which to return possible work shifts
 */
 
/**
 * @typedef {object} AgentQueryAdherenceExplanationsRequest
 * @property {string} startDate - The start date of the range to query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} endDate - The end date of the range to query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} AgentsBidAssignedWorkPlanOverrideRequest
 * @property {AgentBidWorkPlanOverrideRequest[]} agentWorkPlanOverrides - The list of agent work plan overrides
 */
 
/**
 * @typedef {object} AgentTimeOffRequestPatch
 * @property {boolean} [markedAsRead] - Whether this request has been read by the agent
 * @property {string} [status] - The status of this time off request. Can only be canceled if the requested date has not already passed
 * @property {string} [notes] - Notes about the time off request. Can only be edited while the request is still pending
 */
 
/**
 * @typedef {object} AgentUpdateAlternativeShiftTradeRequest
 * @property {string} [state] - The new state of this alternative shift trade
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for this alternative shift trade
 */
 
/**
 * @typedef {object} AgentWorkPlanBiddingPreferenceRequest
 * @property {string} workPlanId - The ID of the work plan that belongs to agent's bid group
 * @property {number} [priority] - The agent's priority for this work plan, with 1 being the best priority. Null if priority is not set for the work plan
 */
 
/**
 * @typedef {object} AlternativeShiftNotification
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} weekDate - The start date of the schedule with which this trade is associated. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} granularity - The granularity of alternative shifts to be traded
 * @property {string} [newState] - The new state of the alternative shift trade, null if there was no change
 * @property {UserReference} initiatingUser - The user who initiated the alternative shift trade
 * @property {string} initiatingShiftDate - The start date and time of the initiating shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {UserReference} [receivingUser] - The user on the receiving side of this alternative shift trade
 * @property {string} [receivingShiftDate] - The start date and time of the receiving alternative shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} AlternativeShiftOffersRequest
 * @property {AlternativeShiftScheduleLookup} schedule - The existing schedule being used to find alternative shift offers
 * @property {string} queryWeekDate - The start date for the week in this schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} AlternativeShiftScheduleLookup
 * @property {string} id - The unique identifier of the schedule
 * @property {string} weekDate - The start date for this schedule in yyyy-MM-dd. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} AlternativeShiftSearchOffersRequest
 * @property {AlternativeShiftScheduleLookup} schedule - The existing schedule being used to find alternative shift offers
 * @property {string} queryWeekDate - The start date for the week in this schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {InitiatingAlternativeShift} initiatingShift - The shift a user puts up for alternative shift offers
 * @property {string[]} [acceptableIntervals] - The acceptable intervals in offers. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 */
 
/**
 * @typedef {object} AvailabilityRange
 * @property {number} earliestStartMinutesFromMidnight - The earliest time of day the activity can be scheduled to begin, in minutes from midnight in the configured time zone of the business unit
 * @property {number} latestEndMinutesFromMidnight - The latest time of day the activity can be scheduled to end, in minutes from midnight in the configured time zone of the business unit
 */
 
/**
 * @typedef {object} AvailableTimeOffRequest
 * @property {string} activityCodeId - The ID for activity code to query available time off minutes
 * @property {LocalDateRange[]} [dateRanges] - A list of date ranges of available time off minutes. A maximum number of date ranges is 30. The maximum total number of days in all ranges is 366. If no ranges are specified, then only the presence of the associated time off limit object will be checked. In such case, if the association exists, then the response will contain a list with of a single element filled with timeOffLimitId only.
 */
 
/**
 * @typedef {object} BidGroupWorkPlanRequest
 * @property {string} workPlanId - The ID of the work plan used in the bid group
 * @property {number} [overrideAgentCount] - The modified agent count for this work plan
 * @property {number} [suggestedAgentCount] - The number of agents needed for this work plan to produce the optimal schedule
 * @property {AgentCountRange} [agentCountRange] - The range of agent slot count per work plan. The suggested slot count must be in agent count range
 */
 
/**
 * @typedef {object} BuAbandonRate
 * @property {boolean} include - Whether to include abandon rate in the associated configuration
 * @property {number} [percent] - Abandon rate percent goal. Required if include == true
 */
 
/**
 * @typedef {object} BuAverageSpeedOfAnswer
 * @property {boolean} include - Whether to include average speed of answer (ASA) in the associated configuration
 * @property {number} [seconds] - The target average speed of answer (ASA) in seconds. Required if include == true
 */
 
/**
 * @typedef {object} BuCopyScheduleRequest
 * @property {string} description - The description for the new schedule
 * @property {string} weekDate - The start weekDate for the new copy of the schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} BuCreateBlankScheduleRequest
 * @property {string} description - The description for the schedule
 * @property {BuShortTermForecastReference} [shortTermForecast] - The forecast to use when generating the schedule.  Note that the forecast must fully encompass the schedule's start week + week count
 * @property {number} weekCount - The number of weeks in the schedule. One extra day is added at the end
 */
 
/**
 * @typedef {object} BuCreateTimeOffLimitRequest
 * @property {string} [staffingGroupId] - The ID of the staffing group to which this time-off limit is associated. It can be either management unit or business unit level staffing group. One of managementUnitId or staffingGroupId must be set. This must not be set if managementUnitId has value
 * @property {string} [managementUnitId] - The ID of the management unit to which this time-off limit is associated. One of managementUnitId or staffingGroupId must be set. This must not be set if staffingGroupId has value
 */
 
/**
 * @typedef {object} BuCreateTimeOffPlanRequest
 * @property {string} name - The name of this time-off plan
 * @property {string[]} [activityCodeIds] - The IDs of activity codes to associate with this time-off plan
 * @property {string} [autoApprovalRule] - Auto approval rule for this time-off plan. Default is Never
 * @property {number} [daysBeforeStartToExpireFromWaitlist] - The number of days before the time-off request start date for when the request will be expired from the waitlist. Default is 0
 * @property {HrisTimeOffType} [hrisTimeOffType] - Time-off type, if this time-off plan is associated with the integration
 * @property {boolean} [enabled] - Whether this time-off plan should be used by agents. Default is true
 * @property {boolean} [countAgainstTimeOffLimits] - Whether this time-off plan should count against time-off limits. Default is false
 * @property {CreateTimeOffPlanBusinessUnitAssociation} [businessUnitAssociation] - Business unit association, if the time-off plan belongs to a business unit. managementUnitAssociation must not be set if this is populated
 * @property {CreateTimeOffPlanManagementUnitAssociation} [managementUnitAssociation] - Management unit association, if the time-off plan belongs to a management unit. businessUnitAssociation must not be set if this is populated
 */
 
/**
 * @typedef {object} BuGenerateScheduleRequest
 * @property {string} description - The description for the schedule
 * @property {BuShortTermForecastReference} [shortTermForecast] - The forecast to use when generating the schedule.  Note that the forecast must fully encompass the schedule's start week + week count
 * @property {number} weekCount - The number of weeks in the schedule. One extra day is added at the end
 * @property {SchedulingOptionsRequest} [options] - Additional scheduling options
 */
 
/**
 * @typedef {object} BuGetCurrentAgentScheduleRequest
 * @property {string} startDate - Start date of the range to search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} endDate - End date of the range to search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} BulkShiftTradeStateUpdateRequest
 * @property {BulkUpdateShiftTradeStateRequestItem[]} entities - The shift trades to update
 */
 
/**
 * @typedef {object} BulkUpdateShiftTradeStateRequestItem
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} state - The new state to set on the shift trade
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the shift trade
 */
 
/**
 * @typedef {object} BuNotificationSettingsRequest
 * @property {BuScheduleNotificationsSettingsRequest} [scheduling] - Schedule notification settings
 */
 
/**
 * @typedef {object} BuQueryAdherenceExplanationsRequest
 * @property {string} startDate - The start date of the range to query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} endDate - The end date of the range to query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string[]} [managementUnitIds] - A filter for which management units to query. Leave empty or omit entirely for all management units in the business unit
 * @property {string[]} [agentIds] - A filter for which agents within the business unit to query. Leave empty or omit entirely for all agents in the business unit (or management units if specified)
 */
 
/**
 * @typedef {object} BuQueryAgentSchedulesRequest
 * @property {string} managementUnitId - The ID of the management unit to query
 * @property {string[]} [userIds] - The IDs of the users to query.  Omit to query all user schedules in the management unit. Note: If teamIds is also specified, only schedules for users in the requested teams will be returned
 * @property {string[]} [teamIds] - The teamIds to request. If null or not set, results will be queried for requested users if applicable or otherwise all users in the management unit
 */
 
/**
 * @typedef {object} BuRescheduleRequest
 * @property {string} [startDate] - The start of the range to reschedule.  Defaults to the beginning of the schedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endDate] - The end of the range to reschedule.  Defaults the the end of the schedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string[]} [agentIds] - The IDs of the agents to consider for rescheduling.  Omit to consider all agents in the specified management units.Agents not in the specified management units will be ignored
 * @property {string[]} [activityCodeIds] - The IDs of the activity codes to consider for rescheduling.  Omit to consider all activity codes
 * @property {string[]} managementUnitIds - The IDs of the management units to reschedule
 * @property {boolean} doNotChangeWeeklyPaidTime - Instructs the scheduler whether it is allowed to change weekly paid time
 * @property {boolean} doNotChangeDailyPaidTime - Instructs the scheduler whether it is allowed to change daily paid time
 * @property {boolean} doNotChangeShiftStartTimes - Instructs the scheduler whether it is allowed to change shift start times
 * @property {boolean} doNotChangeManuallyEditedShifts - Instructs the scheduler whether it is allowed to change manually edited shifts
 * @property {string} [activitySmoothingType] - Overrides the default BU level activity smoothing type for this reschedule run
 * @property {boolean} [induceScheduleVariability] - Overrides the default BU level induce schedule variability setting for this reschedule run
 */
 
/**
 * @typedef {object} BuScheduleNotificationsCategorySettings
 * @property {string} activityCategory - The activity category
 * @property {boolean} earlyReminderEnabled - Indicates if agents should receive early schedule reminder notifications.
 * @property {boolean} onTimeReminderEnabled - Indicates if agents should receive out of adherence notifications.
 */
 
/**
 * @typedef {object} BuScheduleNotificationsSettingsRequest
 * @property {number} [earlyReminderMinutes] - The number of minutes prior to the scheduled event to display an early reminder notification
 * @property {BuScheduleNotificationsCategorySettings[]} [activityCategorySettings] - List of activity category notification settings
 */
 
/**
 * @typedef {object} BuSchedulingSettingsRequest
 * @property {SchedulerMessageTypeSeverity[]} [messageSeverities] - Schedule generation message severity configuration
 * @property {SetWrapperSyncTimeOffProperty} [syncTimeOffProperties] - Synchronize set of time off properties from scheduled activities to time off requests when the schedule is published.
 * @property {WfmServiceGoalImpactSettings} [serviceGoalImpact] - Configures the max percent increase and decrease of service goals for this business unit
 * @property {boolean} [allowWorkPlanPerMinuteGranularity] - Indicates whether or not per minute granularity for scheduling will be enabled for this business unit. Defaults to false.
 * @property {string} [activitySmoothingType] - The activity smoothing type for schedule generation in this business unit
 * @property {boolean} [induceScheduleVariability] - Indicates whether to provide variability in schedule generation
 */
 
/**
 * @typedef {object} BuSearchAgentSchedulesRequest
 * @property {string} startDate - Start date of the range to search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} endDate - End date of the range to search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string[]} [userIds] - IDs of the users for whose schedules to search
 */
 
/**
 * @typedef {object} BuServiceLevel
 * @property {boolean} include - Whether to include service level targets in the associated configuration
 * @property {number} [percent] - Service level target percent answered. Required if include == true
 * @property {number} [seconds] - Service level target answer time. Required if include == true
 */
 
/**
 * @typedef {object} BuSetTimeOffLimitValuesRequest
 * @property {BuTimeOffLimitRange[]} [values]
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the time-off limit
 */
 
/**
 * @typedef {object} BuShortTermForecastingSettings
 * @property {number} [defaultHistoryWeeks] - The number of historical weeks to consider when creating a forecast. This setting is only used for legacy weighted average forecasts
 */
 
/**
 * @typedef {object} BuShortTermForecastReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} weekDate - The weekDate of the short term forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [description] - The description of the short term forecast
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} BuShortTermForecastWeekReference
 * @property {string} id - Forecast id used in this work plan bid
 * @property {string} weekDate - The weekDate of the short term forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [description] - The description of the short term forecast
 * @property {number} weekNumber - The week number used for this bid. First week starts with number 1
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} BusinessUnitReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} BuTimeOffLimitRange
 * @property {string} startDate - Start date of the range. The end date is determined by the size of 'limitMinutesPerDay'. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {number[]} limitMinutesPerDay - The list of time-off limit values in minutes per day. If 'null' is specified, then the day-specific value is cleared. Such a day will have a value of 0
 */
 
/**
 * @typedef {object} BuUpdateTimeOffPlanRequest
 * @property {string} [name] - The name of this time-off plan
 * @property {SetWrapperString} [activityCodeIds] - The IDs of activity codes to associate with this time-off plan
 * @property {string} [autoApprovalRule] - Auto approval rule for this time-off plan
 * @property {number} [daysBeforeStartToExpireFromWaitlist] - The number of days before the time-off request start date for when the request will be expired from the waitlist
 * @property {ValueWrapperHrisTimeOffType} [hrisTimeOffType] - Time-off type, if this time-off plan is associated with the integration
 * @property {boolean} [enabled] - Whether this time-off plan should be used by agents
 * @property {boolean} [countAgainstTimeOffLimits] - Whether this time-off plan should count against time-off limits
 * @property {UpdateTimeOffPlanBusinessUnitAssociation} [businessUnitAssociation] - Business unit association, if the time-off plan belongs to a business unit. managementUnitAssociation must not be set if this is populated
 * @property {UpdateTimeOffPlanManagementUnitAssociation} [managementUnitAssociation] - Management unit association, if the time-off plan belongs to a management unit. businessUnitAssociation must not be set if this is populated
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for this time-off plan
 */
 
/**
 * @typedef {object} CopyBuForecastRequest
 * @property {string} description - The description for the forecast
 * @property {string} weekDate - The start date of the new forecast to create from the existing forecast. Must correspond to the start day of week for the business unit. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} CopyWorkPlan
 * @property {string} name - Name of the copied work plan
 */
 
/**
 * @typedef {object} CopyWorkPlanBid
 * @property {string} name - The name of the new work plan bid
 */
 
/**
 * @typedef {object} CopyWorkPlanRotationRequest
 * @property {string} name - Name to apply to the new copy of the work plan rotation
 */
 
/**
 * @typedef {object} CreateActivityCodeRequest
 * @property {string} name - The name of the activity code
 * @property {string} category - The activity code's category
 * @property {number} [lengthInMinutes] - The default length of the activity in minutes
 * @property {boolean} [countsAsPaidTime] - Whether an agent is paid while performing this activity
 * @property {boolean} [countsAsWorkTime] - Indicates whether or not the activity should be counted as work time
 * @property {boolean} [agentTimeOffSelectable] - Whether an agent can select this activity code when creating or editing a time off request
 * @property {boolean} [countsTowardShrinkage] - Whether or not this activity code counts toward shrinkage calculations
 * @property {boolean} [plannedShrinkage] - Whether this activity code is considered planned or unplanned shrinkage
 * @property {boolean} [interruptible] - Whether this activity code is considered interruptible
 * @property {SecondaryPresence[]} [secondaryPresences] - The secondary presences of this activity code
 */
 
/**
 * @typedef {object} CreateActivityPlanRequest
 * @property {string} name - The name of the activity plan
 * @property {string[]} [managementUnitIds] - The management units to which this activity plan applies. Empty list or null means this activity plan applies to the entire business unit
 * @property {string} [description] - The description of the activity plan
 * @property {string} activityCodeId - The activity code associated with the activity plan
 * @property {string} type - The type of the activity plan
 * @property {number} lengthMinutes - The length in minutes of the activity plan
 * @property {SchedulingPeriod} initialSchedulePeriod - The initial scheduling period for the activity plan
 * @property {GroupSettings} [groupSettings] - Group settings for the activity plan
 * @property {RecurrenceSettings} [recurrenceSettings] - Settings controlling recurrence for the activity plan. If not set the activity plan will only occur once
 * @property {UserSearchRule} [attendeesSearchRule] - Attendee search rule for this activity plan
 * @property {boolean} [facilitated] - Whether the sessions created by this activity plan should be facilitated
 * @property {UserSearchRule} [facilitatorsSearchRule] - Facilitator search rule for this activity plan
 * @property {number} transitionTimeMinutes - Transition time in minutes between facilitated sessions
 * @property {ActivityPlanServiceGoalImpactOverrides} [serviceGoalImpactOverrides] - Allowable service goal impact override settings for this activity plan. If not set the business unit setting will be used
 * @property {string} optimizationObjective - The optimization objective of this activity plan
 * @property {string} state - The state of this activity plan
 * @property {boolean} countsAsPaidTime - Whether the activity should count as paid time
 * @property {FixedAvailability[]} [fixedAvailability] - Fixed availability configuration for the activity plan
 */
 
/**
 * @typedef {object} CreateAdminTimeOffRequest
 * @property {string} status - The status of this time off request
 * @property {UserReference[]} users - A set of IDs for users to associate with this time off request
 * @property {string} activityCodeId - The ID of the activity code associated with this time off request. Activity code must be of the TimeOff category
 * @property {string} [notes] - Notes about the time off request
 * @property {string[]} [fullDayManagementUnitDates] - A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.
 * @property {string[]} [partialDayStartDateTimes] - A set of start date-times in ISO-8601 format for partial day requests.
 * @property {number} dailyDurationMinutes - The daily duration of this time off request in minutes
 * @property {number[]} [durationMinutes] - Daily durations for each day of this time off request in minutes
 * @property {number[]} [payableMinutes] - Payable minutes for each day of this time off request
 * @property {boolean} [paid] - Whether this is a paid time off request
 */
 
/**
 * @typedef {object} CreateAgentTimeOffRequest
 * @property {string} activityCodeId - The ID of the activity code associated with this time off request. Activity code must be of the TimeOff category
 * @property {string} [notes] - Notes about the time off request
 * @property {string[]} [fullDayManagementUnitDates] - A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.
 * @property {string[]} [partialDayStartDateTimes] - A set of start date-times in ISO-8601 format for partial day requests.
 * @property {number} dailyDurationMinutes - The daily duration of this time off request in minutes
 * @property {number[]} [durationMinutes] - Daily durations for each day of this time off request in minutes
 * @property {number[]} [payableMinutes] - Payable minutes for each day of this time off request
 */
 
/**
 * @typedef {object} CreateAlternativeShiftTradeRequest
 * @property {string} jobId - The ID of this alternative shift job
 * @property {string[]} [dropShiftReferenceKeys] - A list of offered shift reference keys an agent wants to drop
 * @property {string[]} [pickupShiftReferenceKeys] - A list of offered shift reference keys an agent wants to pick up
 * @property {string} alternativeShiftTradeGranularity - The granularity of alternative shifts to be traded
 * @property {string} [expirationDate] - The date when the trade will expire in ISO-8601 format. The trade cannot be approved after expiration
 */
 
/**
 * @typedef {object} CreateBusinessUnitRequest
 * @property {string} name - The name of the business unit
 * @property {string} divisionId - The ID of the division to which the business unit should be added
 * @property {CreateBusinessUnitSettingsRequest} settings - Configuration for the business unit
 */
 
/**
 * @typedef {object} CreateBusinessUnitSettingsRequest
 * @property {string} startDayOfWeek - The start day of week for this business unit
 * @property {string} timeZone - The time zone for this business unit, using the Olsen tz database format
 * @property {BuShortTermForecastingSettings} [shortTermForecasting] - Short term forecasting settings
 * @property {BuSchedulingSettingsRequest} [scheduling] - Scheduling settings
 * @property {BuNotificationSettingsRequest} [notifications] - Notification settings
 */
 
/**
 * @typedef {object} CreateManagementUnitApiRequest
 * @property {string} name - The name of the management unit
 * @property {string} [timeZone] - The default time zone to use for this management unit.  Moving to Business Unit
 * @property {string} [startDayOfWeek] - The configured first day of the week for scheduling and forecasting purposes. Moving to Business Unit
 * @property {CreateManagementUnitSettingsRequest} [settings] - The configuration for the management unit.  If omitted, reasonable defaults will be assigned
 * @property {string} [divisionId] - The id of the division to which this management unit belongs.  Defaults to home division ID
 * @property {string} businessUnitId - The id of the business unit to which this management unit belongs
 */
 
/**
 * @typedef {object} CreateManagementUnitSettingsRequest
 * @property {AdherenceSettings} [adherence] - Adherence settings for this management unit
 * @property {ShortTermForecastingSettings} [shortTermForecasting] - Short term forecasting settings for this management unit.  Moving to Business Unit
 * @property {TimeOffSettingsRequest} [timeOff] - Time off request settings for this management unit
 * @property {SchedulingSettingsRequest} [scheduling] - Scheduling settings for this management unit
 * @property {ShiftTradeSettings} [shiftTrading] - Shift trade settings for this management unit
 */
 
/**
 * @typedef {object} CreatePlanningGroupRequest
 * @property {string} name - The name of the planning group
 * @property {RoutePathRequest[]} routePaths - Set of route paths to associate with the planning group
 * @property {string} serviceGoalTemplateId - The ID of the service goal template to associate with this planning group
 */
 
/**
 * @typedef {object} CreateServiceGoalTemplate
 * @property {string} name - The name of the service goal template.
 * @property {BuServiceLevel} [serviceLevel] - Service level targets for this service goal template
 * @property {BuAverageSpeedOfAnswer} [averageSpeedOfAnswer] - Average speed of answer targets for this service goal template
 * @property {BuAbandonRate} [abandonRate] - Abandon rate targets for this service goal template
 * @property {ServiceGoalTemplateImpactOverride} [impactOverride] - Settings controlling max percent increase and decrease of service goals for this service goal template
 */
 
/**
 * @typedef {object} CreateStaffingGroupRequest
 * @property {string} name - The name of the staffing group
 * @property {string[]} [userIds] - The set of user IDs to associate with the staffing group
 * @property {string} [managementUnitId] - The ID of the management unit to which the staffing group users belong. If undefined the staffing group can include users from the entire business unit
 */
 
/**
 * @typedef {object} CreateTimeOffLimitRequest
 * @property {string} [granularity] - Granularity choice for time off limit. If not specified, 'Daily' is assumed
 * @property {number} [defaultLimitMinutes] - The default limit value in minutes per granularity. If not specified, then 0 is assumed, which means there are no time off minutes available
 */
 
/**
 * @typedef {object} CreateTimeOffPlanBusinessUnitAssociation
 * @property {string[]} [managementUnitIds] - The IDs of management units to which this time-off plan applies. This must not be set if staffingGroupIds is populated
 * @property {string[]} [staffingGroupIds] - The IDs of staffing groups to which this time-off plan applies. This must not be set if managementUnitIds is populated
 */
 
/**
 * @typedef {object} CreateTimeOffPlanManagementUnitAssociation
 * @property {string} managementUnitId - The ID of the management unit to which this time-off plan belongs
 * @property {string[]} [staffingGroupIds] - A IDs of staffing groups to which this time-off plan applies. If not defined, the plan is applied to the management unit
 */
 
/**
 * @typedef {object} CreateTimeOffPlanRequest
 * @property {string} name - The name of this time off plan.
 * @property {string[]} [activityCodeIds] - The set of activity code IDs to associate with this time off plan.
 * @property {string[]} [timeOffLimitIds] - The set of time off limit IDs to associate with this time off plan.
 * @property {string} autoApprovalRule - Auto approval rule for the time off plan.
 * @property {number} [daysBeforeStartToExpireFromWaitlist] - The number of days before the time off request start date for when the request will be expired from the waitlist.
 * @property {HrisTimeOffType} [hrisTimeOffType] - Time off type, if this time off plan is associated with the integration.
 * @property {boolean} active - Whether this time off plan should be used by agents.
 */
 
/**
 * @typedef {object} CreateWorkPlan
 * @property {string} name - Name of this work plan
 * @property {boolean} [enabled] - Whether the work plan is enabled for scheduling
 * @property {boolean} [constrainWeeklyPaidTime] - Whether the weekly paid time constraint is enabled for this work plan
 * @property {boolean} [flexibleWeeklyPaidTime] - Whether the weekly paid time constraint is flexible for this work plan
 * @property {number} [weeklyExactPaidMinutes] - Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false
 * @property {number} [weeklyMinimumPaidMinutes] - Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
 * @property {number} [weeklyMaximumPaidMinutes] - Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
 * @property {boolean} [constrainPaidTimeGranularity] - Whether paid time granularity should be constrained for this workplan
 * @property {number} [paidTimeGranularityMinutes] - Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true
 * @property {boolean} [constrainMinimumTimeBetweenShifts] - Whether the minimum time between shifts constraint is enabled for this work plan
 * @property {number} [minimumTimeBetweenShiftsMinutes] - Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true
 * @property {number} [maximumDays] - Maximum number days in a week allowed to be scheduled for this work plan
 * @property {number} [minimumConsecutiveNonWorkingMinutesPerWeek] - Minimum amount of consecutive non working minutes per week that agents who are assigned this work plan are allowed to have off
 * @property {boolean} [constrainMaximumConsecutiveWorkingWeekends] - Whether to constrain the maximum consecutive working weekends
 * @property {number} [maximumConsecutiveWorkingWeekends] - The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work
 * @property {number} [minimumWorkingDaysPerWeek] - The minimum number of days that agents assigned to a work plan must work per week
 * @property {boolean} [constrainMaximumConsecutiveWorkingDays] - Whether to constrain the maximum consecutive working days
 * @property {number} [maximumConsecutiveWorkingDays] - The maximum number of consecutive days that agents assigned to this work plan are allowed to work. Used if constrainMaximumConsecutiveWorkingDays == true
 * @property {number} [minimumShiftStartDistanceMinutes] - The time period in minutes for the duration between the start times of two consecutive working days
 * @property {number} [minimumDaysOffPerPlanningPeriod] - Minimum days off in the planning period
 * @property {number} [maximumDaysOffPerPlanningPeriod] - Maximum days off in the planning period
 * @property {number} [minimumPaidMinutesPerPlanningPeriod] - Minimum paid minutes in the planning period
 * @property {number} [maximumPaidMinutesPerPlanningPeriod] - Maximum paid minutes in the planning period
 * @property {SetWrapperDayOfWeek} [optionalDays] - Optional days to schedule for this work plan
 * @property {string} [shiftStartVarianceType] - This constraint ensures that an agent starts each workday within a user-defined time threshold
 * @property {ListWrapperShiftStartVariance} [shiftStartVariances] - Variance in minutes among start times of shifts in this work plan
 * @property {CreateWorkPlanShift[]} [shifts] - Shifts in this work plan
 * @property {UserReference[]} [agents] - Agents in this work plan
 */
 
/**
 * @typedef {object} CreateWorkPlanActivity
 * @property {string} [activityCodeId] - ID of the activity code associated with this activity
 * @property {string} [description] - Description of the activity
 * @property {number} [lengthMinutes] - Length of the activity in minutes
 * @property {boolean} [startTimeIsRelativeToShiftStart] - Whether the start time of the activity is relative to the start time of the shift it belongs to
 * @property {boolean} [flexibleStartTime] - Whether the start time of the activity is flexible
 * @property {number} [earliestStartTimeMinutes] - Earliest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true
 * @property {number} [latestStartTimeMinutes] - Latest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true
 * @property {number} [exactStartTimeMinutes] - Exact activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == false
 * @property {number} [startTimeIncrementMinutes] - Increment in offset minutes that would contribute to different possible start times for the activity
 * @property {boolean} [countsAsPaidTime] - Whether the activity is paid
 * @property {boolean} [countsAsContiguousWorkTime] - Whether the activity duration is counted towards contiguous work time
 * @property {number} [minimumLengthFromShiftStartMinutes] - The minimum duration between shift start and shift item (e.g., break or meal) start in minutes
 * @property {number} [minimumLengthFromShiftEndMinutes] - The minimum duration between shift item (e.g., break or meal) end and shift end in minutes
 */
 
/**
 * Create work plan bid model
 * @typedef {object} CreateWorkPlanBid
 * @property {string} name - The name of the work plan bid
 * @property {BuShortTermForecastWeekReference} [forecast] - The selected forecast in this work plan bid
 * @property {string} bidWindowStartDate - The bid start date where agents start participate in work plan bidding in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} bidWindowEndDate - The bid end date in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} effectiveDate - The date when agents will be assigned to the new work plan in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} agentRankingType - The type of agent ranking selected for this bid
 * @property {string} rankingTiebreakerType - Ranking tiebreaker to be used
 * @property {string[]} workPlanFieldsVisibleToAgents - The work plan fields visible to agents whenever work plan preferences are made
 */
 
/**
 * @typedef {object} CreateWorkPlanShift
 * @property {string} name - Name of the shift
 * @property {SetWrapperDayOfWeek} [days] - Days of the week applicable for this shift
 * @property {boolean} [flexibleStartTime] - Whether the start time of the shift is flexible
 * @property {number} [exactStartTimeMinutesFromMidnight] - Exact start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == false
 * @property {number} [earliestStartTimeMinutesFromMidnight] - Earliest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
 * @property {number} [latestStartTimeMinutesFromMidnight] - Latest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
 * @property {boolean} [constrainStopTime] - Whether the latest stop time constraint for the shift is enabled.  Deprecated, use constrainLatestStopTime instead
 * @property {boolean} [constrainLatestStopTime] - Whether the latest stop time constraint for the shift is enabled
 * @property {number} [latestStopTimeMinutesFromMidnight] - Latest stop time of the shift defined as offset minutes from midnight. Used if constrainStopTime == true
 * @property {boolean} [constrainEarliestStopTime] - Whether the earliest stop time constraint for the shift is enabled
 * @property {number} [earliestStopTimeMinutesFromMidnight] - This is the earliest time a shift can end
 * @property {number} [startIncrementMinutes] - Increment in offset minutes that would contribute to different possible start times for the shift. Used if flexibleStartTime == true
 * @property {boolean} [flexiblePaidTime] - Whether the paid time setting for the shift is flexible
 * @property {number} [exactPaidTimeMinutes] - Exact paid time in minutes configured for the shift. Used if flexiblePaidTime == false
 * @property {number} [minimumPaidTimeMinutes] - Minimum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
 * @property {number} [maximumPaidTimeMinutes] - Maximum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
 * @property {boolean} [constrainContiguousWorkTime] - Whether the contiguous time constraint for the shift is enabled
 * @property {number} [minimumContiguousWorkTimeMinutes] - Minimum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
 * @property {number} [maximumContiguousWorkTimeMinutes] - Maximum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
 * @property {boolean} [constrainDayOff] - Whether day off rule is enabled
 * @property {string} [dayOffRule] - The day off rule for agents to have next day off or previous day off. used if constrainDayOff = true
 * @property {CreateWorkPlanActivity[]} [activities] - Activities configured for this shift
 */
 
/**
 * @typedef {object} CurrentUserScheduleRequestBody
 * @property {string} startDate - Beginning of the range of schedules to fetch, in ISO-8601 format
 * @property {string} endDate - End of the range of schedules to fetch, in ISO-8601 format
 * @property {boolean} [loadFullWeeks] - Whether to load the full week's schedule (for the current user) of any week overlapping the start/end date query parameters, defaults to false
 */
 
/**
 * @typedef {object} CurrentUserTimeOffIntegrationStatusRequest
 * @property {string[]} timeOffRequestIds - A list of time off request IDs
 */
 
/**
 * @typedef {object} DateRange
 * @property {string} [startDate] - The inclusive start of a date range in yyyy-MM-dd format. Should be interpreted in the management unit's configured time zone.
 * @property {string} [endDate] - The inclusive end of a date range in yyyy-MM-dd format. Should be interpreted in the management unit's configured time zone.
 */
 
/**
 * @typedef {object} DateRangeWithOptionalEnd
 * @property {string} startBusinessUnitDate - The start date for work plan rotation or an agent, interpreted in the business unit's time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [endBusinessUnitDate] - The end date for work plan rotation or an agent, interpreted in the business unit's time zone. Null denotes open ended date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} DeletableUserReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {boolean} [delete] - If marked true, the user will be removed an associated entity
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} EstimateAvailableFullDayTimeOffRequest
 * @property {string} date - Date in yyyy-MM-dd format for full day request. Should be interpreted in the business unit's configured time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {number} [requestedDurationMinutes] - A requested length of time off request in minutes. If the value is null, then the system will use activity code length setting
 */
 
/**
 * @typedef {object} EstimateAvailablePartialDayTimeOffRequest
 * @property {string} date - Start date-time in ISO-8601 format for partial day request
 * @property {number} [requestedDurationMinutes] - A requested length of time off request in minutes. If the value is null, then the system will use activity code length setting
 */
 
/**
 * @typedef {object} EstimateAvailableTimeOffRequest
 * @property {EstimateAvailableFullDayTimeOffRequest[]} [fullDayDates] - Full day dates. partialDayDates must be empty if this field is populated
 * @property {EstimateAvailablePartialDayTimeOffRequest[]} [partialDayDates] - Partial day dates. fullDayDates must be empty if this field is populated
 * @property {string} activityCodeId - The ID of the activity code associated with the time off request. Activity code must be of the TimeOff category
 * @property {boolean} paid - Whether this estimate is for a paid time off request
 */
 
/**
 * @typedef {object} FixedAvailability
 * @property {AvailabilityRange} [availabilityRange] - The range of time of day the activity can be scheduled
 * @property {RequiredLocalDateRange} [dateRange] - The range of date for which the activity plan could be scheduled
 * @property {string[]} [daysOfWeek] - The days of week available for scheduling. Empty list or null means daysOfWeek is not considered
 */
 
/**
 * @typedef {object} GenerateBuForecastRequest
 * @property {string} description - The description for the forecast
 * @property {number} [weekCount] - The number of weeks this forecast covers
 * @property {boolean} [canUseForScheduling] - Whether this forecast can be used for scheduling
 */
 
/**
 * @typedef {object} GetAgentsWorkPlansRequest
 * @property {string[]} agentIds - The list of agent IDs
 * @property {string} startDate - The start of a date in yyyy-MM-dd format. Response contains values rolled back to nearest BU start day of week. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {number} weekCount - The number of weeks to query
 */
 
/**
 * @typedef {object} GroupSettings
 * @property {number} [minimumGroupSize] - The minimum size of a group for a session
 * @property {number} [maximumGroupSize] - The maximum size of a group for a session
 * @property {number} [maximumTotalSessions] - The maximum total number of sessions
 * @property {number} [maximumConcurrentSessions] - The maximum number of sessions that can be scheduled concurrently
 */
 
/**
 * @typedef {object} HistoricalImportDeleteFilesJobRequest
 * @property {string[]} requestIds - List of requestIds to be deleted. Max number of RequestIds should be 100
 */
 
/**
 * @typedef {object} HrisTimeOffType
 * @property {string} id - The ID of the time off type configured in integration.
 * @property {string} name - The name of the time off type configured in integration.
 * @property {string} hrisIntegrationId - The ID of the integration.
 * @property {string} [secondaryId] - Secondary ID of the time off type, if configured in integration.
 */
 
/**
 * @typedef {object} IgnoredActivityCategories
 * @property {string[]} [values] - Activity categories list
 */
 
/**
 * @typedef {object} InitiatingAlternativeShift
 * @property {string} id - The ID of the shift from a user's schedule
 * @property {string} startDate - The start date for the shift in the user's schedule in ISO-8601 format. For example: YYYY-MM-DDThh:mm:ss.SSSZ
 */
 
/**
 * @typedef {object} IntradayPlanningGroupRequest
 * @property {string} businessUnitDate - Requested date in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string[]} categories - The metric categories
 * @property {string[]} [planningGroupIds] - The IDs of the planning groups for which to fetch data.  Omitting or passing an empty list will return all available planning groups
 * @property {number} [intervalLengthMinutes] - The period/interval in minutes for which to aggregate the data. Required, defaults to 15
 */
 
/**
 * @typedef {object} ListWrapperAgentWorkPlanField
 * @property {string[]} [values]
 */
 
/**
 * @typedef {object} ListWrapperAlternativeShiftBuSettingsActivityCategory
 * @property {string[]} [values]
 */
 
/**
 * @typedef {object} ListWrapperAlternativeShiftBuSettingsGranularity
 * @property {string[]} [values]
 */
 
/**
 * @typedef {object} ListWrapperBidGroupWorkPlanRequest
 * @property {BidGroupWorkPlanRequest[]} [values]
 */
 
/**
 * @typedef {object} ListWrapperFixedAvailability
 * @property {FixedAvailability[]} [values]
 */
 
/**
 * @typedef {object} ListWrapperInterval
 * @property {string[]} [values] - Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
 */
 
/**
 * @typedef {object} ListWrapperSecondaryPresence
 * @property {SecondaryPresence[]} [values]
 */
 
/**
 * @typedef {object} ListWrapperShiftStartVariance
 * @property {ShiftStartVariance[]} [values]
 */
 
/**
 * @typedef {object} ListWrapperString
 * @property {string[]} [values]
 */
 
/**
 * @typedef {object} LocalDateRange
 * @property {string} [startDate] - The inclusive start of a date range in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [endDate] - The inclusive end of a date range in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} ManagementUnitReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ManagementUnitSettingsRequest
 * @property {AdherenceSettings} [adherence] - Adherence settings for this management unit
 * @property {ShortTermForecastingSettings} [shortTermForecasting] - Short term forecasting settings for this management unit.  Moving to Business Unit
 * @property {TimeOffSettingsRequest} [timeOff] - Time off request settings for this management unit
 * @property {SchedulingSettingsRequest} [scheduling] - Scheduling settings for this management unit
 * @property {ShiftTradeSettings} [shiftTrading] - Shift trade settings for this management unit
 * @property {WfmVersionedEntityMetadata} metadata - Version info metadata for the associated management unit
 */
 
/**
 * @typedef {object} MatchShiftTradeRequest
 * @property {string} receivingScheduleId - The ID of the schedule with which the shift trade is associated
 * @property {string} [receivingShiftId] - The ID of the shift the receiving user is giving up in trade, if applicable
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the shift trade
 */
 
/**
 * @typedef {object} MonthlyPlanningPeriodSettings
 * @property {string} startDate - Start date of the monthly planning period in yyyy-MM-dd format. The date must represent the first day of the given month. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} MoveAgentsRequest
 * @property {string[]} userIds - The list of user ids to move
 * @property {string} [destinationManagementUnitId] - The id of the management unit for which the move will be performed. To remove users from their management unit this should be set to null.
 */
 
/**
 * @typedef {object} MoveManagementUnitRequest
 * @property {string} businessUnitId - The ID of the business unit to which to move the management unit
 */
 
/**
 * @typedef {object} PatchBuReschedulingOptionsManagementUnitRequest
 * @property {string} managementUnitId - The management unit portion of the rescheduling run to update
 * @property {boolean} [applied] - Whether to mark the run as applied.  Only applies to reschedule runs.  Once applied, a run cannot be un-marked as applied
 */
 
/**
 * @typedef {object} PatchBuReschedulingOptionsRequest
 * @property {PatchBuReschedulingOptionsManagementUnitRequest[]} [managementUnits] - Per-management unit rescheduling options to update
 */
 
/**
 * @typedef {object} PatchBuScheduleRunRequest
 * @property {PatchBuReschedulingOptionsRequest} [reschedulingOptions] - The rescheduling options to update
 */
 
/**
 * @typedef {object} PatchShiftTradeRequest
 * @property {ValueWrapperString} [receivingUserId] - Update the ID of the receiving user to direct the request at a specific user, or set the wrapped id to null to open up a trade to be matched by any user.
 * @property {ValueWrapperDate} [expiration] - Update the expiration time for this shift trade.
 * @property {ListWrapperInterval} [acceptableIntervals] - Update the acceptable intervals the initiating user is willing to accept in trade. Setting the enclosed list to empty will make this a one sided trade request
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata
 */
 
/**
 * @typedef {object} PlanningPeriodSettings
 * @property {number} weekCount - Planning period length in weeks
 * @property {string} startDate - Start date of the planning period in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} ProcessScheduleUpdateUploadRequest
 * @property {string} uploadKey - The uploadKey provided by the request to get an upload URL
 * @property {string[]} [teamIds] - The list of teams to which the users being modified belong. Only required if the requesting user has conditional permission to wfm:schedule:edit
 * @property {string[]} [managementUnitIdsForAddedTeamUsers] - The set of muIds to which agents belong if agents are being newly added to the schedule, if the requesting user has conditional permission to wfm:schedule:edit
 */
 
/**
 * Query integrations for agents request
 * @typedef {object} QueryAgentsIntegrationsRequest
 * @property {string[]} agentIds - The IDs of the agents to query associated integrations
 */
 
/**
 * @typedef {object} QueryTimeOffIntegrationStatusRequest
 * @property {TimeOffRequestLookup[]} timeOffRequestLookups - A list of time off request lookups
 */
 
/**
 * @typedef {object} QueryTimeOffLimitValuesRequest
 * @property {string} [timeOffLimitId] - The time off limit object id to retrieve values for. Required if activityCodeId is not specified
 * @property {string} [activityCodeId] - The activity code id to filter the affected limit objects by. Required if timeOffLimitId is not specified
 * @property {LocalDateRange[]} dateRanges - The list of the date ranges to return time off limit, allocated and waitlisted minutes. The valid number of date ranges is between 1 and 30. Maximum total number of days in all ranges in 366.
 */
 
/**
 * @typedef {object} QueryUserStaffingGroupListRequest
 * @property {string[]} userIds - The set of user IDs to fetch associated staffing groups
 */
 
/**
 * @typedef {object} QueryWaitlistPositionsRequest
 * @property {UserTimeOffRequestReference[]} timeOffRequests - The list of the time off request ids for which to fetch the daily waitlist positions
 */
 
/**
 * @typedef {object} RecurrenceEndSettings
 * @property {string} [lastDate] - The end date of the recurrence for the activity plan, in ISO-8601 format. Only one of lastDate or noEndDate may be set
 * @property {boolean} [noEndDate] - Whether this activity plan should continue indefinitely. If set to true, lastDate must not be set
 */
 
/**
 * @typedef {object} RecurrencePeriod
 * @property {number} magnitude - The period of the activity plan in granularity units
 * @property {string} granularity - The granularity unit to interpret the period of this activity plan
 */
 
/**
 * @typedef {object} RecurrenceSettings
 * @property {RecurrencePeriod} recurrencePeriod - The recurrence period of the activity plan
 * @property {RecurrencePeriod} minimumTimeBetweenOccurrences - Constraint indicating the minimum time in hours between recurrences of the activity plan
 * @property {RecurrenceEndSettings} endAfter - Settings controlling when to end the recurrence for the activity plan
 */
 
/**
 * @typedef {object} RequiredLocalDateRange
 * @property {string} startDate - The inclusive start of a date range in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} endDate - The inclusive end of a date range in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} RoutePathRequest
 * @property {string} queueId - The ID of the queue to associate with the route path
 * @property {string} mediaType - The media type of the given queue to associate with the route path
 * @property {string} [languageId] - The ID of the language to associate with the route path
 * @property {string[]} [skillIds] - The set of skill IDs to associate with the route path
 * @property {SourcePlanningGroupRequest} [sourcePlanningGroup] - The planning group from which to take route paths. This property is only needed if a route path already exists in another planning group.Note that taking a route path from another planning group will modify the other planning group
 */
 
/**
 * @typedef {object} SchedulerMessageTypeSeverity
 * @property {string} [type] - The type of the message
 * @property {string} [severity] - The severity of the message
 */
 
/**
 * @typedef {object} SchedulingNoForecastOptionsRequest
 * @property {string} [shiftLength] - The shift length option to apply if no forecast is supplied
 * @property {string} [shiftStart] - The shift start option to apply if no forecast is supplied
 */
 
/**
 * @typedef {object} SchedulingOptionsRequest
 * @property {SchedulingNoForecastOptionsRequest} [noForecastOptions] - Schedule generation options to apply if no forecast is supplied
 * @property {string} [activitySmoothingType] - Overrides the default BU level activity smoothing type for this schedule generation
 * @property {boolean} [induceScheduleVariability] - Overrides the default BU level induce schedule variability setting for this schedule generation
 */
 
/**
 * @typedef {object} SchedulingPeriod
 * @property {string} earliestStartDate - The earliest date the associated activity plan can begin, in YYYY-MM-DD format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} latestEndDate - The latest date the associated activity plan can end, in YYYY-MM-DD format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} SchedulingSettingsRequest
 * @property {number} [maxOccupancyPercentForDeferredWork] - Max occupancy percent for deferred work
 * @property {number} [defaultShrinkagePercent] - Default shrinkage percent for scheduling
 * @property {ShrinkageOverrides} [shrinkageOverrides] - Shrinkage overrides for scheduling
 * @property {ValueWrapperPlanningPeriodSettings} [planningPeriod] - Planning period settings for scheduling. Only one of planningPeriod or monthlyPlanningPeriod may be defined
 * @property {ValueWrapperMonthlyPlanningPeriodSettings} [monthlyPlanningPeriod] - Monthly planning period setting for scheduling. Only one of planningPeriod or monthlyPlanningPeriod may be defined
 * @property {string} [startDayOfWeekend] - Start day of weekend for scheduling
 */
 
/**
 * @typedef {object} SearchAlternativeShiftTradesRequest
 * @property {string[]} [managementUnitIds] - The list of management unit IDs for this alternative shift trade search. Either managementUnitIds or agentIds is required
 * @property {string[]} [agentIds] - The list of agent IDs for this alternative shift trade search. Either managementUnitIds or agentIds is required
 */
 
/**
 * @typedef {object} SearchShiftTradesRequest
 * @property {string} receivingScheduleId - The ID of the schedule for which to search for available shift trades
 * @property {string[]} [receivingShiftIds] - The IDs of shifts that the receiving user would potentially be willing to trade. If empty, only returns one sided trades (pick up a shift)
 */
 
/**
 * @typedef {object} SecondaryPresence
 * @property {string} id - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ServiceGoalTemplateImpactOverride
 * @property {boolean} enabled - Whether service goal overrides are enabled for this service goal template
 * @property {WfmServiceGoalImpactSettings} impact - Settings controlling max percent increase and decrease of service goals for this service goal template
 */
 
/**
 * @typedef {object} SetTimeOffIntegrationStatusRequest
 * @property {string} integrationStatus - The integration status value for the time off request
 */
 
/**
 * @typedef {object} SetTimeOffLimitValuesRequest
 * @property {TimeOffLimitRange[]} [values]
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the time off limit
 */
 
/**
 * @typedef {object} SetWrapperDayOfWeek
 * @property {string[]} [values]
 */
 
/**
 * @typedef {object} SetWrapperRoutePathRequest
 * @property {RoutePathRequest[]} [values]
 */
 
/**
 * @typedef {object} SetWrapperString
 * @property {string[]} [values]
 */
 
/**
 * @typedef {object} SetWrapperSyncTimeOffProperty
 * @property {string[]} [values]
 */
 
/**
 * @typedef {object} ShiftStartVariance
 * @property {string[]} applicableDays - Days for which shift start variance is configured
 * @property {number} maxShiftStartVarianceMinutes - Maximum variance in minutes across shift starts
 */
 
/**
 * @typedef {object} ShiftTradeActivityRule
 * @property {string} activityCategory - The activity category to which to apply this rule
 * @property {string} action - The action this rule invokes
 * @property {string} [activityCodeIdReplacement] - The activity code ID with which to replace activities belonging to the original category if applicable (required if action == Replace, must be a default activity code ID)
 */
 
/**
 * @typedef {object} ShiftTradeNotification
 * @property {string} [weekDate] - The start week date of the initiating shift of the shift trade in yyyy-MM-dd format
 * @property {string} [tradeId] - The ID of the shift trade
 * @property {boolean} [oneSided] - Whether this is a one sided shift trade
 * @property {string} [newState] - The new state of the shift trade, null if there was no change
 * @property {UserReference} [initiatingUser] - The user who initiated the shift trade
 * @property {string} [initiatingShiftDate] - The start date and time of the initiating shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {UserReference} [receivingUser] - The user on the receiving side of this shift trade (null if not matched)
 * @property {string} [receivingShiftDate] - The start date and time of the receiving shift (null if not matched or if one-sided. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} ShiftTradeSettings
 * @property {boolean} [enabled] - Whether shift trading is enabled for this management unit
 * @property {boolean} [autoReview] - Whether automatic shift trade review is enabled according to the rules defined in for this management unit
 * @property {boolean} [allowDirectTrades] - Whether direct shift trades between agents are allowed
 * @property {number} [minHoursInFuture] - The minimum number of hours in the future shift trades are allowed
 * @property {string} [unequalPaid] - How to handle shift trades which involve unequal paid times
 * @property {string} [oneSided] - How to handle one-sided shift trades
 * @property {string} [weeklyMinPaidViolations] - How to handle shift trades which result in violations of weekly minimum paid time constraint
 * @property {string} [weeklyMaxPaidViolations] - How to handle shift trades which result in violations of weekly maximum paid time constraint
 * @property {boolean} [requiresMatchingQueues] - Whether to constrain shift trades to agents with matching queues
 * @property {boolean} [requiresMatchingLanguages] - Whether to constrain shift trades to agents with matching languages
 * @property {boolean} [requiresMatchingSkills] - Whether to constrain shift trades to agents with matching skills
 * @property {boolean} [requiresMatchingPlanningGroups] - Whether to constrain shift trades to agents with matching planning groups
 * @property {ShiftTradeActivityRule[]} [activityCategoryRules] - Rules that specify what to do with activity categories that are part of a shift defined in a trade
 */
 
/**
 * @typedef {object} ShortTermForecastingSettings
 * @property {number} [defaultHistoryWeeks] - The number of weeks to consider by default when generating a volume forecast
 */
 
/**
 * @typedef {object} ShrinkageOverride
 * @property {number} intervalIndex - Index of shrinkage override interval. Starting index is 0 and indexes are based on 15 minute intervals for a 7 day week
 * @property {number} [shrinkagePercent] - Shrinkage override percent. Setting a null value will reset the interval to the default
 */
 
/**
 * @typedef {object} ShrinkageOverrides
 * @property {boolean} [clear] - Set true to clear the shrinkage interval overrides
 * @property {ShrinkageOverride[]} [values] - List of interval shrinkage overrides
 */
 
/**
 * @typedef {object} SourcePlanningGroupRequest
 * @property {string} id - The ID of the planning group
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the planning group
 */
 
/**
 * @typedef {object} TimeOffBalanceRequest
 * @property {string[]} activityCodeIds - The set of activity code IDs for which to query available time off balances
 * @property {LocalDateRange[]} [dateRanges] - The list of date ranges for which to query time off balance
 */
 
/**
 * @typedef {object} TimeOffLimitRange
 * @property {string} startDate - Start date of the range. The end date is determined by 'granularity' and the size of 'limitMinutesPerInterval'. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} granularity - Granularity choice for the time off limit
 * @property {number[]} limitMinutesPerInterval - The list of time off limit values in minutes per granularity interval. If 'null' is specified, then interval specific value is cleared. Such interval will have 'defaultLimitMinutes' value
 */
 
/**
 * @typedef {object} TimeOffRequestLookup
 * @property {string} timeOffRequestId - The ID of the time off request
 * @property {string} userId - The ID of the user to whom the time off request belongs
 */
 
/**
 * @typedef {object} TimeOffRequestNotification
 * @property {string} [timeOffRequestId] - The ID of this time off request
 * @property {UserReference} [user] - The user associated with this time off request
 * @property {boolean} [isFullDayRequest] - Whether this is a full day request (false means partial day)
 * @property {string} [status] - The status of this time off request
 * @property {string[]} [partialDayStartDateTimes] - A set of start date-times in ISO-8601 format for partial day requests.  Will be not empty if isFullDayRequest == false
 * @property {string[]} [fullDayManagementUnitDates] - A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.  Will be not empty if isFullDayRequest == true
 */
 
/**
 * @typedef {object} TimeOffRequestQueryBody
 * @property {string[]} [ids] - The set of ids to filter time off requests
 * @property {string[]} [userIds] - The set of user ids to filter time off requests
 * @property {string[]} [statuses] - The set of statuses to filter time off requests
 * @property {string[]} [substatuses] - The set of substatuses to filter time off requests
 * @property {DateRange} [dateRange] - The inclusive range of dates to filter time off requests
 */
 
/**
 * @typedef {object} TimeOffSettingsRequest
 * @property {boolean} [submissionRangeEnforced] - Whether to enforce a submission range for agent time off requests
 * @property {number} [submissionEarliestDaysFromNow] - The earliest number of days from now for which an agent can submit a time off request.  Use negative numbers to indicate days in the past
 * @property {number} [submissionLatestDaysFromNow] - The latest number of days from now for which an agent can submit a time off request
 */
 
/**
 * @typedef {object} UpdateActivityCodeRequest
 * @property {string} [name] - The name of the activity code
 * @property {string} [category] - The activity code's category. Attempting to change the category of a default activity code will return an error
 * @property {number} [lengthInMinutes] - The default length of the activity in minutes
 * @property {boolean} [countsAsPaidTime] - Whether an agent is paid while performing this activity
 * @property {boolean} [countsAsWorkTime] - Indicates whether or not the activity should be counted as work time
 * @property {boolean} [agentTimeOffSelectable] - Whether an agent can select this activity code when creating or editing a time off request
 * @property {boolean} [countsTowardShrinkage] - Whether or not this activity code counts toward shrinkage calculations
 * @property {boolean} [plannedShrinkage] - Whether this activity code is considered planned or unplanned shrinkage
 * @property {boolean} [interruptible] - Whether this activity code is considered interruptible
 * @property {ListWrapperSecondaryPresence} [secondaryPresences] - The secondary presences of this activity code
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the associated business unit's list of activity codes
 */
 
/**
 * @typedef {object} UpdateActivityPlanRequest
 * @property {string} [name] - The name of the activity plan
 * @property {string} [description] - The description of the activity plan
 * @property {ValueWrapperGroupSettings} [groupSettings] - Group settings for the activity plan
 * @property {ValueWrapperUserSearchRule} [attendeesSearchRule] - Attendee search rule for this activity plan
 * @property {ValueWrapperUserSearchRule} [facilitatorsSearchRule] - Facilitator search rule for this activity plan
 * @property {number} [transitionTimeMinutes] - Transition time in minutes between facilitated sessions
 * @property {ValueWrapperActivityPlanServiceGoalImpactOverrides} [serviceGoalImpactOverrides] - Allowable service goal impact override settings for this activity plan
 * @property {string} [optimizationObjective] - The optimization objective of this activity plan
 * @property {string} [state] - The state of this activity plan
 * @property {ListWrapperFixedAvailability} [fixedAvailability] - Fixed availability configuration for the activity plan
 */
 
/**
 * @typedef {object} UpdateAdherenceExplanationStatusRequest
 * @property {string} [status] - The status of the adherence explanation
 */
 
/**
 * @typedef {object} UpdateAgentWorkPlanBiddingPreference
 * @property {boolean} submitted - Whether the preference is submitted
 * @property {AgentWorkPlanBiddingPreferenceRequest[]} agentWorkPlanBidPreferences - The list of work plan bidding preferences
 */
 
/**
 * @typedef {object} UpdateAlternativeShiftBuSettingsRequest
 * @property {ListWrapperAlternativeShiftBuSettingsGranularity} [enabledGranularities] - The granularity at which alternative shifts is allowed. An empty list as the wrapped value will indicate alternative shifts is disabled
 * @property {number} [minMinutesBeforeStartTime] - The minimum number of minutes before the start of a shift that an alternative shift can be automatically approved
 * @property {ListWrapperAlternativeShiftBuSettingsActivityCategory} [retainedActivityCategories] - Categories of activities that are required to remain at the same time slot for the alternative shifts offered. An empty list indicates no retained activities
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for this business unit's alternative shift settings
 */
 
/**
 * @typedef {object} UpdateBusinessUnitRequest
 * @property {string} [name] - The name of the business unit
 * @property {string} [divisionId] - The ID of the division to which the business unit should be moved
 * @property {UpdateBusinessUnitSettingsRequest} [settings] - Configuration for the business unit
 */
 
/**
 * @typedef {object} UpdateBusinessUnitSettingsRequest
 * @property {string} [startDayOfWeek] - The start day of week for this business unit
 * @property {string} [timeZone] - The time zone for this business unit, using the Olsen tz database format
 * @property {BuShortTermForecastingSettings} [shortTermForecasting] - Short term forecasting settings
 * @property {BuSchedulingSettingsRequest} [scheduling] - Scheduling settings
 * @property {BuNotificationSettingsRequest} [notifications] - Notification settings
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for this business unit
 */
 
/**
 * @typedef {object} UpdateManagementUnitRequest
 * @property {string} [name] - The new name of the management unit
 * @property {string} [divisionId] - The new division id for the management unit
 * @property {ManagementUnitSettingsRequest} [settings] - Updated settings for the management unit
 */
 
/**
 * @typedef {object} UpdateMuAgentRequest
 * @property {boolean} [schedulable] - Whether the agent can be included in schedule generation
 * @property {string} userId - User to be updated
 */
 
/**
 * @typedef {object} UpdateMuAgentsRequest
 * @property {UpdateMuAgentRequest[]} [entities] - List of agents to update
 */
 
/**
 * @typedef {object} UpdateMuAgentWorkPlanRequest
 * @property {string} userId - The agent id for whom the work plan is updated
 * @property {ValueWrapperString} [workPlanId] - The current work plan ID for the agent
 * @property {WorkPlanOverrideListWrapperWorkPlanOverrideRequest} [workPlanOverrides] - The list of work plan overrides for the agent
 */
 
/**
 * @typedef {object} UpdateMuAgentWorkPlansBatchRequest
 * @property {UpdateMuAgentWorkPlanRequest[]} [entities]
 */
 
/**
 * @typedef {object} UpdateNotificationsRequest
 * @property {WfmUserNotification[]} entities - The notifications to update
 */
 
/**
 * @typedef {object} UpdatePlanningGroupRequest
 * @property {string} [name] - The name of the planning group
 * @property {SetWrapperRoutePathRequest} [routePaths] - Set of route paths to associate with the planning group
 * @property {string} [serviceGoalTemplateId] - The ID of the service goal template to associate with this planning group
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the planning group
 */
 
/**
 * @typedef {object} UpdateServiceGoalTemplate
 * @property {string} [name] - The name of the service goal template.
 * @property {BuServiceLevel} [serviceLevel] - Service level targets for this service goal template
 * @property {BuAverageSpeedOfAnswer} [averageSpeedOfAnswer] - Average speed of answer targets for this service goal template
 * @property {BuAbandonRate} [abandonRate] - Abandon rate targets for this service goal template
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the service goal template
 * @property {ServiceGoalTemplateImpactOverride} [impactOverride] - Settings controlling max percent increase and decrease of service goals for this service goal template
 */
 
/**
 * @typedef {object} UpdateStaffingGroupRequest
 * @property {string} [name] - The name of the staffing group
 * @property {SetWrapperString} [userIds] - The set of user Ids to associate with the staffing group
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the staffing group
 */
 
/**
 * @typedef {object} UpdateTimeOffLimitRequest
 * @property {number} [defaultLimitMinutes] - The default time off limit value in minutes per granularity
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the time off limit
 */
 
/**
 * @typedef {object} UpdateTimeOffPlanBusinessUnitAssociation
 * @property {SetWrapperString} [managementUnitIds] - The IDs of management units to which this time-off plan applies. This must not be set if staffingGroupIds is populated
 * @property {SetWrapperString} [staffingGroupIds] - The IDs of staffing groups to which this time-off plan applies. This must not be set if managementUnitIds is populated
 */
 
/**
 * @typedef {object} UpdateTimeOffPlanManagementUnitAssociation
 * @property {SetWrapperString} [staffingGroupIds] - The IDs of staffing groups to which this time-off plan applies. If not defined, the plan is applied to the management unit
 */
 
/**
 * @typedef {object} UpdateTimeOffPlanRequest
 * @property {string} [name] - The name of this time off plan.
 * @property {SetWrapperString} [activityCodeIds] - The set of activity code IDs to associate with this time off plan.
 * @property {SetWrapperString} [timeOffLimitIds] - The set of time off limit IDs to associate with this time off plan.
 * @property {string} [autoApprovalRule] - Auto approval rule for the time off plan.
 * @property {number} [daysBeforeStartToExpireFromWaitlist] - The number of days before the time off request start date for when the request will be expired from the waitlist.
 * @property {ValueWrapperHrisTimeOffType} [hrisTimeOffType] - Time off type, if this time off plan is associated with the integration.
 * @property {boolean} [active] - Whether this time off plan should be used by agents.
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for the time off plan
 */
 
/**
 * Update work plan bid model
 * @typedef {object} UpdateWorkPlanBid
 * @property {string} [name] - The name of the work plan bid
 * @property {BuShortTermForecastWeekReference} [forecast] - The selected forecast in this work plan bid
 * @property {string} [bidWindowStartDate] - The bid start date where agents start participate in work plan bidding in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [bidWindowEndDate] - The bid end date in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [effectiveDate] - The date when agents will be assigned to the new work plan in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [agentRankingType] - The type of agent ranking selected for this bid
 * @property {string} [rankingTiebreakerType] - Ranking tiebreaker
 * @property {ListWrapperAgentWorkPlanField} [workPlanFieldsVisibleToAgents] - The work plan fields visible to agents whenever work plan preferences are made
 * @property {string} [status] - The state of the bid
 */
 
/**
 * @typedef {object} UpdateWorkPlanRotationAgentRequest
 * @property {string} userId - The ID of an agent in this work plan rotation
 * @property {DateRangeWithOptionalEnd} [dateRange] - The date range to which this agent is effective in the work plan rotation
 * @property {number} [position] - Start position of the work plan in the pattern for this agent in the work plan rotation. Position value starts from 0
 * @property {boolean} [delete] - If marked true for this agent when updating, then this agent will be removed from this work plan rotation
 */
 
/**
 * @typedef {object} UpdateWorkPlanRotationRequest
 * @property {string} [name] - Name of this work plan rotation
 * @property {boolean} [enabled] - Whether the work plan rotation is enabled for scheduling
 * @property {DateRangeWithOptionalEnd} [dateRange] - The date range to which this work plan rotation applies
 * @property {UpdateWorkPlanRotationAgentRequest[]} [agents] - Agents in this work plan rotation
 * @property {WorkPlanPatternRequest} [pattern] - Pattern with list of work plan IDs that rotate on a weekly basis
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for this work plan rotation
 */
 
/**
 * @typedef {object} UploadUrlRequestBody
 * @property {number} contentLengthBytes - The expected content length (in bytes) of the gzip-encoded data that will be PUT to the returned signed URL
 */
 
/**
 * @typedef {object} UserListScheduleRequestBody
 * @property {string[]} userIds - The user ids for which to fetch schedules
 * @property {string} startDate - Beginning of the range of schedules to fetch, in ISO-8601 format
 * @property {string} endDate - End of the range of schedules to fetch, in ISO-8601 format
 * @property {boolean} [loadFullWeeks] - Whether to load the full week's schedule (for the requested users) of any week overlapping the start/end date query parameters, defaults to false
 */
 
/**
 * @typedef {object} UserReference
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} UserSearchRule
 * @property {UserSearchRulePart[]} parts - The parts of this rule; the results of these are ANDed together.
 */
 
/**
 * @typedef {object} UserSearchRulePart
 * @property {string} operation - The operation for this part
 * @property {string} selector - The type of item being selected by this part
 * @property {string[]} ids - The ids for the selector; the results of these are ORed together
 */
 
/**
 * @typedef {object} UserTimeOffRequestReference
 * @property {string} [id] - The id of the time off request
 * @property {UserReference} user - The ID of the user to whom the time off request applies
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ValidationServiceRequest
 * @property {string} dateImportEnded - The last day of the data you are importing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} uploadKey - S3 key for the uploaded file
 */
 
/**
 * @typedef {object} ValueWrapperActivityPlanServiceGoalImpactOverrides
 * @property {ActivityPlanServiceGoalImpactOverrides} [value] - The value for the associated field
 */
 
/**
 * @typedef {object} ValueWrapperDate
 * @property {string} [value] - The value for the associated field. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} ValueWrapperGroupSettings
 * @property {GroupSettings} [value] - The value for the associated field
 */
 
/**
 * @typedef {object} ValueWrapperHrisTimeOffType
 * @property {HrisTimeOffType} [value] - The value for the associated field
 */
 
/**
 * @typedef {object} ValueWrapperMonthlyPlanningPeriodSettings
 * @property {MonthlyPlanningPeriodSettings} [value] - The value for the associated field
 */
 
/**
 * @typedef {object} ValueWrapperPlanningPeriodSettings
 * @property {PlanningPeriodSettings} [value] - The value for the associated field
 */
 
/**
 * @typedef {object} ValueWrapperString
 * @property {string} [value] - The value for the associated field
 */
 
/**
 * @typedef {object} ValueWrapperUserSearchRule
 * @property {UserSearchRule} [value] - The value for the associated field
 */
 
/**
 * @typedef {object} WfmHistoricalAdherenceBulkItem
 * @property {string} managementUnitId - The ID of the management unit to query
 * @property {string} startDate - Beginning of the date range to query in ISO-8601 format
 * @property {string} endDate - End of the date range to query in ISO-8601 format
 * @property {string[]} [userIds] - The IDs of the users to query. If not included, will query every user in the management unit
 * @property {boolean} [includeExceptions] - Whether user exceptions should be returned as part of the results. Defaults to false if not specified.
 * @property {boolean} [includeActuals] - Whether user actual activities should be returned as part of the results. Defaults to false if not specified.
 */
 
/**
 * @typedef {object} WfmHistoricalAdherenceBulkQuery
 * @property {WfmHistoricalAdherenceBulkItem[]} items - The historical adherence items to query
 * @property {string} timeZone - The time zone, in olson format, to use in defining days when computing adherence. The results will be returned as UTC timestamps regardless of the time zone input.
 */
 
/**
 * @typedef {object} WfmHistoricalAdherenceQuery
 * @property {string} startDate - Beginning of the date range to query in ISO-8601 format
 * @property {string} [endDate] - End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time
 * @property {string} [timeZone] - The time zone, in olson format, to use in defining days when computing adherence. The results will be returned as UTC timestamps regardless of the time zone input.
 * @property {string[]} [userIds] - The userIds to report on. If null or not set, adherence will be computed for all the users in management unit or requested teamIds
 * @property {boolean} [includeExceptions] - Whether user exceptions should be returned as part of the results
 * @property {string[]} [teamIds] - The teamIds to report on. If null or not set, adherence will be computed for requested users if applicable or otherwise all users in the management unit. Note: If teamIds is also specified, only adherence for users in the requested teams will be returned
 */
 
/**
 * @typedef {object} WfmHistoricalAdherenceQueryForTeams
 * @property {string} startDate - Beginning of the date range to query in ISO-8601 format
 * @property {string} [endDate] - End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time
 * @property {string} timeZone - The time zone, in olson format, to use in defining days when computing adherence. The results will be returned as UTC timestamps regardless of the time zone input.
 * @property {string[]} [userIds] - The userIds to report on. If null or not set, adherence will be computed for all the users in management unit or requested teamIds
 * @property {boolean} [includeExceptions] - Whether user exceptions should be returned as part of the results
 */
 
/**
 * @typedef {object} WfmHistoricalAdherenceQueryForUsers
 * @property {string} startDate - Beginning of the date range to query in ISO-8601 format
 * @property {string} [endDate] - End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time
 * @property {string} timeZone - The time zone, in olson format, to use in defining days when computing adherence. The results will be returned as UTC timestamps regardless of the time zone input.
 * @property {string[]} userIds - The userIds to report on
 * @property {boolean} [includeExceptions] - Whether user exceptions should be returned as part of the results
 */
 
/**
 * @typedef {object} WfmHistoricalShrinkageRequest
 * @property {string} startDate - Beginning of the date range to query in ISO-8601 format
 * @property {string} [endDate] - End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time
 * @property {string} [timeZone] - The time zone, in olson format, to use in defining days when computing shrinkage for requested granularity. If it is not set, the business unit time zone will be used. The results will be returned as UTC timestamps regardless of the time zone input.
 * @property {string} [granularity] - Shrinkage aggregation interval granularity.
 */
 
/**
 * @typedef {object} WfmHistoricalShrinkageTeamsRequest
 * @property {string} startDate - Beginning of the date range to query in ISO-8601 format
 * @property {string} [endDate] - End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time
 * @property {string} timeZone - The time zone, in olson format, to use in defining days when computing shrinkage for requested granularity. The results will be returned as UTC timestamps regardless of the time zone input.
 * @property {string} [granularity] - Shrinkage aggregation interval granularity
 */
 
/**
 * @typedef {object} WfmProcessUploadRequest
 * @property {string} uploadKey - The uploadKey provided by the request to get an upload URL
 */
 
/**
 * @typedef {object} WfmServiceGoalImpact
 * @property {number} increaseByPercent - The maximum allowed percent increase from the configured goal
 * @property {number} decreaseByPercent - The maximum allowed percent decrease from the configured goal
 */
 
/**
 * @typedef {object} WfmServiceGoalImpactSettings
 * @property {WfmServiceGoalImpact} serviceLevel - Allowed service level percent increase and decrease
 * @property {WfmServiceGoalImpact} averageSpeedOfAnswer - Allowed average speed of answer percent increase and decrease
 * @property {WfmServiceGoalImpact} abandonRate - Allowed abandon rate percent increase and decrease
 */
 
/**
 * @typedef {object} WfmUserNotification
 * @property {string} id - The immutable globally unique identifier for the object.
 * @property {string} mutableGroupId - The group ID of the notification (mutable, may change  on update)
 * @property {string} [timestamp] - The timestamp for this notification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [type] - The type of this notification
 * @property {ShiftTradeNotification} [shiftTrade] - A shift trade notification.  Only set if type == ShiftTrade
 * @property {TimeOffRequestNotification} [timeOffRequest] - A time off request notification.  Only set if type == TimeOffRequest
 * @property {AdherenceExplanationNotification} [adherenceExplanation] - An adherence explanation notification.  Only set if type == AdherenceExplanation
 * @property {AlternativeShiftNotification} [alternativeShift] - An alternative shift trade notification.  Only set if type == AlternativeShift
 * @property {boolean} markedAsRead - Whether this notification has been marked "read"
 * @property {boolean} [agentNotification] - Whether this notification is for an agent
 * @property {string[]} [otherNotificationIdsInGroup] - Other notification IDs in group.  This field is only populated in real-time notifications
 */
 
/**
 * @typedef {object} WfmVersionedEntityMetadata
 * @property {number} version - The version of the associated entity.  Used to prevent conflicts on concurrent edits
 * @property {UserReference} [modifiedBy] - The user who last modified the associated entity. The id may be 'System' if it was an automated process
 * @property {string} [dateModified] - The date the associated entity was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {UserReference} [createdBy] - The user who created the associated entity, if available. The id may be 'System' if it was an automated process
 * @property {string} [dateCreated] - The date the associated entity was created, if available. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} WorkPlan
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [enabled] - Whether the work plan is enabled for scheduling
 * @property {boolean} [valid] - Whether the work plan is valid or not
 * @property {boolean} [constrainWeeklyPaidTime] - Whether the weekly paid time constraint is enabled for this work plan
 * @property {boolean} [flexibleWeeklyPaidTime] - Whether the weekly paid time constraint is flexible for this work plan
 * @property {number} [weeklyExactPaidMinutes] - Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false
 * @property {number} [weeklyMinimumPaidMinutes] - Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
 * @property {number} [weeklyMaximumPaidMinutes] - Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
 * @property {boolean} [constrainPaidTimeGranularity] - Whether paid time granularity is constrained for this work plan
 * @property {number} [paidTimeGranularityMinutes] - Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true
 * @property {boolean} [constrainMinimumTimeBetweenShifts] - Whether the minimum time between shifts constraint is enabled for this work plan
 * @property {number} [minimumTimeBetweenShiftsMinutes] - Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true
 * @property {number} [maximumDays] - Maximum number days in a week allowed to be scheduled for this work plan
 * @property {number} [minimumConsecutiveNonWorkingMinutesPerWeek] - Minimum amount of consecutive non working minutes per week that agents who are assigned this work plan are allowed to have off
 * @property {boolean} [constrainMaximumConsecutiveWorkingWeekends] - Whether to constrain the maximum consecutive working weekends
 * @property {number} [maximumConsecutiveWorkingWeekends] - The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work
 * @property {number} [minimumWorkingDaysPerWeek] - The minimum number of days that agents assigned to a work plan must work per week
 * @property {boolean} [constrainMaximumConsecutiveWorkingDays] - Whether to constrain the maximum consecutive working days
 * @property {number} [maximumConsecutiveWorkingDays] - The maximum number of consecutive days that agents assigned to this work plan are allowed to work. Used if constrainMaximumConsecutiveWorkingDays == true
 * @property {number} [minimumShiftStartDistanceMinutes] - The time period in minutes for the duration between the start times of two consecutive working days
 * @property {number} [minimumDaysOffPerPlanningPeriod] - Minimum days off in the planning period
 * @property {number} [maximumDaysOffPerPlanningPeriod] - Maximum days off in the planning period
 * @property {number} [minimumPaidMinutesPerPlanningPeriod] - Minimum paid minutes in the planning period
 * @property {number} [maximumPaidMinutesPerPlanningPeriod] - Maximum paid minutes in the planning period
 * @property {SetWrapperDayOfWeek} [optionalDays] - Optional days to schedule for this work plan
 * @property {string} [shiftStartVarianceType] - This constraint ensures that an agent starts each workday within a user-defined time threshold
 * @property {ListWrapperShiftStartVariance} [shiftStartVariances] - Variance in minutes among start times of shifts in this work plan
 * @property {WorkPlanShift[]} [shifts] - Shifts in this work plan
 * @property {DeletableUserReference[]} [agents] - Agents in this work plan
 * @property {number} [agentCount] - Number of agents in this work plan
 * @property {WfmVersionedEntityMetadata} metadata - Version metadata for this work plan
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WorkPlanActivity
 * @property {string} [activityCodeId] - ID of the activity code associated with this activity
 * @property {string} [description] - Description of the activity
 * @property {number} [lengthMinutes] - Length of the activity in minutes
 * @property {boolean} [startTimeIsRelativeToShiftStart] - Whether the start time of the activity is relative to the start time of the shift it belongs to
 * @property {boolean} [flexibleStartTime] - Whether the start time of the activity is flexible
 * @property {number} [earliestStartTimeMinutes] - Earliest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true
 * @property {number} [latestStartTimeMinutes] - Latest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true
 * @property {number} [exactStartTimeMinutes] - Exact activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == false
 * @property {number} [startTimeIncrementMinutes] - Increment in offset minutes that would contribute to different possible start times for the activity
 * @property {boolean} [countsAsPaidTime] - Whether the activity is paid
 * @property {boolean} [countsAsContiguousWorkTime] - Whether the activity duration is counted towards contiguous work time
 * @property {number} [minimumLengthFromShiftStartMinutes] - The minimum duration between shift start and shift item (e.g., break or meal) start in minutes
 * @property {number} [minimumLengthFromShiftEndMinutes] - The minimum duration between shift item (e.g., break or meal) end and shift end in minutes
 * @property {string} [id] - ID of the activity. This is required only for the case of updating an existing activity
 * @property {boolean} [delete] - If marked true for updating an existing activity, the activity will be permanently deleted
 * @property {string} [validationId] - ID of the activity in the context of work plan validation
 */
 
/**
 * @typedef {object} WorkPlanBidGroupCreate
 * @property {string} name - The name of the work plan bid group
 * @property {string} managementUnitId - The management unit ID this bid group belongs to
 * @property {string[]} agentIds - Agent IDs who participate in this bid group
 * @property {BidGroupWorkPlanRequest[]} workPlans - The list of work plans used in this bid group
 * @property {string[]} planningGroupIds - The planning group IDs selected in this bid group
 */
 
/**
 * @typedef {object} WorkPlanBidGroupUpdate
 * @property {string} [name] - The name of the work plan bid group
 * @property {string} [managementUnitId] - The management unit ID used for this work plan bid group
 * @property {ListWrapperString} [agentIds] - Agent IDs who participate in this bid group
 * @property {ListWrapperBidGroupWorkPlanRequest} [workPlans] - The list of work plans used in this bid group
 * @property {ListWrapperString} [planningGroupIds] - The planning group IDs selected in this bid group
 */
 
/**
 * @typedef {object} WorkPlanBidRanks
 * @property {string} [id] - The globally unique identifier for the user.
 * @property {number} [workPlanBiddingPerformance] - Work plan bidding agent performance ranking. The range of values is between 0 and 9999.
 * @property {string} [biddingTieBreaker] - Custom agent ranking metric that some customers can use.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WorkPlanOverrideListWrapperWorkPlanOverrideRequest
 * @property {WorkPlanOverrideRequest[]} [values]
 * @property {boolean} [deleteAll] - if true, should delete all existing overrides for the agent and update the given overrides
 */
 
/**
 * @typedef {object} WorkPlanOverrideRequest
 * @property {string} [action] - The action to perform on work plan override, defaults to add
 * @property {string} startDate - The start date in yyyy-MM-dd format for the updated work plan. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {number} [weekCount] - The week count of the updated work plan, required if action is Add or Update
 * @property {string} [workPlanId] - The updated work plan id
 */
 
/**
 * @typedef {object} WorkPlanPatternRequest
 * @property {string[]} workPlanIds - List of work plan IDs in order of rotation on a weekly basis. Values in the list cannot be null or empty
 */
 
/**
 * @typedef {object} WorkPlanShift
 * @property {string} name - Name of the shift
 * @property {SetWrapperDayOfWeek} [days] - Days of the week applicable for this shift
 * @property {boolean} [flexibleStartTime] - Whether the start time of the shift is flexible
 * @property {number} [exactStartTimeMinutesFromMidnight] - Exact start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == false
 * @property {number} [earliestStartTimeMinutesFromMidnight] - Earliest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
 * @property {number} [latestStartTimeMinutesFromMidnight] - Latest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true
 * @property {boolean} [constrainStopTime] - Whether the latest stop time constraint for the shift is enabled.  Deprecated, use constrainLatestStopTime instead
 * @property {boolean} [constrainLatestStopTime] - Whether the latest stop time constraint for the shift is enabled
 * @property {number} [latestStopTimeMinutesFromMidnight] - Latest stop time of the shift defined as offset minutes from midnight. Used if constrainStopTime == true
 * @property {boolean} [constrainEarliestStopTime] - Whether the earliest stop time constraint for the shift is enabled
 * @property {number} [earliestStopTimeMinutesFromMidnight] - This is the earliest time a shift can end
 * @property {number} [startIncrementMinutes] - Increment in offset minutes that would contribute to different possible start times for the shift. Used if flexibleStartTime == true
 * @property {boolean} [flexiblePaidTime] - Whether the paid time setting for the shift is flexible
 * @property {number} [exactPaidTimeMinutes] - Exact paid time in minutes configured for the shift. Used if flexiblePaidTime == false
 * @property {number} [minimumPaidTimeMinutes] - Minimum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
 * @property {number} [maximumPaidTimeMinutes] - Maximum paid time in minutes configured for the shift. Used if flexiblePaidTime == true
 * @property {boolean} [constrainContiguousWorkTime] - Whether the contiguous time constraint for the shift is enabled
 * @property {number} [minimumContiguousWorkTimeMinutes] - Minimum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
 * @property {number} [maximumContiguousWorkTimeMinutes] - Maximum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true
 * @property {boolean} [constrainDayOff] - Whether day off rule is enabled
 * @property {string} [dayOffRule] - The day off rule for agents to have next day off or previous day off. used if constrainDayOff = true
 * @property {WorkPlanActivity[]} [activities] - Activities configured for this shift
 * @property {string} [id] - ID of the shift. This is required only for the case of updating an existing shift
 * @property {boolean} [delete] - If marked true for updating an existing shift, the shift will be permanently deleted
 * @property {string} [validationId] - ID of shift in the context of work plan validation
 */
 
/**
 * @typedef {object} WorkPlanValidationRequest
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {boolean} [enabled] - Whether the work plan is enabled for scheduling
 * @property {boolean} [valid] - Whether the work plan is valid or not
 * @property {boolean} [constrainWeeklyPaidTime] - Whether the weekly paid time constraint is enabled for this work plan
 * @property {boolean} [flexibleWeeklyPaidTime] - Whether the weekly paid time constraint is flexible for this work plan
 * @property {number} [weeklyExactPaidMinutes] - Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false
 * @property {number} [weeklyMinimumPaidMinutes] - Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
 * @property {number} [weeklyMaximumPaidMinutes] - Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
 * @property {boolean} [constrainPaidTimeGranularity] - Whether paid time granularity is constrained for this work plan
 * @property {number} [paidTimeGranularityMinutes] - Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true
 * @property {boolean} [constrainMinimumTimeBetweenShifts] - Whether the minimum time between shifts constraint is enabled for this work plan
 * @property {number} [minimumTimeBetweenShiftsMinutes] - Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true
 * @property {number} [maximumDays] - Maximum number days in a week allowed to be scheduled for this work plan
 * @property {number} [minimumConsecutiveNonWorkingMinutesPerWeek] - Minimum amount of consecutive non working minutes per week that agents who are assigned this work plan are allowed to have off
 * @property {boolean} [constrainMaximumConsecutiveWorkingWeekends] - Whether to constrain the maximum consecutive working weekends
 * @property {number} [maximumConsecutiveWorkingWeekends] - The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work
 * @property {number} [minimumWorkingDaysPerWeek] - The minimum number of days that agents assigned to a work plan must work per week
 * @property {boolean} [constrainMaximumConsecutiveWorkingDays] - Whether to constrain the maximum consecutive working days
 * @property {number} [maximumConsecutiveWorkingDays] - The maximum number of consecutive days that agents assigned to this work plan are allowed to work. Used if constrainMaximumConsecutiveWorkingDays == true
 * @property {number} [minimumShiftStartDistanceMinutes] - The time period in minutes for the duration between the start times of two consecutive working days
 * @property {number} [minimumDaysOffPerPlanningPeriod] - Minimum days off in the planning period
 * @property {number} [maximumDaysOffPerPlanningPeriod] - Maximum days off in the planning period
 * @property {number} [minimumPaidMinutesPerPlanningPeriod] - Minimum paid minutes in the planning period
 * @property {number} [maximumPaidMinutesPerPlanningPeriod] - Maximum paid minutes in the planning period
 * @property {SetWrapperDayOfWeek} [optionalDays] - Optional days to schedule for this work plan
 * @property {string} [shiftStartVarianceType] - This constraint ensures that an agent starts each workday within a user-defined time threshold
 * @property {ListWrapperShiftStartVariance} [shiftStartVariances] - Variance in minutes among start times of shifts in this work plan
 * @property {WorkPlanShift[]} [shifts] - Shifts in this work plan
 * @property {DeletableUserReference[]} [agents] - Agents in this work plan
 * @property {number} [agentCount] - Number of agents in this work plan
 * @property {string} [selfUri] - The URI for this object
 */
 

/**
 * WorkforceManagement - Adherence, Schedules, Forecasts, Intraday Monitoring, Time Off Requests, Configuration
 * @class WorkforceManagement
 */
class WorkforceManagementAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the WorkforceManagement class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Get ics formatted calendar based on shareable link
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} query.calendarId -  The id of the ics-formatted calendar
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/calendar/data/ics" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementCalendarDataIcs(query) {
		const endpointPath = "/api/v2/workforcemanagement/calendar/data/ics";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("calendarId" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "calendarId");
		}

		if (this.#checkJSONSchemaType(query["calendarId"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "calendarId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deprecated: Instead use /api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes. Get the list of activity codes
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/activitycodes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @deprecated
	 */
	getWorkforcemanagementManagementunitActivitycodes(managementUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/activitycodes";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Estimates available time off for current user
	 * @async
	 * @param {EstimateAvailableTimeOffRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeoffrequests/estimate" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementTimeoffrequestsEstimate(body) {
		const endpointPath = "/api/v2/workforcemanagement/timeoffrequests/estimate";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get activity codes
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit, or 'mine' for the business unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitActivitycodes(businessUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new activity code
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit, or 'mine' for the business unit of the logged-in user.
	 * @param {CreateActivityCodeRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitActivitycodes(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an activity code
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit, or 'mine' for the business unit of the logged-in user.
	 * @param {string} activityCodeId - The ID of the activity code to fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(activityCodeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "activityCodeId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.activityCodeId = activityCodeId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes an activity code
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit, or 'mine' for the business unit of the logged-in user.
	 * @param {string} activityCodeId - The ID of the activity code to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(activityCodeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "activityCodeId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.activityCodeId = activityCodeId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an activity code
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit, or 'mine' for the business unit of the logged-in user.
	 * @param {string} activityCodeId - The ID of the activity code to update
	 * @param {UpdateActivityCodeRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitActivitycode(businessUnitId, activityCodeId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activitycodes/{activityCodeId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(activityCodeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "activityCodeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.activityCodeId = activityCodeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get intraday planning groups for the given date
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} query.date -  yyyy-MM-dd date string interpreted in the configured business unit time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday/planninggroups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitIntradayPlanninggroups(businessUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday/planninggroups";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("date" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "date");
		}

		if (this.#checkJSONSchemaType(query["date"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "date", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get intraday data for the given date for the requested planningGroupIds
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes
	 * @param {IntradayPlanningGroupRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitIntraday(businessUnitId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/intraday";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates a signed upload URL for importing a short term forecast
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {UploadUrlRequestBody} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/import/uploadurl" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekShorttermforecastsImportUploadurl(businessUnitId, weekDateId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/import/uploadurl";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Starts importing the uploaded short term forecast
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {WfmProcessUploadRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/import" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekShorttermforecastsImport(businessUnitId, weekDateId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/import";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets the forecast generation results
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} forecastId - The ID of the forecast
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/generationresults" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekShorttermforecastGenerationresults(businessUnitId, weekDateId, forecastId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/generationresults";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(forecastId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forecastId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.forecastId = forecastId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get short term forecasts
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format or 'recent' (without quotes) to fetch recent forecasts
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekShorttermforecasts(businessUnitId, weekDateId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Generate a short term forecast
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes
	 * @param {GenerateBuForecastRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/generate" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekShorttermforecastsGenerate(businessUnitId, weekDateId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/generate";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a short term forecast
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} forecastId - The ID of the forecast
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Include to access additional data on the forecast
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(forecastId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forecastId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.forecastId = forecastId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a short term forecast
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} forecastId - The ID of the forecast
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitWeekShorttermforecast(businessUnitId, weekDateId, forecastId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(forecastId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forecastId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.forecastId = forecastId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets the forecast planning group snapshot
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} forecastId - The ID of the forecast
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/planninggroups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekShorttermforecastPlanninggroups(businessUnitId, weekDateId, forecastId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/planninggroups";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(forecastId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forecastId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.forecastId = forecastId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the result of a short term forecast calculation
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} forecastId - The ID of the forecast
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.weekNumber] -  The week number to fetch (for multi-week forecasts)
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service.  For testing/app development purposes
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/data" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekShorttermforecastData(businessUnitId, weekDateId, forecastId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/data";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(forecastId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forecastId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("weekNumber" in query && this.#checkJSONSchemaType(query["weekNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekNumber", "integer");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.forecastId = forecastId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the staffing requirement by planning group for a forecast
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} forecastId - The ID of the forecast
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.weekNumbers] -  The week numbers to fetch (for multi-week forecasts) staffing requirements. Returns all week data if the list is not specified
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/staffingrequirement" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekShorttermforecastStaffingrequirement(businessUnitId, weekDateId, forecastId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/staffingrequirement";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(forecastId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forecastId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("weekNumbers" in query && this.#checkJSONSchemaType(query["weekNumbers"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekNumbers", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.forecastId = forecastId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the result of a long term forecast calculation
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} forecastId - The ID of the forecast
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service.  For testing/app development purposes
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/longtermforecastdata" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekShorttermforecastLongtermforecastdata(businessUnitId, weekDateId, forecastId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/longtermforecastdata";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(forecastId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forecastId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.forecastId = forecastId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Copy a short term forecast
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the forecast belongs
	 * @param {string} weekDateId - The week start date of the forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} forecastId - The ID of the forecast to copy
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes
	 * @param {CopyBuForecastRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekShorttermforecastCopy(businessUnitId, weekDateId, forecastId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekDateId}/shorttermforecasts/{forecastId}/copy";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(forecastId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forecastId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.forecastId = forecastId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get business unit
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit, or 'mine' for the business unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Include to access additional data on the business unit
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunit(businessUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete business unit
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit, or 'mine' for the business unit of the logged-in user.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunit(businessUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update business unit
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit, or 'mine' for the business unit of the logged-in user.
	 * @param {UpdateBusinessUnitRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunit(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all authorized management units in the business unit
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit, or 'mine' for the business unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.feature] -  If specified, the list of management units for which the user is authorized to use the requested feature will be returned
	 * @param {string} [query.divisionId] -  If specified, the list of management units belonging to the specified division will be returned
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/managementunits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitManagementunits(businessUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/managementunits";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("feature" in query && this.#checkJSONSchemaType(query["feature"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "feature", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get business units
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.feature] -  If specified, the list of business units for which the user is authorized to use the requested feature will be returned
	 * @param {string} [query.divisionId] -  If specified, the list of business units belonging to the specified division will be returned
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunits(query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("feature" in query && this.#checkJSONSchemaType(query["feature"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "feature", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add a new business unit
	 * @async
	 * @param {CreateBusinessUnitRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunits(body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get business units across divisions
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.divisionId] -  The divisionIds to filter by. If omitted, will return business units in all divisions
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/divisionviews" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitsDivisionviews(query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/divisionviews";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get management unit
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementManagementunit(managementUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete management unit
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementManagementunit(managementUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the requested management unit
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {UpdateManagementUnitRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunit(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Move the requested management unit to a new business unit
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {MoveManagementUnitRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/move" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitMove(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/move";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get management units
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Deprecated, paging is not supported
	 * @param {number} [query.pageNumber] -  Deprecated, paging is not supported
	 * @param {string} [query.expand] -  Deprecated, expand settings on the single MU route
	 * @param {string} [query.feature] -  If specified, the list of management units for which the user is authorized to use the requested feature will be returned
	 * @param {string} [query.divisionId] -  If specified, the list of management units belonging to the specified division will be returned
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementManagementunits(query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
			if ("feature" in query && this.#checkJSONSchemaType(query["feature"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "feature", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add a management unit
	 * @async
	 * @param {CreateManagementUnitApiRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunits(body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get management units across divisions
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.divisionId] -  The divisionIds to filter by. If omitted, will return all divisions
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/divisionviews" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementManagementunitsDivisionviews(query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/divisionviews";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets all the shift trades for a given agent
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} agentId - The agent id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}/shifttrades" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitAgentShifttrades(managementUnitId, agentId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}/shifttrades";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(agentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "agentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.agentId = agentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get data for agent in the management unit
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} agentId - The agent id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.excludeCapabilities] -  Excludes all capabilities of the agent such as queues, languages, and skills
	 * @param {string[]} [query.expand] -  
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementManagementunitAgent(managementUnitId, agentId, query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/{agentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(agentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "agentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("excludeCapabilities" in query && this.#checkJSONSchemaType(query["excludeCapabilities"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludeCapabilities", "boolean");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.agentId = agentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update agent configurations
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {UpdateMuAgentsRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunitAgents(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get agents work plans configuration
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @param {GetAgentsWorkPlansRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/workplans/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitAgentsWorkplansQuery(managementUnitId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/workplans/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates agent work plan configuration
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {UpdateMuAgentWorkPlansBatchRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/workplans/bulk" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunitAgentsWorkplansBulk(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agents/workplans/bulk";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get users in the management unit
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitUsers(managementUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a planning group
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @param {string} planningGroupId - The ID of a planning group to fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(planningGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "planningGroupId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.planningGroupId = planningGroupId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes the planning group
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @param {string} planningGroupId - The ID of a planning group to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(planningGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "planningGroupId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.planningGroupId = planningGroupId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates the planning group
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @param {string} planningGroupId - The ID of a planning group to update
	 * @param {UpdatePlanningGroupRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitPlanninggroup(businessUnitId, planningGroupId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups/{planningGroupId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(planningGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "planningGroupId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.planningGroupId = planningGroupId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets list of planning groups
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitPlanninggroups(businessUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Adds a new planning group
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @param {CreatePlanningGroupRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitPlanninggroups(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/planninggroups";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a service goal template
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @param {string} serviceGoalTemplateId - The ID of a service goal template to fetch
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Include to access additional data on the service goal template
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(serviceGoalTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "serviceGoalTemplateId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.serviceGoalTemplateId = serviceGoalTemplateId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a service goal template
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @param {string} serviceGoalTemplateId - The ID of the service goal template to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(serviceGoalTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "serviceGoalTemplateId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.serviceGoalTemplateId = serviceGoalTemplateId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates a service goal template
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @param {string} serviceGoalTemplateId - The ID of a service goal template to update
	 * @param {UpdateServiceGoalTemplate} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitServicegoaltemplate(businessUnitId, serviceGoalTemplateId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates/{serviceGoalTemplateId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(serviceGoalTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "serviceGoalTemplateId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.serviceGoalTemplateId = serviceGoalTemplateId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets list of service goal templates
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Include to access additional data on the service goal template
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Adds a new service goal template
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit.
	 * @param {CreateServiceGoalTemplate} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitServicegoaltemplates(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/servicegoaltemplates";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets list of users available for whom you can send direct shift trade requests
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/users" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitShifttradesUsers(managementUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/users";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a summary of all shift trades in the matched state
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/matched" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitShifttradesMatched(managementUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shifttrades/matched";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a list of staffing groups
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.managementUnitId] -  The ID of the management unit to get management unit specific staffing groups
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitStaffinggroups(businessUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("managementUnitId" in query && this.#checkJSONSchemaType(query["managementUnitId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates a new staffing group
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {CreateStaffingGroupRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitStaffinggroups(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a staffing group
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} staffingGroupId - The ID of the staffing group to fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups/{staffingGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitStaffinggroup(businessUnitId, staffingGroupId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups/{staffingGroupId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(staffingGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "staffingGroupId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.staffingGroupId = staffingGroupId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes a staffing group
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} staffingGroupId - The ID of the staffing group to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups/{staffingGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitStaffinggroup(businessUnitId, staffingGroupId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups/{staffingGroupId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(staffingGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "staffingGroupId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.staffingGroupId = staffingGroupId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates a staffing group
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} staffingGroupId - The ID of the staffing group to update
	 * @param {UpdateStaffingGroupRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups/{staffingGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitStaffinggroup(businessUnitId, staffingGroupId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups/{staffingGroupId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(staffingGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "staffingGroupId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.staffingGroupId = staffingGroupId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a list of time off limit objects under management unit.
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitTimeofflimits(managementUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates a new time off limit object under management unit.
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {CreateTimeOffLimitRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitTimeofflimits(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a time off limit object
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {string} timeOffLimitId - The ID of the time off limit to fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffLimitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffLimitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.timeOffLimitId = timeOffLimitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes a time off limit object
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {string} timeOffLimitId - The ID of the time off limit object to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffLimitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffLimitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.timeOffLimitId = timeOffLimitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates a time off limit object.
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {string} timeOffLimitId - The id of time off limit object to update
	 * @param {UpdateTimeOffLimitRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunitTimeofflimit(managementUnitId, timeOffLimitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffLimitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffLimitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.timeOffLimitId = timeOffLimitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Sets daily values for a date range of time off limit object
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {string} timeOffLimitId - The ID of the time off limit object to set values for
	 * @param {SetTimeOffLimitValuesRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}/values" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putWorkforcemanagementManagementunitTimeofflimitValues(managementUnitId, timeOffLimitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/{timeOffLimitId}/values";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffLimitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffLimitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.timeOffLimitId = timeOffLimitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves time off limit related values based on a given set of filters.
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {QueryTimeOffLimitValuesRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/values/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitTimeofflimitsValuesQuery(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeofflimits/values/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a list of time off plans
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitTimeoffplans(managementUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates a new time off plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @param {CreateTimeOffPlanRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitTimeoffplans(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a time off plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @param {string} timeOffPlanId - The ID of the time off plan to fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffPlanId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.timeOffPlanId = timeOffPlanId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes a time off plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @param {string} timeOffPlanId - The ID of the time off plan to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffPlanId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.timeOffPlanId = timeOffPlanId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates a time off plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @param {string} timeOffPlanId - The ID of the time off plan to update
	 * @param {UpdateTimeOffPlanRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunitTimeoffplan(managementUnitId, timeOffPlanId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffplans/{timeOffPlanId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffPlanId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.timeOffPlanId = timeOffPlanId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Estimates available time off for an agent
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @param {string} userId - The id of the user for whom the time off request estimate is requested
	 * @param {EstimateAvailableTimeOffRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/estimate" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitUserTimeoffrequestsEstimate(managementUnitId, userId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/estimate";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves integration statuses for a list of time off requests
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {QueryTimeOffIntegrationStatusRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/integrationstatus/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitTimeoffrequestsIntegrationstatusQuery(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/integrationstatus/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Set integration status for a time off request.
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {string} timeOffRequestId - The ID of the time off request.
	 * @param {string} userId - The ID of user to whom the time off request belongs.
	 * @param {SetTimeOffIntegrationStatusRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/{timeOffRequestId}/users/{userId}/integrationstatus" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunitTimeoffrequestUserIntegrationstatus(managementUnitId, timeOffRequestId, userId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/{timeOffRequestId}/users/{userId}/integrationstatus";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffRequestId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.timeOffRequestId = timeOffRequestId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves time off limit, allocated and waitlisted values according to specific time off request
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {string} userId - The userId to whom the time off request applies.
	 * @param {string} timeOffRequestId - The ID of the time off request, which dates and activityCodeId determine limit values to retrieve
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}/timeofflimits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitUserTimeoffrequestTimeofflimits(managementUnitId, userId, timeOffRequestId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}/timeofflimits";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffRequestId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.pathParameters.timeOffRequestId = timeOffRequestId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of time off requests for a given user
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} userId - The userId to whom the Time Off Request applies.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitUserTimeoffrequests(managementUnitId, userId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.userId = userId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a time off request
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} userId - The userId to whom the Time Off Request applies.
	 * @param {string} timeOffRequestId - Time Off Request Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffRequestId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.pathParameters.timeOffRequestId = timeOffRequestId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a time off request
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} userId - The id of the user the requested time off request belongs to
	 * @param {string} timeOffRequestId - The id of the time off request to update
	 * @param {AdminTimeOffRequestPatch} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunitUserTimeoffrequest(managementUnitId, userId, timeOffRequestId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffRequestId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.pathParameters.timeOffRequestId = timeOffRequestId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new time off request
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {CreateAdminTimeOffRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitTimeoffrequests(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetches time off requests matching the conditions specified in the request body
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @param {TimeOffRequestQueryBody} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitTimeoffrequestsQuery(managementUnitId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves daily waitlist position for a list of time off requests
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {QueryWaitlistPositionsRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/waitlistpositions/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitTimeoffrequestsWaitlistpositionsQuery(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/timeoffrequests/waitlistpositions/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets staffing group associations for a list of user IDs
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {QueryUserStaffingGroupListRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitStaffinggroupsQuery(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/staffinggroups/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Searches for potential shift trade matches for the current agent
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} weekDateId - The start week date of the initiating shift in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @param {SearchShiftTradesRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitWeekShifttradesSearch(managementUnitId, weekDateId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/search";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets all the shift trades for a given week
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} weekDateId - The start week date of the initiating shift in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.evaluateMatches] -  Whether to evaluate the matches for violations
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("evaluateMatches" in query && this.#checkJSONSchemaType(query["evaluateMatches"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "evaluateMatches", "boolean");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Adds a shift trade
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} weekDateId - The start week date of the initiating shift in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {AddShiftTradeRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitWeekShifttrades(managementUnitId, weekDateId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates the state of a batch of shift trades
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} weekDateId - The start week date of the initiating shift in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes
	 * @param {BulkShiftTradeStateUpdateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/state/bulk" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitWeekShifttradesStateBulk(managementUnitId, weekDateId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/state/bulk";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates a shift trade. This route can only be called by the initiating agent
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} weekDateId - The start week date of the initiating shift in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} tradeId - The ID of the shift trade to update
	 * @param {PatchShiftTradeRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunitWeekShifttrade(managementUnitId, weekDateId, tradeId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(tradeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "tradeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.tradeId = tradeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Matches a shift trade. This route can only be called by the receiving agent
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} weekDateId - The start week date of the initiating shift in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} tradeId - The ID of the shift trade to update
	 * @param {MatchShiftTradeRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}/match" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitWeekShifttradeMatch(managementUnitId, weekDateId, tradeId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekDateId}/shifttrades/{tradeId}/match";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekDateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekDateId", "string");
		}

		if (this.#checkJSONSchemaType(tradeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "tradeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.weekDateId = weekDateId;
		apiCallOptions.pathParameters.tradeId = tradeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Move agents in and out of management unit
	 * @async
	 * @param {MoveAgentsRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAgents(body) {
		const endpointPath = "/api/v2/workforcemanagement/agents";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the management unit to which the agent belongs
	 * @async
	 * @param {string} agentId - The ID of the agent to look up
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents/{agentId}/managementunit" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAgentManagementunit(agentId) {
		const endpointPath = "/api/v2/workforcemanagement/agents/{agentId}/managementunit";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(agentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "agentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.agentId = agentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the management unit to which the currently logged in agent belongs
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents/me/managementunit" endpoint.
	 */
	getWorkforcemanagementAgentsMeManagementunit() {
		const endpointPath = "/api/v2/workforcemanagement/agents/me/managementunit";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Validate Work Plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} workPlanId - The ID of the work plan to validate. For new work plan, use the word 'new' for the ID.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  
	 * @param {WorkPlanValidationRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/validate" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitWorkplanValidate(managementUnitId, workPlanId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/validate";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(workPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workPlanId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.workPlanId = workPlanId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a work plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} workPlanId - The ID of the work plan to fetch
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.includeOnly] -  limit response to the specified fields
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(workPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workPlanId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeOnly" in query && this.#checkJSONSchemaType(query["includeOnly"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeOnly", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.workPlanId = workPlanId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a work plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} workPlanId - The ID of the work plan to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(workPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workPlanId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.workPlanId = workPlanId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a work plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} workPlanId - The ID of the work plan to update
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.validationMode] -  Allows to update work plan even if validation result is invalid
	 * @param {WorkPlan} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunitWorkplan(managementUnitId, workPlanId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(workPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workPlanId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("validationMode" in query && this.#checkJSONSchemaType(query["validationMode"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "validationMode", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.workPlanId = workPlanId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get work plans
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  Include to access additional data on the work plans
	 * @param {string[]} [query.exclude] -  Exclude specific data on the work plans from the response
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementManagementunitWorkplans(managementUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("exclude" in query && this.#checkJSONSchemaType(query["exclude"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "exclude", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new work plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.validationMode] -  Allows to create work plan even if the validation result is invalid
	 * @param {CreateWorkPlan} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitWorkplans(managementUnitId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("validationMode" in query && this.#checkJSONSchemaType(query["validationMode"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "validationMode", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a copy of work plan
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} workPlanId - The ID of the work plan to create a copy
	 * @param {CopyWorkPlan} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitWorkplanCopy(managementUnitId, workPlanId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplans/{workPlanId}/copy";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(workPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workPlanId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.workPlanId = workPlanId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get work plan rotations
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new work plan rotation
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {AddWorkPlanRotationRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitWorkplanrotations(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a copy of work plan rotation
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} workPlanRotationId - The ID of the work plan rotation to create a copy
	 * @param {CopyWorkPlanRotationRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}/copy" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitWorkplanrotationCopy(managementUnitId, workPlanRotationId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}/copy";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(workPlanRotationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workPlanRotationId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.workPlanRotationId = workPlanRotationId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a work plan rotation
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} workPlanRotationId - The ID of the work plan rotation to fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(workPlanRotationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workPlanRotationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.workPlanRotationId = workPlanRotationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a work plan rotation
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} workPlanRotationId - The ID of the work plan rotation to be deleted
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(workPlanRotationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workPlanRotationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.workPlanRotationId = workPlanRotationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a work plan rotation
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} workPlanRotationId - The ID of the work plan rotation to update
	 * @param {UpdateWorkPlanRotationRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementManagementunitWorkplanrotation(managementUnitId, workPlanRotationId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/workplanrotations/{workPlanRotationId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(workPlanRotationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workPlanRotationId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.workPlanRotationId = workPlanRotationId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets the latest job for all activity plans in the business unit
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitActivityplansJobs(businessUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/jobs";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an activity plan
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} activityPlanId - The ID of the activity plan to fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/{activityPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitActivityplan(businessUnitId, activityPlanId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/{activityPlanId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(activityPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "activityPlanId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.activityPlanId = activityPlanId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an activity plan
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} activityPlanId - The ID of the activity plan to update
	 * @param {UpdateActivityPlanRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/{activityPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitActivityplan(businessUnitId, activityPlanId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/{activityPlanId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(activityPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "activityPlanId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.activityPlanId = activityPlanId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get activity plans
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.state] -  Optionally filter by activity plan state
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitActivityplans(businessUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("state" in query && this.#checkJSONSchemaType(query["state"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "state", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an activity plan
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {CreateActivityPlanRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitActivityplans(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Run an activity plan manually
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} activityPlanId - The ID of the activity plan to run
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/{activityPlanId}/runs/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitActivityplanRunsJobs(businessUnitId, activityPlanId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/{activityPlanId}/runs/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(activityPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "activityPlanId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.activityPlanId = activityPlanId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets an activity plan run job
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} activityPlanId - The ID of the activity plan associated with the run job
	 * @param {string} jobId - The ID of the activity plan run job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/{activityPlanId}/runs/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitActivityplanRunsJob(businessUnitId, activityPlanId, jobId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/activityplans/{activityPlanId}/runs/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(activityPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "activityPlanId", "string");
		}

		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.activityPlanId = activityPlanId;
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the status of an adherence explanation operation. Only the user who started the operation can query the status
	 * @async
	 * @param {string} jobId - The ID of the job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/adherence/explanations/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAdherenceExplanationsJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/adherence/explanations/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an adherence explanation
	 * @async
	 * @param {string} agentId - The ID of the agent to query
	 * @param {string} explanationId - The ID of the explanation to update
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations/{explanationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAgentAdherenceExplanation(agentId, explanationId) {
		const endpointPath = "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations/{explanationId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(agentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "agentId", "string");
		}

		if (this.#checkJSONSchemaType(explanationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "explanationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.agentId = agentId;
		apiCallOptions.pathParameters.explanationId = explanationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an adherence explanation
	 * @async
	 * @param {string} agentId - The ID of the agent to query
	 * @param {string} explanationId - The ID of the explanation to update
	 * @param {UpdateAdherenceExplanationStatusRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations/{explanationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementAgentAdherenceExplanation(agentId, explanationId, body) {
		const endpointPath = "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations/{explanationId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(agentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "agentId", "string");
		}

		if (this.#checkJSONSchemaType(explanationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "explanationId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.agentId = agentId;
		apiCallOptions.pathParameters.explanationId = explanationId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query adherence explanations for the given agent across a specified range
	 * @async
	 * @param {string} agentId - The ID of the agent to query
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @param {AgentQueryAdherenceExplanationsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAgentAdherenceExplanationsQuery(agentId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(agentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "agentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.agentId = agentId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add an adherence explanation for the requested user
	 * @async
	 * @param {string} agentId - The ID of the agent to query
	 * @param {AddAdherenceExplanationAdminRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAgentAdherenceExplanations(agentId, body) {
		const endpointPath = "/api/v2/workforcemanagement/agents/{agentId}/adherence/explanations";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(agentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "agentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.agentId = agentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query adherence explanations across an entire business unit for the requested period
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @param {BuQueryAdherenceExplanationsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/adherence/explanations/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitAdherenceExplanationsQuery(businessUnitId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/adherence/explanations/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an adherence explanation for the current user
	 * @async
	 * @param {string} explanationId - The ID of the explanation to update
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/adherence/explanations/{explanationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAdherenceExplanation(explanationId) {
		const endpointPath = "/api/v2/workforcemanagement/adherence/explanations/{explanationId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(explanationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "explanationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.explanationId = explanationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Submit an adherence explanation for the current user
	 * @async
	 * @param {AddAdherenceExplanationAgentRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/adherence/explanations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAdherenceExplanations(body) {
		const endpointPath = "/api/v2/workforcemanagement/adherence/explanations";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query adherence explanations for the current user
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @param {AgentQueryAdherenceExplanationsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/adherence/explanations/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAdherenceExplanationsQuery(query, body) {
		const endpointPath = "/api/v2/workforcemanagement/adherence/explanations/query";
		const endpointMethod = "POST";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request a historical adherence report in bulk
	 * @async
	 * @param {WfmHistoricalAdherenceBulkQuery} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/adherence/historical/bulk" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAdherenceHistoricalBulk(body) {
		const endpointPath = "/api/v2/workforcemanagement/adherence/historical/bulk";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request to fetch the status of the historical adherence bulk job. Only the user who started the operation can query the status
	 * @async
	 * @param {string} jobId - ID of the job to get
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/adherence/historical/bulk/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAdherenceHistoricalBulkJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/adherence/historical/bulk/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deprecated. Use bulk routes instead (/adherence/historical/bulk)
	 * @async
	 * @param {WfmHistoricalAdherenceQueryForUsers} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/adherence/historical" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postWorkforcemanagementAdherenceHistorical(body) {
		const endpointPath = "/api/v2/workforcemanagement/adherence/historical";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the status of a historical adherence request operation. Only the user who started the operation can query the status
	 * @async
	 * @param {string} jobId - jobId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/adherence/historical/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAdherenceHistoricalJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/adherence/historical/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request a historical adherence report
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @param {WfmHistoricalAdherenceQuery} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/historicaladherencequery" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitHistoricaladherencequery(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/historicaladherencequery";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request a teams historical adherence report
	 * @async
	 * @param {string} teamId - The ID of the team
	 * @param {WfmHistoricalAdherenceQueryForTeams} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/teams/{teamId}/adherence/historical" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementTeamAdherenceHistorical(teamId, body) {
		const endpointPath = "/api/v2/workforcemanagement/teams/{teamId}/adherence/historical";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(teamId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "teamId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.teamId = teamId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of user schedule adherence records for the requested management unit
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service.  For testing/app development purposes
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/adherence" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementManagementunitAdherence(managementUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/adherence";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of UserScheduleAdherence records for the requested users
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} query.userId -  User Id(s) for which to fetch current schedule adherence information.  Min 1, Max of 100 userIds per request
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/adherence" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementAdherence(query) {
		const endpointPath = "/api/v2/workforcemanagement/adherence";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("userId" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "userId");
		}

		if (this.#checkJSONSchemaType(query["userId"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "array");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get agent possible work shifts for requested time frame
	 * @async
	 * @param {AgentPossibleWorkShiftsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents/me/possibleworkshifts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAgentsMePossibleworkshifts(body) {
		const endpointPath = "/api/v2/workforcemanagement/agents/me/possibleworkshifts";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get alternative shifts settings for a business unit
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/settings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitAlternativeshiftsSettings(businessUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/settings";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update alternative shifts settings for a business unit
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {UpdateAlternativeShiftBuSettingsRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/settings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitAlternativeshiftsSettings(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/settings";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the status of an alternative shift search trade operation. Only the user who started the operation can query the status
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} jobId - The ID of the job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/trades/search/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitAlternativeshiftsTradesSearchJob(businessUnitId, jobId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/trades/search/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an alternative shifts trade in a business unit for a given trade ID
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} tradeId - The ID of the alternative shift trade
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/trades/{tradeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitAlternativeshiftsTrade(businessUnitId, tradeId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/trades/{tradeId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(tradeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "tradeId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.tradeId = tradeId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List alternative shifts trades for a given management unit or agent
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes
	 * @param {SearchAlternativeShiftTradesRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/trades/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitAlternativeshiftsTradesSearch(businessUnitId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/alternativeshifts/trades/search";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request a list of alternative shift offers for a given schedule
	 * @async
	 * @param {AlternativeShiftOffersRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/offers/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAlternativeshiftsOffersJobs(body) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/offers/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the status of an alternative shift offers operation. Only the user who started the operation can query the status
	 * @async
	 * @param {string} jobId - The ID of the job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/offers/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAlternativeshiftsOffersJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/offers/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request a search of alternative shift offers for a given shift
	 * @async
	 * @param {AlternativeShiftSearchOffersRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/offers/search/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAlternativeshiftsOffersSearchJobs(body) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/offers/search/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the status of an alternative shift search offers operation. Only the user who started the operation can query the status
	 * @async
	 * @param {string} jobId - The ID of the job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/offers/search/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAlternativeshiftsOffersSearchJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/offers/search/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of my alternative shifts trades
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification.  For testing/app development purposes
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/trades" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementAlternativeshiftsTrades(query) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/trades";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create my alternative shift trade using an existing offer's jobId
	 * @async
	 * @param {CreateAlternativeShiftTradeRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/trades" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAlternativeshiftsTrades(body) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/trades";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the status of an alternative shift trades operation. Only the user who started the operation can query the status
	 * @async
	 * @param {string} jobId - The ID of the job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/trades/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAlternativeshiftsTradesJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/trades/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get my alternative shift trade by trade ID
	 * @async
	 * @param {string} tradeId - The ID of the alternative shift trade
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/trades/{tradeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAlternativeshiftsTrade(tradeId) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/trades/{tradeId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(tradeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "tradeId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.tradeId = tradeId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update my alternative shifts trade by trade ID
	 * @async
	 * @param {string} tradeId - The ID of the alternative shift trade
	 * @param {AgentUpdateAlternativeShiftTradeRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/trades/{tradeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementAlternativeshiftsTrade(tradeId, body) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/trades/{tradeId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(tradeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "tradeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.tradeId = tradeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk update alternative shift trade states
	 * @async
	 * @param {AdminBulkUpdateAlternativeShiftTradeStateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/trades/state/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementAlternativeshiftsTradesStateJobs(body) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/trades/state/jobs";
		const endpointMethod = "PATCH";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the status of an alternative shift trade state operation. Only the user who started the operation can query the status
	 * @async
	 * @param {string} jobId - The ID of the job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/trades/state/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementAlternativeshiftsTradesStateJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/trades/state/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get existing calendar link for the current user
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/calendar/url/ics" endpoint.
	 */
	getWorkforcemanagementCalendarUrlIcs() {
		const endpointPath = "/api/v2/workforcemanagement/calendar/url/ics";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a newly generated calendar link for the current user; if the current user has previously generated one, the generated link will be returned
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.language] -  A language tag (which is sometimes referred to as a "locale identifier") to use to localize default activity code names in the ics-formatted calendar
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/calendar/url/ics" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	postWorkforcemanagementCalendarUrlIcs(query) {
		const endpointPath = "/api/v2/workforcemanagement/calendar/url/ics";
		const endpointMethod = "POST";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("language" in query && this.#checkJSONSchemaType(query["language"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "language", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Disable generated calendar link for the current user
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/calendar/url/ics" endpoint.
	 */
	deleteWorkforcemanagementCalendarUrlIcs() {
		const endpointPath = "/api/v2/workforcemanagement/calendar/url/ics";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Queries available time off for the current user
	 * @async
	 * @param {AvailableTimeOffRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeofflimits/available/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementTimeofflimitsAvailableQuery(body) {
		const endpointPath = "/api/v2/workforcemanagement/timeofflimits/available/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the daily waitlist positions of a time off request for the current user
	 * @async
	 * @param {string} timeOffRequestId - The ID of the time off request
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}/waitlistpositions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementTimeoffrequestWaitlistpositions(timeOffRequestId) {
		const endpointPath = "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}/waitlistpositions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(timeOffRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffRequestId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.timeOffRequestId = timeOffRequestId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of time off requests for the current user
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeoffrequests" endpoint.
	 */
	getWorkforcemanagementTimeoffrequests() {
		const endpointPath = "/api/v2/workforcemanagement/timeoffrequests";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a time off request for the current user
	 * @async
	 * @param {CreateAgentTimeOffRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeoffrequests" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementTimeoffrequests(body) {
		const endpointPath = "/api/v2/workforcemanagement/timeoffrequests";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a time off request for the current user
	 * @async
	 * @param {string} timeOffRequestId - The ID of the time off request
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementTimeoffrequest(timeOffRequestId) {
		const endpointPath = "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(timeOffRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffRequestId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.timeOffRequestId = timeOffRequestId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a time off request for the current user
	 * @async
	 * @param {string} timeOffRequestId - The ID of the time off request
	 * @param {AgentTimeOffRequestPatch} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementTimeoffrequest(timeOffRequestId, body) {
		const endpointPath = "/api/v2/workforcemanagement/timeoffrequests/{timeOffRequestId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(timeOffRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffRequestId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.timeOffRequestId = timeOffRequestId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets the list of work plan bids that belong to an agent
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/workplanbids" endpoint.
	 */
	getWorkforcemanagementWorkplanbids() {
		const endpointPath = "/api/v2/workforcemanagement/workplanbids";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets an agent's work plan bidding preference
	 * @async
	 * @param {string} bidId - The ID of the work plan bid
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/workplanbids/{bidId}/preferences" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementWorkplanbidPreferences(bidId) {
		const endpointPath = "/api/v2/workforcemanagement/workplanbids/{bidId}/preferences";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bidId = bidId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an agent's work plan bidding preference
	 * @async
	 * @param {string} bidId - The ID of the work plan bid
	 * @param {UpdateAgentWorkPlanBiddingPreference} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/workplanbids/{bidId}/preferences" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementWorkplanbidPreferences(bidId, body) {
		const endpointPath = "/api/v2/workforcemanagement/workplanbids/{bidId}/preferences";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bidId = bidId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets an agent's work plans for a bid
	 * @async
	 * @param {string} bidId - The ID of the work plan bid
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/workplanbids/{bidId}/workplans" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementWorkplanbidWorkplans(bidId) {
		const endpointPath = "/api/v2/workforcemanagement/workplanbids/{bidId}/workplans";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bidId = bidId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get alternative shifts settings from the current logged in agent’s business unit
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/alternativeshifts/settings" endpoint.
	 */
	getWorkforcemanagementAlternativeshiftsSettings() {
		const endpointPath = "/api/v2/workforcemanagement/alternativeshifts/settings";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get published schedule for the current user
	 * @async
	 * @param {BuGetCurrentAgentScheduleRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agentschedules/mine" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAgentschedulesMine(body) {
		const endpointPath = "/api/v2/workforcemanagement/agentschedules/mine";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get published schedule for the current user
	 * @async
	 * @param {CurrentUserScheduleRequestBody} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/schedules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postWorkforcemanagementSchedules(body) {
		const endpointPath = "/api/v2/workforcemanagement/schedules";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets all of my shift trades
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/shifttrades" endpoint.
	 */
	getWorkforcemanagementShifttrades() {
		const endpointPath = "/api/v2/workforcemanagement/shifttrades";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves integration statuses for a list of current user time off requests
	 * @async
	 * @param {CurrentUserTimeOffIntegrationStatusRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeoffrequests/integrationstatus/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementTimeoffrequestsIntegrationstatusQuery(body) {
		const endpointPath = "/api/v2/workforcemanagement/timeoffrequests/integrationstatus/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of notifications for the current user
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/notifications" endpoint.
	 */
	getWorkforcemanagementNotifications() {
		const endpointPath = "/api/v2/workforcemanagement/notifications";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Mark a list of notifications as read or unread
	 * @async
	 * @param {UpdateNotificationsRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/notifications/update" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementNotificationsUpdate(body) {
		const endpointPath = "/api/v2/workforcemanagement/notifications/update";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves delete job status for historical data imports associated with the job id
	 * @async
	 * @param {string} jobId - The job ID of the historical data delete request
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/historicaldata/bulk/remove/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementHistoricaldataBulkRemoveJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/historicaldata/bulk/remove/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves all delete job status for historical data
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/historicaldata/bulk/remove/jobs" endpoint.
	 */
	getWorkforcemanagementHistoricaldataBulkRemoveJobs() {
		const endpointPath = "/api/v2/workforcemanagement/historicaldata/bulk/remove/jobs";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete the list of the historical data import entries
	 * @async
	 * @param {HistoricalImportDeleteFilesJobRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/historicaldata/bulk/remove/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementHistoricaldataBulkRemoveJobs(body) {
		const endpointPath = "/api/v2/workforcemanagement/historicaldata/bulk/remove/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves delete job status for historical data imports of the organization.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/historicaldata/deletejob" endpoint.
	 * @deprecated
	 */
	getWorkforcemanagementHistoricaldataDeletejob() {
		const endpointPath = "/api/v2/workforcemanagement/historicaldata/deletejob";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete the entries of the historical data imports in the organization.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/historicaldata/deletejob" endpoint.
	 * @deprecated
	 */
	postWorkforcemanagementHistoricaldataDeletejob() {
		const endpointPath = "/api/v2/workforcemanagement/historicaldata/deletejob";
		const endpointMethod = "POST";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves status of the historical data imports associated with job id
	 * @async
	 * @param {string} jobId - The job Id of the historical data import request
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/historicaldata/importstatus/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementHistoricaldataImportstatusJobId(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/historicaldata/importstatus/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves status of the historical data imports of the organization
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/historicaldata/importstatus" endpoint.
	 */
	getWorkforcemanagementHistoricaldataImportstatus() {
		const endpointPath = "/api/v2/workforcemanagement/historicaldata/importstatus";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Trigger validation process for historical import
	 * @async
	 * @param {ValidationServiceRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/historicaldata/validate" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementHistoricaldataValidate(body) {
		const endpointPath = "/api/v2/workforcemanagement/historicaldata/validate";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query integrations for agents
	 * @async
	 * @param {QueryAgentsIntegrationsRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents/integrations/hris/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementAgentsIntegrationsHrisQuery(body) {
		const endpointPath = "/api/v2/workforcemanagement/agents/integrations/hris/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update integrations for agent
	 * @async
	 * @param {string} agentId - The ID of the agent
	 * @param {AgentIntegrationsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/agents/{agentId}/integrations/hris" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putWorkforcemanagementAgentIntegrationsHris(agentId, body) {
		const endpointPath = "/api/v2/workforcemanagement/agents/{agentId}/integrations/hris";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(agentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "agentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.agentId = agentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the results of time off types job
	 * @async
	 * @param {string} jobId - The ID of the job.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/integrations/hris/timeofftypes/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementIntegrationsHrisTimeofftypesJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/integrations/hris/timeofftypes/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get integrations
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/integrations/hris" endpoint.
	 */
	getWorkforcemanagementIntegrationsHris() {
		const endpointPath = "/api/v2/workforcemanagement/integrations/hris";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get list of time off types configured in integration
	 * @async
	 * @param {string} hrisIntegrationId - The ID of the HRIS integration for which time off types are queried.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/integrations/hris/{hrisIntegrationId}/timeofftypes/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postWorkforcemanagementIntegrationsHriTimeofftypesJobs(hrisIntegrationId) {
		const endpointPath = "/api/v2/workforcemanagement/integrations/hris/{hrisIntegrationId}/timeofftypes/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(hrisIntegrationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "hrisIntegrationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.hrisIntegrationId = hrisIntegrationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the performance prediction for the associated schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the performance prediction belongs
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format
	 * @param {string} scheduleId - The ID of the schedule the performance prediction belongs to
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/performancepredictions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekSchedulePerformancepredictions(businessUnitId, weekId, scheduleId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/performancepredictions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Upload daily activity changes to be able to request a performance prediction recalculation
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the performance prediction belongs
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format
	 * @param {string} scheduleId - The ID of the schedule the performance prediction belongs to
	 * @param {UploadUrlRequestBody} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/performancepredictions/recalculations/uploadurl" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekSchedulePerformancepredictionsRecalculationsUploadurl(businessUnitId, weekId, scheduleId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/performancepredictions/recalculations/uploadurl";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request a daily recalculation of the performance prediction for the associated schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the performance prediction belongs
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format
	 * @param {string} scheduleId - The ID of the schedule the performance prediction belongs to
	 * @param {WfmProcessUploadRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/performancepredictions/recalculations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekSchedulePerformancepredictionsRecalculations(businessUnitId, weekId, scheduleId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/performancepredictions/recalculations";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get recalculated performance prediction result
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit to which the performance prediction belongs
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format
	 * @param {string} scheduleId - The ID of the schedule the recalculation belongs to
	 * @param {string} recalculationId - The ID of the recalculation request
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/performancepredictions/recalculations/{recalculationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekSchedulePerformancepredictionsRecalculation(businessUnitId, weekId, scheduleId, recalculationId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/performancepredictions/recalculations/{recalculationId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		if (this.#checkJSONSchemaType(recalculationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "recalculationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.pathParameters.recalculationId = recalculationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the list of scheduling runs
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitSchedulingRuns(businessUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a scheduling run
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} runId - The ID of the schedule run
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(runId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "runId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.runId = runId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Cancel a scheduling run
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} runId - The ID of the schedule run
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(runId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "runId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.runId = runId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Mark a schedule run as applied
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} runId - The ID of the schedule run
	 * @param {PatchBuScheduleRunRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitSchedulingRun(businessUnitId, runId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(runId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "runId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.runId = runId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the result of a rescheduling operation
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} runId - The ID of the schedule run
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} query.managementUnitIds -  The IDs of the management units for which to fetch the reschedule results
	 * @param {string[]} query.expand -  The fields to expand. Omitting will return an empty response
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}/result" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitSchedulingRunResult(businessUnitId, runId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/scheduling/runs/{runId}/result";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(runId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "runId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("managementUnitIds" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "managementUnitIds");
		}

		if (this.#checkJSONSchemaType(query["managementUnitIds"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitIds", "array");
		}

		if ("expand" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "expand");
		}

		if (this.#checkJSONSchemaType(query["expand"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.runId = runId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Search published schedules
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @param {BuSearchAgentSchedulesRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/agentschedules/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitAgentschedulesSearch(businessUnitId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/agentschedules/search";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the metadata for the schedule, describing which management units and agents are in the scheduleSchedule data can then be loaded with the query route
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.expand] -  expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitWeekSchedule(businessUnitId, weekId, scheduleId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Start a rescheduling run
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule
	 * @param {BuRescheduleRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekScheduleReschedule(businessUnitId, weekId, scheduleId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/reschedule";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the list of week schedules for the specified week
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format, or 'recent' (without quotes) to get recent schedules
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeOnlyPublished] -  includeOnlyPublished
	 * @param {string} [query.expand] -  expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeOnlyPublished" in query && this.#checkJSONSchemaType(query["includeOnlyPublished"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeOnlyPublished", "boolean");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a blank schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {BuCreateBlankScheduleRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekSchedules(businessUnitId, weekId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates a signed upload URL for importing a schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {UploadUrlRequestBody} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/import/uploadurl" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekSchedulesImportUploadurl(businessUnitId, weekId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/import/uploadurl";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Starts processing a schedule import
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {WfmProcessUploadRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/import" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekSchedulesImport(businessUnitId, weekId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/import";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Generate a schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {BuGenerateScheduleRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/generate" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekSchedulesGenerate(businessUnitId, weekId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/generate";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Copy a schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule to copy
	 * @param {BuCopyScheduleRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekScheduleCopy(businessUnitId, weekId, scheduleId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/copy";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the generation results for a generated schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekScheduleGenerationresults(businessUnitId, weekId, scheduleId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/generationresults";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the headcount forecast by planning group for the schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceDownload] -  Whether to force the result to come via download url.  For testing purposes only
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/headcountforecast" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekScheduleHeadcountforecast(businessUnitId, weekId, scheduleId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/headcountforecast";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceDownload" in query && this.#checkJSONSchemaType(query["forceDownload"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownload", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Loads agent schedule data from the schedule. Used in combination with the metadata route
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @param {BuQueryAgentSchedulesRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/agentschedules/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekScheduleAgentschedulesQuery(businessUnitId, weekId, scheduleId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/agentschedules/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Loads agent's schedule history.
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule
	 * @param {string} agentId - THe ID of the agent
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/history/agents/{agentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWeekScheduleHistoryAgent(businessUnitId, weekId, scheduleId, agentId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/history/agents/{agentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		if (this.#checkJSONSchemaType(agentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "agentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.pathParameters.agentId = agentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates a signed upload URL for updating a schedule
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule
	 * @param {UploadUrlRequestBody} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/update/uploadurl" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekScheduleUpdateUploadurl(businessUnitId, weekId, scheduleId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/update/uploadurl";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Starts processing a schedule update
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
	 * @param {string} scheduleId - The ID of the schedule
	 * @param {ProcessScheduleUpdateUploadRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/update" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWeekScheduleUpdate(businessUnitId, weekId, scheduleId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/weeks/{weekId}/schedules/{scheduleId}/update";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query published schedules for given given time range for set of users
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.forceAsync] -  Force the result of this operation to be sent asynchronously via notification. For testing/app development purposes
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @param {BuSearchAgentSchedulesRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agentschedules/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitAgentschedulesSearch(managementUnitId, query, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/agentschedules/search";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("forceAsync" in query && this.#checkJSONSchemaType(query["forceAsync"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceAsync", "boolean");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query published schedules for given given time range for set of users
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {UserListScheduleRequestBody} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/schedules/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postWorkforcemanagementManagementunitSchedulesSearch(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/schedules/search";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deprecated.  Use the equivalent business unit resource instead. Get the list of schedules in a week in management unit
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeOnlyPublished] -  Return only published schedules
	 * @param {string} [query.earliestWeekDate] -  The start date of the earliest week to query in yyyy-MM-dd format
	 * @param {string} [query.latestWeekDate] -  The start date of the latest week to query in yyyy-MM-dd format
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @deprecated
	 */
	getWorkforcemanagementManagementunitWeekSchedules(managementUnitId, weekId, query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeOnlyPublished" in query && this.#checkJSONSchemaType(query["includeOnlyPublished"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeOnlyPublished", "boolean");
			}
			if ("earliestWeekDate" in query && this.#checkJSONSchemaType(query["earliestWeekDate"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "earliestWeekDate", "string");
			}
			if ("latestWeekDate" in query && this.#checkJSONSchemaType(query["latestWeekDate"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "latestWeekDate", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deprecated.  Use the equivalent business unit resource instead. Get a week schedule
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit, or 'mine' for the management unit of the logged-in user.
	 * @param {string} weekId - First day of schedule week in yyyy-MM-dd format.
	 * @param {string} scheduleId - The ID of the schedule to fetch
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.expand] -  Which fields, if any, to expand
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service.  For testing/app development purposes
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @deprecated
	 */
	getWorkforcemanagementManagementunitWeekSchedule(managementUnitId, weekId, scheduleId, query) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/weeks/{weekId}/schedules/{scheduleId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(weekId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "weekId", "string");
		}

		if (this.#checkJSONSchemaType(scheduleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "scheduleId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "string");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.weekId = weekId;
		apiCallOptions.pathParameters.scheduleId = scheduleId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get status of the scheduling job
	 * @async
	 * @param {string} jobId - The id of the scheduling job
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/schedulingjobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementSchedulingjob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/schedulingjobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request to fetch the status of the historical shrinkage query
	 * @async
	 * @param {string} jobId - jobId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/shrinkage/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementShrinkageJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/shrinkage/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request a historical shrinkage report
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @param {WfmHistoricalShrinkageRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shrinkage/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitShrinkageJobs(managementUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/shrinkage/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Request a historical shrinkage report
	 * @async
	 * @param {string} teamId - The ID of the team
	 * @param {WfmHistoricalShrinkageTeamsRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/teams/{teamId}/shrinkage/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementTeamShrinkageJobs(teamId, body) {
		const endpointPath = "/api/v2/workforcemanagement/teams/{teamId}/shrinkage/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(teamId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "teamId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.teamId = teamId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query time off balances for the current user for specified activity code and dates
	 * @async
	 * @param {TimeOffBalanceRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeoffbalance/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementTimeoffbalanceJobs(body) {
		const endpointPath = "/api/v2/workforcemanagement/timeoffbalance/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query the results of time off types job
	 * @async
	 * @param {string} jobId - The ID of the job.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/timeoffbalance/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementTimeoffbalanceJob(jobId) {
		const endpointPath = "/api/v2/workforcemanagement/timeoffbalance/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query time off balances for dates spanned by a given time off request
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit.
	 * @param {string} userId - The userId to whom the time off request applies.
	 * @param {string} timeOffRequestId - The time off request id.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}/timeoffbalance/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitUserTimeoffrequestTimeoffbalanceJobs(managementUnitId, userId, timeOffRequestId) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffrequests/{timeOffRequestId}/timeoffbalance/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffRequestId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffRequestId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.pathParameters.timeOffRequestId = timeOffRequestId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query time off balances for a given user for specified activity code and dates
	 * @async
	 * @param {string} managementUnitId - The ID of the management unit
	 * @param {string} userId - The ID of the user
	 * @param {TimeOffBalanceRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffbalance/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementManagementunitUserTimeoffbalanceJobs(managementUnitId, userId, body) {
		const endpointPath = "/api/v2/workforcemanagement/managementunits/{managementUnitId}/users/{userId}/timeoffbalance/jobs";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(managementUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.managementUnitId = managementUnitId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a list of time-off limit objects
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.managementUnitId] -  The ID of the management unit to get management unit specific time-off limit objects
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitTimeofflimits(businessUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("managementUnitId" in query && this.#checkJSONSchemaType(query["managementUnitId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates a new time-off limit object
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {BuCreateTimeOffLimitRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitTimeofflimits(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a time-off limit object
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} timeOffLimitId - The ID of the time-off limit to fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits/{timeOffLimitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitTimeofflimit(businessUnitId, timeOffLimitId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits/{timeOffLimitId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffLimitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffLimitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.timeOffLimitId = timeOffLimitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes a time-off limit object
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} timeOffLimitId - The ID of the time-off limit object to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits/{timeOffLimitId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitTimeofflimit(businessUnitId, timeOffLimitId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits/{timeOffLimitId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffLimitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffLimitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.timeOffLimitId = timeOffLimitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Sets daily values for a date range of time-off limit object
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} timeOffLimitId - The ID of the time-off limit object to set values for
	 * @param {BuSetTimeOffLimitValuesRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits/{timeOffLimitId}/values" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putWorkforcemanagementBusinessunitTimeofflimitValues(businessUnitId, timeOffLimitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits/{timeOffLimitId}/values";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffLimitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffLimitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.timeOffLimitId = timeOffLimitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieves time-off limit related values based on a given set of filters.
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {QueryTimeOffLimitValuesRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits/values/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitTimeofflimitsValuesQuery(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeofflimits/values/query";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a list of time-off plans
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.managementUnitId] -  The ID of the management unit to get management unit specific staffing groups
	 * @param {boolean} [query.forceDownloadService] -  Force the result of this operation to be sent via download service. For testing/app development purposes
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitTimeoffplans(businessUnitId, query) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("managementUnitId" in query && this.#checkJSONSchemaType(query["managementUnitId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "managementUnitId", "string");
			}
			if ("forceDownloadService" in query && this.#checkJSONSchemaType(query["forceDownloadService"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "forceDownloadService", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Creates a new time-off plan
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {BuCreateTimeOffPlanRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitTimeoffplans(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets a time-off plan
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} timeOffPlanId - The ID of the time-off plan to fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans/{timeOffPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitTimeoffplan(businessUnitId, timeOffPlanId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans/{timeOffPlanId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffPlanId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.timeOffPlanId = timeOffPlanId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes a time-off plan
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} timeOffPlanId - The ID of the time-off plan to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans/{timeOffPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitTimeoffplan(businessUnitId, timeOffPlanId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans/{timeOffPlanId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffPlanId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.timeOffPlanId = timeOffPlanId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Updates a time-off plan
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} timeOffPlanId - The ID of the time-off plan to update
	 * @param {BuUpdateTimeOffPlanRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans/{timeOffPlanId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitTimeoffplan(businessUnitId, timeOffPlanId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/timeoffplans/{timeOffPlanId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(timeOffPlanId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "timeOffPlanId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.timeOffPlanId = timeOffPlanId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get summary of bid groups that belong to a work plan bid
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The work plan bid id of the bid groups
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/summary" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWorkplanbidGroupsSummary(businessUnitId, bidId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/summary";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add a bid group in a given work plan bid
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The work plan bid id of the bid groups
	 * @param {WorkPlanBidGroupCreate} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWorkplanbidGroups(businessUnitId, bidId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a bid group by bid group Id
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The work plan bid id of the bid groups
	 * @param {string} bidGroupId - Work Plan Bid Group id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWorkplanbidGroup(businessUnitId, bidId, bidGroupId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		if (this.#checkJSONSchemaType(bidGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidGroupId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;
		apiCallOptions.pathParameters.bidGroupId = bidGroupId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a bid group by bid group Id
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The work plan bid id of the bid groups
	 * @param {string} bidGroupId - Work Plan Bid Group id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitWorkplanbidGroup(businessUnitId, bidId, bidGroupId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		if (this.#checkJSONSchemaType(bidGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidGroupId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;
		apiCallOptions.pathParameters.bidGroupId = bidGroupId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a bid group by bid group Id
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The work plan bid id of the bid groups
	 * @param {string} bidGroupId - Work Plan Bid Group id
	 * @param {WorkPlanBidGroupUpdate} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitWorkplanbidGroup(businessUnitId, bidId, bidGroupId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		if (this.#checkJSONSchemaType(bidGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidGroupId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;
		apiCallOptions.pathParameters.bidGroupId = bidGroupId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Gets the work plan preferences of all the agents in the work plan bid group
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The work plan bid id of the bid groups
	 * @param {string} bidGroupId - The ID of the work plan bid group
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}/preferences" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWorkplanbidGroupPreferences(businessUnitId, bidId, bidGroupId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}/preferences";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		if (this.#checkJSONSchemaType(bidGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidGroupId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;
		apiCallOptions.pathParameters.bidGroupId = bidGroupId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Overrides the assigned work plan for the specified agents
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The work plan bid id of the bid groups
	 * @param {string} bidGroupId - The ID of the work plan bid group
	 * @param {AgentsBidAssignedWorkPlanOverrideRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}/preferences" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitWorkplanbidGroupPreferences(businessUnitId, bidId, bidGroupId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/groups/{bidGroupId}/preferences";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		if (this.#checkJSONSchemaType(bidGroupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidGroupId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;
		apiCallOptions.pathParameters.bidGroupId = bidGroupId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update bulk work plan bid ranks on users. Max 50 users can be updated at a time.
	 * @async
	 * @param {WorkPlanBidRanks[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/users/workplanbidranks/bulk" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementUsersWorkplanbidranksBulk(body) {
		const endpointPath = "/api/v2/workforcemanagement/users/workplanbidranks/bulk";
		const endpointMethod = "PATCH";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get work plan bid ranks for a user
	 * @async
	 * @param {string} userId - The userId to whom the work plan bid ranks apply.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/users/{userId}/workplanbidranks" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementUserWorkplanbidranks(userId) {
		const endpointPath = "/api/v2/workforcemanagement/users/{userId}/workplanbidranks";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update work plan bid ranks for a user
	 * @async
	 * @param {string} userId - The userId to whom the work plan bid ranks apply.
	 * @param {WorkPlanBidRanks} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/users/{userId}/workplanbidranks" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementUserWorkplanbidranks(userId, body) {
		const endpointPath = "/api/v2/workforcemanagement/users/{userId}/workplanbidranks";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a work plan bid
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The id of the workplanbid
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWorkplanbid(businessUnitId, bidId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a work plan bid
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The ID of the work plan bid
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWorkforcemanagementBusinessunitWorkplanbid(businessUnitId, bidId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update work plan bid
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The id of the workplanbid
	 * @param {UpdateWorkPlanBid} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchWorkforcemanagementBusinessunitWorkplanbid(businessUnitId, bidId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get list of work plan bids
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWorkforcemanagementBusinessunitWorkplanbids(businessUnitId) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new work plan bid
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {CreateWorkPlanBid} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWorkplanbids(businessUnitId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Copy a work plan bid
	 * @async
	 * @param {string} businessUnitId - The ID of the business unit
	 * @param {string} bidId - The ID of the work plan bid to copy
	 * @param {CopyWorkPlanBid} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/copy" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWorkforcemanagementBusinessunitWorkplanbidCopy(businessUnitId, bidId, body) {
		const endpointPath = "/api/v2/workforcemanagement/businessunits/{businessUnitId}/workplanbids/{bidId}/copy";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(businessUnitId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "businessUnitId", "string");
		}

		if (this.#checkJSONSchemaType(bidId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bidId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.businessUnitId = businessUnitId;
		apiCallOptions.pathParameters.bidId = bidId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { WorkforceManagementAPI };