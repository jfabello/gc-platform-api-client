/**
 * System for Cross-domain Identity Management
 * @module gc-platform-api-scim
 * @documentation https://developer.genesys.cloud/useragentman/scim/scim-apis
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.305Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} JsonNode
 */
 
/**
 * Defines a SCIM manager.
 * @typedef {object} Manager
 * @property {string} [value] - The ID of the manager.
 * @property {string} [$ref] - The reference URI of the manager's user record.
 */
 
/**
 * Defines a SCIM email address.
 * @typedef {object} ScimEmail
 * @property {string} [value] - The email address. Is immutable if "type" is set to "other".
 * @property {string} [type] - The type of email address. "value" is immutable if "type" is set to "other".
 * @property {boolean} [primary] - Indicates whether the email address is the primary email address.
 */
 
/**
 * External Identifiers of user. The external identifier must be unique within the organization and the 'authority'
 * @typedef {object} ScimGenesysUserExternalId
 * @property {string} authority - Authority, or scope, of "externalId". Allows multiple external identifiers to be defined. Represents the source of the external identifier.
 * @property {string} value - Identifier of the user in an external system.
 */
 
/**
 * Defines the SCIM metadata.
 * @typedef {object} ScimMetadata
 * @property {string} [resourceType] - The type of SCIM resource.
 * @property {string} [lastModified] - The last time that the resource was modified. Date time is represented as an "ISO-8601 string", for example, yyyy-MM-ddTHH:mm:ss.SSSZ. Not included with "Schema" and "ResourceType" resources.
 * @property {string} [location] - The URI of the resource.
 * @property {string} [version] - The version of the resource. Matches the ETag HTTP response header. Not included with "Schema" and "ResourceType" resources.
 */
 
/**
 * Defines a SCIM phone number.
 * @typedef {object} ScimPhoneNumber
 * @property {string} [value] - The phone number in E.164 or tel URI format, for example, tel:+nnnnnnnn; ext=xxxxx.
 * @property {string} [type] - The type of phone number.
 * @property {boolean} [primary] - Indicates whether the phone number is the primary phone number.
 */
 
/**
 * Genesys Cloud user extensions to SCIM RFC.
 * @typedef {object} ScimUserExtensions
 * @property {ScimUserRoutingSkill[]} [routingSkills] - The list of routing skills assigned to a user. Maximum 50 skills.
 * @property {ScimUserRoutingLanguage[]} [routingLanguages] - The list of routing languages assigned to a user. Maximum 50 languages.
 * @property {ScimGenesysUserExternalId[]} [externalIds] - The list of external identifiers assigned to user. Always includes an immutable SCIM authority prefixed with "x-pc:scimv2:v1". ExternalIds are searchable with complex filter query parameter using 'authority' and 'value', e.g., filter=urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:externalIds[authority eq "matchAuthName" and value eq "matchingExternalKeyValue"].
 */
 
/**
 * Defines a user role.
 * @typedef {object} ScimUserRole
 * @property {string} [value] - The role of the Genesys Cloud user.
 */
 
/**
 * The routing language assigned to a user.
 * @typedef {object} ScimUserRoutingLanguage
 * @property {string} name - The case-sensitive name of a routing language configured in Genesys Cloud.
 * @property {number} [proficiency] - A rating from 0.0 to 5.0 that indicates how fluent an agent is in a particular language. ACD interactions are routed to agents with higher proficiency ratings.
 */
 
/**
 * The routing skill assigned to a user.
 * @typedef {object} ScimUserRoutingSkill
 * @property {string} name - The case-sensitive name of a routing skill configured in Genesys Cloud.
 * @property {number} [proficiency] - A rating from 0.0 to 5.0 that indicates how adept an agent is at a particular skill. When "Best available skills" is enabled for a queue in Genesys Cloud, ACD interactions in that queue are routed to agents with higher proficiency ratings.
 */
 
/**
 * Defines the creation of a SCIM user.
 * @typedef {object} ScimV2CreateUser
 * @property {string[]} [schemas] - The list of supported schemas.
 * @property {boolean} [active] - Indicates whether the user's administrative status is active.
 * @property {string} userName - The user's Genesys Cloud email address. Must be unique.
 * @property {string} displayName - The display name of the user.
 * @property {string} [password] - The new password for the Genesys Cloud user. Does not return an existing password. When creating a user, if a password is not supplied, then a password will be randomly generated that is 40 characters in length and contains five characters from each of the password policy groups.
 * @property {string} [title] - The user's title.
 * @property {ScimPhoneNumber[]} [phoneNumbers] - The list of the user's phone numbers.
 * @property {ScimEmail[]} [emails] - The list of the user's email addresses.
 * @property {string} [externalId] - The external ID of the user. Set by the provisioning client. "caseExact" is set to "true". "mutability" is set to "readWrite".
 * @property {ScimV2GroupReference[]} [groups] - The list of groups that the user is a member of. This list is immutable per SCIM RFC and may only be updated using the GROUPS resource endpoint.
 * @property {ScimUserRole[]} [roles] - The list of roles assigned to the user.
 * @property {ScimV2EnterpriseUser} [urn:ietf:params:scim:schemas:extension:enterprise:2.0:User] - The URI of the schema for the enterprise user.
 * @property {ScimUserExtensions} [urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User] - The URI of the schema for the Genesys Cloud user.
 */
 
/**
 * Defines a SCIM enterprise user.
 * @typedef {object} ScimV2EnterpriseUser
 * @property {string} [division] - The division that the user belongs to.
 * @property {string} [department] - The department that the user belongs to.
 * @property {Manager} [manager] - The user's manager.
 * @property {string} [employeeNumber] - The user's employee number.
 * @property {string} [dateHire] - The user's hire date. Format in JSON will be YYYY-MM-DD.
 */
 
/**
 * Defines a SCIM group.
 * @typedef {object} ScimV2Group
 * @property {string} [id] - The ID of the SCIM resource. Set by the service provider. "caseExact" is set to "true". "mutability" is set to "readOnly". "returned" is set to "always".
 * @property {string[]} [schemas] - The list of supported schemas.
 * @property {string} displayName - The display name of the group.
 * @property {string} [externalId] - The external ID of the group. Set by the provisioning client. "caseExact" is set to "true". "mutability" is set to "readWrite".
 * @property {ScimV2MemberReference[]} [members] - The list of members in the group.
 * @property {ScimMetadata} [meta] - The metadata of the SCIM resource. Metadata is defined as immutable per SCIM RFC.
 */
 
/**
 * Defines a reference to SCIM groups.
 * @typedef {object} ScimV2GroupReference
 * @property {string} [type] - The type of SCIM resource.
 * @property {string} [value] - The ID of the group member. Can be "userId" or "groupId".
 * @property {string} [$ref] - The reference URI of the SCIM resource.
 */
 
/**
 * Defines a reference to SCIM group members.
 * @typedef {object} ScimV2MemberReference
 * @property {string} [type] - The type of SCIM resource.
 * @property {string} [value] - The ID of the group member. Can be "userId" or "groupId".
 * @property {string} [$ref] - The reference URI of the SCIM resource.
 */
 
/**
 * Defines a SCIM PATCH operation. The path and value follow very specific rules based on operation types. See section 3.5.2 "Modifying with PATCH" in RFC 7644 for details.
 * @typedef {object} ScimV2PatchOperation
 * @property {string} op - The PATCH operation to perform.
 * @property {string} [path] - The attribute path that describes the target of the operation. Required for a "remove" operation.
 * @property {JsonNode} [value] - The value to set in the path.
 */
 
/**
 * Defines a SCIM PATCH request. See section 3.5.2 "Modifying with PATCH" in RFC 7644 for details.
 * @typedef {object} ScimV2PatchRequest
 * @property {string[]} schemas - The list of schemas used in the PATCH request.
 * @property {ScimV2PatchOperation[]} [Operations] - The list of operations to perform for the PATCH request.
 */
 
/**
 * Defines a SCIM user.
 * @typedef {object} ScimV2User
 * @property {string} [id] - The ID of the SCIM resource. Set by the service provider. "caseExact" is set to "true". "mutability" is set to "readOnly". "returned" is set to "always".
 * @property {string[]} [schemas] - The list of supported schemas.
 * @property {boolean} [active] - Indicates whether the user's administrative status is active.
 * @property {string} [userName] - The user's Genesys Cloud email address. Must be unique.
 * @property {string} [displayName] - The display name of the user.
 * @property {string} [password] - The new password for the Genesys Cloud user. Does not return an existing password. When creating a user, if a password is not supplied, then a password will be randomly generated that is 40 characters in length and contains five characters from each of the password policy groups.
 * @property {string} [title] - The user's title.
 * @property {ScimPhoneNumber[]} [phoneNumbers] - The list of the user's phone numbers.
 * @property {ScimEmail[]} [emails] - The list of the user's email addresses.
 * @property {string} [externalId] - The external ID of the user. Set by the provisioning client. "caseExact" is set to "true". "mutability" is set to "readWrite".
 * @property {ScimV2GroupReference[]} [groups] - The list of groups that the user is a member of. This list is immutable per SCIM RFC and may only be updated using the GROUPS resource endpoint.
 * @property {ScimUserRole[]} [roles] - The list of roles assigned to the user.
 * @property {ScimV2EnterpriseUser} [urn:ietf:params:scim:schemas:extension:enterprise:2.0:User] - The URI of the schema for the enterprise user.
 * @property {ScimUserExtensions} [urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User] - The URI of the schema for the Genesys Cloud user.
 * @property {ScimMetadata} [meta] - The metadata of the SCIM resource. Metadata is defined as immutable per SCIM RFC.
 */
 

/**
 * SCIM - System for Cross-domain Identity Management
 * @class SCIM
 */
class SCIMAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the SCIM class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Get a resource type
	 * @async
	 * @param {string} resourceType - The type of resource. Returned with GET /api/v2/scim/resourcetypes.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/resourcetypes/{resourceType}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getScimResourcetype(resourceType) {
		const endpointPath = "/api/v2/scim/resourcetypes/{resourceType}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(resourceType, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "resourceType", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.resourceType = resourceType;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of resource types
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/resourcetypes" endpoint.
	 */
	getScimResourcetypes() {
		const endpointPath = "/api/v2/scim/resourcetypes";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a SCIM schema
	 * @async
	 * @param {string} schemaId - The ID of a schema. Returned with GET /api/v2/scim/schemas.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getScimSchema(schemaId) {
		const endpointPath = "/api/v2/scim/schemas/{schemaId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of SCIM schemas
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.filter] -  Filtered results are invalid and return 403 Unauthorized.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/schemas" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimSchemas(query) {
		const endpointPath = "/api/v2/scim/schemas";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("filter" in query && this.#checkJSONSchemaType(query["filter"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filter", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of groups
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.startIndex] -  The 1-based index of the first query result.
	 * @param {number} [query.count] -  The requested number of items per page. A value of 0 returns "totalResults". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the "excludedAttributes" or "attributes" query parameters to exclude or only include secondary lookup values such as "externalId",  "roles", "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages", or "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills".
	 * @param {string[]} [query.attributes] -  Indicates which attributes to include. Returns these attributes and the "id", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string[]} [query.excludedAttributes] -  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns "id", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string} [query.filter] -  Filters results. If nothing is specified, returns all groups. Examples of valid values: "id eq 5f4bc742-a019-4e38-8e2a-d39d5bc0b0f3", "displayname eq Sales".
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/groups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimGroups(query) {
		const endpointPath = "/api/v2/scim/groups";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("startIndex" in query && this.#checkJSONSchemaType(query["startIndex"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "startIndex", "integer");
			}
			if ("count" in query && this.#checkJSONSchemaType(query["count"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "count", "integer");
			}
			if ("attributes" in query && this.#checkJSONSchemaType(query["attributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attributes", "array");
			}
			if ("excludedAttributes" in query && this.#checkJSONSchemaType(query["excludedAttributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludedAttributes", "array");
			}
			if ("filter" in query && this.#checkJSONSchemaType(query["filter"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filter", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a group
	 * @async
	 * @param {string} groupId - The ID of a group. Returned with GET /api/v2/scim/groups.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-None-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: "42". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.attributes] -  Indicates which attributes to include. Returns these attributes and the "id", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string[]} [query.excludedAttributes] -  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns "id", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/groups/{groupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimGroup(groupId, headers, query) {
		const endpointPath = "/api/v2/scim/groups/{groupId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-None-Match" in headers && this.#checkJSONSchemaType(headers["If-None-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-None-Match", "string");
			}
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("attributes" in query && this.#checkJSONSchemaType(query["attributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attributes", "array");
			}
			if ("excludedAttributes" in query && this.#checkJSONSchemaType(query["excludedAttributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludedAttributes", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.headers = headers;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Replace a group
	 * @async
	 * @param {string} groupId - The ID of a group. Returned with GET /api/v2/scim/groups.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @param {ScimV2Group} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/groups/{groupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putScimGroup(groupId, headers, body) {
		const endpointPath = "/api/v2/scim/groups/{groupId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.headers = headers;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Modify a group
	 * @async
	 * @param {string} groupId - The ID of a group. Returned with GET /api/v2/scim/groups.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/groups/{groupId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @param {ScimV2PatchRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/groups/{groupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchScimGroup(groupId, headers, body) {
		const endpointPath = "/api/v2/scim/groups/{groupId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.headers = headers;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a service provider's configuration
	 * @async
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-None-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/serviceproviderconfig. Example: "42". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. 
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/serviceproviderconfig" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 */
	getScimServiceproviderconfig(headers) {
		const endpointPath = "/api/v2/scim/serviceproviderconfig";
		const endpointMethod = "GET";

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-None-Match" in headers && this.#checkJSONSchemaType(headers["If-None-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-None-Match", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.headers = headers;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a user
	 * @async
	 * @param {string} userId - The ID of a user. Returned with GET /api/v2/scim/users.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-None-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.attributes] -  Indicates which attributes to include. Returns these attributes and the "id", "userName", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string[]} [query.excludedAttributes] -  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns the "id", "userName", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/users/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimUser(userId, headers, query) {
		const endpointPath = "/api/v2/scim/users/{userId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-None-Match" in headers && this.#checkJSONSchemaType(headers["If-None-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-None-Match", "string");
			}
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("attributes" in query && this.#checkJSONSchemaType(query["attributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attributes", "array");
			}
			if ("excludedAttributes" in query && this.#checkJSONSchemaType(query["excludedAttributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludedAttributes", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.headers = headers;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Replace a user
	 * @async
	 * @param {string} userId - The ID of a user. Returned with GET /api/v2/scim/users.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @param {ScimV2User} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/users/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putScimUser(userId, headers, body) {
		const endpointPath = "/api/v2/scim/users/{userId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.headers = headers;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a user
	 * @async
	 * @param {string} userId - The ID of a user. Returned with GET /api/v2/scim/users.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/users/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 */
	deleteScimUser(userId, headers) {
		const endpointPath = "/api/v2/scim/users/{userId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.headers = headers;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Modify a user
	 * @async
	 * @param {string} userId - The ID of a user. Returned with GET /api/v2/scim/users.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @param {ScimV2PatchRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/users/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchScimUser(userId, headers, body) {
		const endpointPath = "/api/v2/scim/users/{userId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.headers = headers;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of users
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.startIndex] -  The 1-based index of the first query result.
	 * @param {number} [query.count] -  The requested number of items per page. A value of 0 returns "totalResults". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the "excludedAttributes" or "attributes" query parameters to exclude or only include secondary lookup values such as "externalId",  "roles", "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages", or "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills".
	 * @param {string[]} [query.attributes] -  Indicates which attributes to include. Returns these attributes and the "id", "userName", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string[]} [query.excludedAttributes] -  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns the "id", "userName", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string} [query.filter] -  Filters results. If nothing is specified, returns all active users. Examples of valid values: "id eq 857449b0-d9e7-4cd0-acbf-a6adfb9ef1e9", "userName eq search@sample.org", "manager eq 16e10e2f-1136-43fe-bb84-eac073168a49", "email eq search@sample.org", "division eq divisionName", "externalId eq 167844", "active eq false", "employeeNumber eq 9876543210".
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/users" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimUsers(query) {
		const endpointPath = "/api/v2/scim/users";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("startIndex" in query && this.#checkJSONSchemaType(query["startIndex"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "startIndex", "integer");
			}
			if ("count" in query && this.#checkJSONSchemaType(query["count"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "count", "integer");
			}
			if ("attributes" in query && this.#checkJSONSchemaType(query["attributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attributes", "array");
			}
			if ("excludedAttributes" in query && this.#checkJSONSchemaType(query["excludedAttributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludedAttributes", "array");
			}
			if ("filter" in query && this.#checkJSONSchemaType(query["filter"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filter", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a user
	 * @async
	 * @param {ScimV2CreateUser} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/users" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postScimUsers(body) {
		const endpointPath = "/api/v2/scim/users";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a resource type
	 * @async
	 * @param {string} resourceType - The type of resource. Returned with GET /api/v2/scim/v2/resourcetypes.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/resourcetypes/{resourceType}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getScimV2Resourcetype(resourceType) {
		const endpointPath = "/api/v2/scim/v2/resourcetypes/{resourceType}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(resourceType, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "resourceType", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.resourceType = resourceType;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of resource types
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/resourcetypes" endpoint.
	 */
	getScimV2Resourcetypes() {
		const endpointPath = "/api/v2/scim/v2/resourcetypes";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a SCIM schema
	 * @async
	 * @param {string} schemaId - The ID of a schema. Returned with GET /api/v2/scim/v2/schemas.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getScimV2Schema(schemaId) {
		const endpointPath = "/api/v2/scim/v2/schemas/{schemaId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of SCIM schemas
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.filter] -  Filtered results are invalid and return 403 Unauthorized.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/schemas" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimV2Schemas(query) {
		const endpointPath = "/api/v2/scim/v2/schemas";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("filter" in query && this.#checkJSONSchemaType(query["filter"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filter", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of groups
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.startIndex] -  The 1-based index of the first query result.
	 * @param {number} [query.count] -  The requested number of items per page. A value of 0 returns "totalResults". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the "excludedAttributes" or "attributes" query parameters to exclude or only include secondary lookup values such as "externalId",  "roles", "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages", or "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills".
	 * @param {string[]} [query.attributes] -  Indicates which attributes to include. Returns these attributes and the "id", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string[]} [query.excludedAttributes] -  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns "id", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string} query.filter -  Filters results. If nothing is specified, returns all groups. Examples of valid values: "id eq 5f4bc742-a019-4e38-8e2a-d39d5bc0b0f3", "displayname eq Sales".
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/groups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimV2Groups(query) {
		const endpointPath = "/api/v2/scim/v2/groups";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("startIndex" in query && this.#checkJSONSchemaType(query["startIndex"], "integer") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "startIndex", "integer");
		}

		if ("count" in query && this.#checkJSONSchemaType(query["count"], "integer") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "count", "integer");
		}

		if ("attributes" in query && this.#checkJSONSchemaType(query["attributes"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attributes", "array");
		}

		if ("excludedAttributes" in query && this.#checkJSONSchemaType(query["excludedAttributes"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludedAttributes", "array");
		}

		if ("filter" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "filter");
		}

		if (this.#checkJSONSchemaType(query["filter"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filter", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a group
	 * @async
	 * @param {string} groupId - The ID of a group. Returned with GET /api/v2/scim/v2/groups.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-None-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: "42". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.attributes] -  Indicates which attributes to include. Returns these attributes and the "id", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string[]} [query.excludedAttributes] -  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns "id", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/groups/{groupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimV2Group(groupId, headers, query) {
		const endpointPath = "/api/v2/scim/v2/groups/{groupId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-None-Match" in headers && this.#checkJSONSchemaType(headers["If-None-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-None-Match", "string");
			}
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("attributes" in query && this.#checkJSONSchemaType(query["attributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attributes", "array");
			}
			if ("excludedAttributes" in query && this.#checkJSONSchemaType(query["excludedAttributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludedAttributes", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.headers = headers;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Replace a group
	 * @async
	 * @param {string} groupId - The ID of a group. Returned with GET /api/v2/scim/v2/groups.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @param {ScimV2Group} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/groups/{groupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putScimV2Group(groupId, headers, body) {
		const endpointPath = "/api/v2/scim/v2/groups/{groupId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.headers = headers;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Modify a group
	 * @async
	 * @param {string} groupId - The ID of a group. Returned with GET /api/v2/scim/v2/groups.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/groups/{groupId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @param {ScimV2PatchRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/groups/{groupId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchScimV2Group(groupId, headers, body) {
		const endpointPath = "/api/v2/scim/v2/groups/{groupId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.headers = headers;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a service provider's configuration
	 * @async
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-None-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/serviceproviderconfig. Example: "42". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified. 
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/serviceproviderconfig" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 */
	getScimV2Serviceproviderconfig(headers) {
		const endpointPath = "/api/v2/scim/v2/serviceproviderconfig";
		const endpointMethod = "GET";

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-None-Match" in headers && this.#checkJSONSchemaType(headers["If-None-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-None-Match", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.headers = headers;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a user
	 * @async
	 * @param {string} userId - The ID of a user. Returned with GET /api/v2/scim/v2/users.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-None-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns the current configuration of the resource. If the ETag is current, returns 304 Not Modified.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.attributes] -  Indicates which attributes to include. Returns these attributes and the "id", "userName", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string[]} [query.excludedAttributes] -  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns the "id", "userName", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/users/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimV2User(userId, headers, query) {
		const endpointPath = "/api/v2/scim/v2/users/{userId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-None-Match" in headers && this.#checkJSONSchemaType(headers["If-None-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-None-Match", "string");
			}
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("attributes" in query && this.#checkJSONSchemaType(query["attributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attributes", "array");
			}
			if ("excludedAttributes" in query && this.#checkJSONSchemaType(query["excludedAttributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludedAttributes", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.headers = headers;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Replace a user
	 * @async
	 * @param {string} userId - The ID of a user. Returned with GET /api/v2/scim/v2/users.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @param {ScimV2User} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/users/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putScimV2User(userId, headers, body) {
		const endpointPath = "/api/v2/scim/v2/users/{userId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.headers = headers;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a user
	 * @async
	 * @param {string} userId - The ID of a user. Returned with GET /api/v2/scim/v2/users.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/users/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 */
	deleteScimV2User(userId, headers) {
		const endpointPath = "/api/v2/scim/v2/users/{userId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.headers = headers;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Modify a user
	 * @async
	 * @param {string} userId - The ID of a user. Returned with GET /api/v2/scim/v2/users.
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} If-Match - (optional) The ETag of a resource in double quotes. Returned as header and meta.version with initial call to GET /api/v2/scim/v2/users/{userId}. Example: "42". If the ETag is different from the version on the server, returns 400 with a "scimType" of "invalidVers".
	 * @param {ScimV2PatchRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/users/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchScimV2User(userId, headers, body) {
		const endpointPath = "/api/v2/scim/v2/users/{userId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("If-Match" in headers && this.#checkJSONSchemaType(headers["If-Match"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "If-Match", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.headers = headers;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of users
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.startIndex] -  The 1-based index of the first query result.
	 * @param {number} [query.count] -  The requested number of items per page. A value of 0 returns "totalResults". A page size over 25 may exceed internal resource limits and return a 429 error. For a page size over 25, use the "excludedAttributes" or "attributes" query parameters to exclude or only include secondary lookup values such as "externalId",  "roles", "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingLanguages", or "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:routingSkills".
	 * @param {string[]} [query.attributes] -  Indicates which attributes to include. Returns these attributes and the "id", "userName", "active", and "meta" attributes. Use "attributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string[]} [query.excludedAttributes] -  Indicates which attributes to exclude. Returns the default attributes minus "excludedAttributes". Always returns the "id", "userName", "active", and "meta" attributes. Use "excludedAttributes" to avoid expensive secondary calls for the default attributes.
	 * @param {string} [query.filter] -  Filters results. If nothing is specified, returns all active users. Examples of valid values: "id eq 857449b0-d9e7-4cd0-acbf-a6adfb9ef1e9", "userName eq search@sample.org", "manager eq 16e10e2f-1136-43fe-bb84-eac073168a49", "email eq search@sample.org", "division eq divisionName", "externalId eq 167844", "active eq false", "employeeNumber eq 9876543210".
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/users" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getScimV2Users(query) {
		const endpointPath = "/api/v2/scim/v2/users";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("startIndex" in query && this.#checkJSONSchemaType(query["startIndex"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "startIndex", "integer");
			}
			if ("count" in query && this.#checkJSONSchemaType(query["count"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "count", "integer");
			}
			if ("attributes" in query && this.#checkJSONSchemaType(query["attributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attributes", "array");
			}
			if ("excludedAttributes" in query && this.#checkJSONSchemaType(query["excludedAttributes"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "excludedAttributes", "array");
			}
			if ("filter" in query && this.#checkJSONSchemaType(query["filter"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filter", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a user
	 * @async
	 * @param {ScimV2CreateUser} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/scim/v2/users" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postScimV2Users(body) {
		const endpointPath = "/api/v2/scim/v2/users";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { SCIMAPI };