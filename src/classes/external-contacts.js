/**
 * External Organizations, contacts, notes and relationships
 * @module gc-platform-api-external-contacts
 * @documentation https://developer.genesys.cloud/commdigital/externalcontacts/externalcontacts-apis
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.242Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} AddressableEntityRef
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} Biography
 * @property {string} [biography] - Personal detailed description
 * @property {string[]} [interests]
 * @property {string[]} [hobbies]
 * @property {string} [spouse]
 * @property {Education[]} [education] - User education details
 */
 
/**
 * @typedef {object} BulkContactsRequest
 * @property {ExternalContact[]} [entities]
 */
 
/**
 * @typedef {object} BulkIdsRequest
 * @property {ExternalContactsEntity[]} [entities]
 */
 
/**
 * @typedef {object} BulkNotesRequest
 * @property {Note[]} [entities]
 */
 
/**
 * @typedef {object} BulkOrganizationsRequest
 * @property {ExternalOrganization[]} [entities]
 */
 
/**
 * @typedef {object} BulkRelationshipsRequest
 * @property {Relationship[]} [entities]
 */
 
/**
 * @typedef {object} Chat
 * @property {string} [jabberId]
 */
 
/**
 * @typedef {object} Contact
 * @property {string} [address] - Email address or phone number for this contact type
 * @property {string} [display] - Formatted version of the address property
 * @property {string} [mediaType]
 * @property {string} [type]
 * @property {string} [extension] - Use internal extension instead of address. Mutually exclusive with the address field.
 * @property {string} [countryCode]
 * @property {string} [integration] - Integration tag value if this number is associated with an external integration.
 */
 
/**
 * @typedef {object} ContactAddress
 * @property {string} [address1]
 * @property {string} [address2]
 * @property {string} [city]
 * @property {string} [state]
 * @property {string} [postalCode]
 * @property {string} [countryCode]
 */
 
/**
 * @typedef {object} ContactAddressableEntityRef
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} ContactIdentifier
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {WritableStarrableDivision} [division] - The division to which this entity belongs.
 * @property {string} type - The type of this identifier
 * @property {string} value - The string value of the identifier. Will vary in syntax by type.
 * @property {string} [dateCreated] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {ExternalSource} [externalSource] - The External Source ID of the identifier
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ContactImportField
 * @property {string} name - Field name
 * @property {boolean} included - Should we import this field
 */
 
/**
 * @typedef {object} ContactImportJobRequest
 * @property {string} settingsId - Settings id
 */
 
/**
 * @typedef {object} ContactImportJobStatusUpdateRequest
 * @property {string} jobId - Job Id
 * @property {string} status - Workflow status
 */
 
/**
 * @typedef {object} ContactImportSettings
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - Display name for the settings
 * @property {string[]} [matchingCriteria] - Which fields you want to identity resolution based on. (e.g.: Email, Phone). It can be empty, populated only one of them or it can be both for now. The order of the items is important for identity resolution
 * @property {boolean} mergeContacts - Decides what happens when a record already found in the system. Action will be Upsert or Merge
 * @property {string} externalSourceId - Define the corresponding source system by the customer, the customer can have different externalId source, they can collect this id from contact service
 * @property {ContactImportField[]} importFields - Decides which field we need to send towards contact service
 * @property {string} [dateCreated] - Creation date for the settings. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ContactsExport
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string[]} [divisionIds] - Division IDs of entities
 * @property {ContactsExportQueryConditions} [queryConditions] - Query conditions to apply on export
 * @property {DomainEntityRef} [createdBy] - The user that created this request
 * @property {string} [dateCreated] - When the request was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [status] - The status of the request
 * @property {string} [downloadUrl] - The location where the results of the request can be retrieved
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ContactsExportFieldFilter
 * @property {string} field - Field name to apply the filter
 * @property {string} value - Value to check field's value against
 */
 
/**
 * @typedef {object} ContactsExportFieldListFilter
 * @property {string} field - Field name to apply the filter
 * @property {string[]} values - Values to check field's value against
 */
 
/**
 * @typedef {object} ContactsExportFilter
 * @property {ContactsExportFieldFilter} [eq] - Filtered field should have the same value
 * @property {ContactsExportFieldListFilter} [in] - Filtered field should match one of the listed values
 * @property {ContactsExportFilter[]} [and] - Boolean AND combination of filters
 * @property {ContactsExportFilter[]} [or] - Boolean OR combination of filters
 * @property {ContactsExportFilter} [not] - Boolean negation of filters
 */
 
/**
 * @typedef {object} ContactsExportQueryConditions
 * @property {ContactsExportFilter} [filters] - Filters to apply on export
 * @property {number} [limit] - Maximum result count in export, default is 180 000 000
 */
 
/**
 * @typedef {object} ConversationAssociation
 * @property {string} [externalContactId] - An external contact ID.  If not supplied, implies the conversation should be disassociated with any external contact.
 * @property {string} conversationId - Conversation ID
 * @property {string} communicationId - Communication ID
 * @property {string} mediaType - Media type
 */
 
/**
 * @typedef {object} CsvJobRequest
 * @property {string} uploadId - Upload for the csv job
 * @property {string} settingsId - Settings for the csv job
 */
 
/**
 * @typedef {object} CsvMappingEntry
 * @property {string} sourceField - CSV field to map data from
 * @property {string} targetField - Json path to map data to
 */
 
/**
 * @typedef {object} CsvSettings
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [externalSettingsId] - Id of the external settings
 * @property {CsvMappingEntry[]} mappings - Mappings for the transformation
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CsvUploadRequest
 * @property {string} [fileName] - Name of the file to upload
 * @property {number} fileSize - The size of the upload file
 */
 
/**
 * @typedef {object} DataSchema
 * @property {string} [id] - The globally unique identifier for the schema.  Only required if a schema is used for custom fields during external entity creation or updates.
 * @property {string} [name]
 * @property {number} version - The schema's version, a positive integer. Required for updates.
 * @property {string[]} [appliesTo] - Indicates the built-in entity type to which this schema applies.
 * @property {boolean} [enabled] - The schema's enabled/disabled status. A disabled schema cannot be assigned to any other entities, but the data on those entities from the schema still exists.
 * @property {DomainEntityRef} [createdBy] - The URI of the user that created this schema.
 * @property {string} [dateCreated] - The date and time this schema was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {JsonSchemaDocument} jsonSchema - A JSON schema defining the extension to the built-in entity type.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Division
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} DomainEntityRef
 * @property {string} [id]
 * @property {string} [name]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} DomainRole
 * @property {string} [id] - The ID of the role
 * @property {string} [name] - The name of the role
 */
 
/**
 * @typedef {object} Education
 * @property {string} [school]
 * @property {string} [fieldOfStudy]
 * @property {string} [notes] - Notes about education has a 2000 character limit
 * @property {string} [dateStart] - Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [dateEnd] - Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} EmployerInfo
 * @property {string} [officialName]
 * @property {string} [employeeId]
 * @property {string} [employeeType]
 * @property {string} [dateHire]
 */
 
/**
 * @typedef {object} ExternalContact
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {WritableStarrableDivision} [division] - The division to which this entity belongs.
 * @property {string} [firstName] - The first name of the contact.
 * @property {string} [middleName]
 * @property {string} [lastName] - The last name of the contact.
 * @property {string} [salutation]
 * @property {string} [title]
 * @property {PhoneNumber} [workPhone]
 * @property {PhoneNumber} [cellPhone]
 * @property {PhoneNumber} [homePhone]
 * @property {PhoneNumber} [otherPhone]
 * @property {string} [workEmail]
 * @property {string} [personalEmail]
 * @property {string} [otherEmail]
 * @property {ContactAddress} [address]
 * @property {TwitterId} [twitterId]
 * @property {LineId} [lineId]
 * @property {WhatsAppId} [whatsAppId]
 * @property {FacebookId} [facebookId]
 * @property {ExternalId[]} [externalIds] - A list of external identifiers that identify this contact in an external system
 * @property {ContactIdentifier[]} [identifiers] - Identifiers claimed by this contact
 * @property {string} [modifyDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [createDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {ExternalOrganization} [externalOrganization]
 * @property {boolean} [surveyOptOut]
 * @property {string} [externalSystemUrl] - A string that identifies an external system-of-record resource that may have more detailed information on the contact. It should be a valid URL (including the http/https protocol, port, and path [if any]). The value is automatically trimmed of any leading and trailing whitespace.
 * @property {DataSchema} [schema] - The schema defining custom fields for this contact
 * @property {object} [customFields] - Custom fields defined in the schema referenced by schemaId and schemaVersion.
 * @property {ExternalDataSource[]} [externalDataSources] - Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.
 * @property {string} [type] - The type of contact
 * @property {ContactAddressableEntityRef} [canonicalContact] - The contact at the head of the merge tree. If null, this contact is not a part of any merge.
 * @property {ContactAddressableEntityRef[]} [mergeSet] - The set of all contacts that are a part of the merge tree. If null, this contact is not a part of any merge.
 * @property {MergeOperation} [mergeOperation] - Information about the merge history of this contact. If null, this contact is not a part of any merge.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ExternalContactsEntity
 * @property {string} [id] - The globally unique identifier for the object.
 */
 
/**
 * Describes a link to a record in an external system that contributed data to a Relate record
 * @typedef {object} ExternalDataSource
 * @property {string} [platform] - The platform that was the source of the data.  Example: a CRM like SALESFORCE.
 * @property {string} [url] - An URL that links to the source record that contributed data to the associated entity.
 */
 
/**
 * @typedef {object} ExternalId
 * @property {ExternalSource} [externalSource]
 * @property {string} [value]
 */
 
/**
 * @typedef {object} ExternalOrganization
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the company.
 * @property {WritableStarrableDivision} [division] - The division to which this entity belongs.
 * @property {string} [companyType]
 * @property {string} [industry]
 * @property {ContactAddress} [address]
 * @property {PhoneNumber} [phoneNumber]
 * @property {PhoneNumber} [faxNumber]
 * @property {number} [employeeCount]
 * @property {number} [revenue]
 * @property {string[]} [tags]
 * @property {string[]} [websites]
 * @property {Ticker[]} [tickers]
 * @property {TwitterId} [twitterId]
 * @property {string} [externalSystemUrl] - A string that identifies an external system-of-record resource that may have more detailed information on the organization. It should be a valid URL (including the http/https protocol, port, and path [if any]). The value is automatically trimmed of any leading and trailing whitespace.
 * @property {string} [modifyDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [createDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {Trustor} [trustor]
 * @property {DataSchema} [schema] - The schema defining custom fields for this contact
 * @property {object} [customFields] - Custom fields defined in the schema referenced by schemaId and schemaVersion.
 * @property {ExternalDataSource[]} [externalDataSources] - Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ExternalSource
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the external source.
 * @property {boolean} [active]
 * @property {LinkConfiguration} [linkConfiguration]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * User information for a Facebook user interacting with a page or app
 * @typedef {object} FacebookId
 * @property {FacebookScopedId[]} [ids] - The set of scopedIds that this person has. Each scopedId is specific to a page or app that the user interacts with.
 * @property {string} [displayName] - The displayName of this person's Facebook account. Roughly translates to user.first_name + ' ' + user.last_name in the Facebook API.
 */
 
/**
 * Scoped ID for a Facebook user interacting with a page or app
 * @typedef {object} FacebookScopedId
 * @property {string} [scopedId] - The unique page/app-specific scopedId for the user
 */
 
/**
 * @typedef {object} Geolocation
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [type] - A string used to describe the type of client the geolocation is being updated from e.g. ios, android, web, etc.
 * @property {boolean} [primary] - A boolean used to tell whether or not to set this geolocation client as the primary on a PATCH
 * @property {number} [latitude]
 * @property {number} [longitude]
 * @property {string} [country]
 * @property {string} [region]
 * @property {string} [city]
 * @property {LocationDefinition[]} [locations]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Group
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The group name.
 * @property {string} [description]
 * @property {string} [dateModified] - Last modified date/time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [memberCount] - Number of members.
 * @property {string} [state] - Active, inactive, or deleted state.
 * @property {number} [version] - Current version for this resource.
 * @property {string} type - Type of group.
 * @property {Image[]} [images]
 * @property {GroupContact[]} [addresses]
 * @property {boolean} rulesVisible - Are membership rules visible to the person requesting to view the group
 * @property {string} visibility - Who can view this group
 * @property {boolean} [rolesEnabled] - Allow roles to be assigned to this group
 * @property {boolean} [includeOwners] - Allow owners to be included as members of the group
 * @property {boolean} [callsEnabled] - Allow calls to be placed to this group.
 * @property {User[]} [owners] - Owners of the group
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} GroupContact
 * @property {string} address - Phone number for this contact type
 * @property {string} [extension] - Extension is set if the number is e164 valid
 * @property {string} [display] - Formatted version of the address property
 * @property {string} type - Contact type of the address
 * @property {string} mediaType - Media type of the address
 */
 
/**
 * @typedef {object} IdentifierClaimRequest
 * @property {string} operation - The operation to perform claim/release
 * @property {ContactIdentifier} identifier - The identifier that should be claimed/released from a contact
 */
 
/**
 * @typedef {object} Image
 * @property {string} [resolution] - Height and/or width of image. ex: 640x480 or x128
 * @property {string} [imageUri]
 */
 
/**
 * A JSON Schema document.
 * @typedef {object} JsonSchemaDocument
 * @property {string} [id]
 * @property {string} [$schema]
 * @property {string} [title]
 * @property {string} [description]
 * @property {string} [type]
 * @property {string[]} [required]
 * @property {object} [properties]
 * @property {object} [additionalProperties]
 */
 
/**
 * User information for a Line account
 * @typedef {object} LineId
 * @property {LineUserId[]} [ids] - The set of Line userIds that this person has. Each userId is specific to the Line channel that the user interacts with.
 * @property {string} [displayName] - The displayName of this person's account in Line
 */
 
/**
 * Channel-specific User ID for Line accounts
 * @typedef {object} LineUserId
 * @property {string} [userId] - The unique channel-specific userId for the user
 */
 
/**
 * @typedef {object} LinkConfiguration
 * @property {string} [uriTemplate]
 */
 
/**
 * @typedef {object} Location
 * @property {string} [id] - Unique identifier for the location
 * @property {string} [floorplanId] - Unique identifier for the location floorplan image
 * @property {object} [coordinates] - Users coordinates on the floorplan. Only used when floorplanImage is set
 * @property {string} [notes] - Optional description on the users location
 * @property {LocationDefinition} [locationDefinition]
 */
 
/**
 * @typedef {object} LocationAddress
 * @property {string} [city]
 * @property {string} [country]
 * @property {string} [countryName]
 * @property {string} [state]
 * @property {string} [street1]
 * @property {string} [street2]
 * @property {string} [zipcode]
 */
 
/**
 * @typedef {object} LocationAddressVerificationDetails
 * @property {string} [status] - Status of address verification process
 * @property {string} [dateFinished] - Finished time of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateStarted] - Time started of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [service] - Third party service used for address verification
 */
 
/**
 * @typedef {object} LocationDefinition
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {AddressableEntityRef} [contactUser] - Site contact for the location entity
 * @property {LocationEmergencyNumber} [emergencyNumber] - Emergency number for the location entity
 * @property {LocationAddress} [address]
 * @property {string} [state] - Current state of the location entity
 * @property {string} [notes] - Notes for the location entity
 * @property {number} [version] - Current version of the location entity, value to be supplied should be retrieved by a GET or on create/update response
 * @property {string[]} [path] - A list of ancestor IDs in order
 * @property {LocationImage[]} [profileImage] - Profile image of the location entity, retrieved with ?expand=images query parameter
 * @property {LocationImage[]} [floorplanImage] - Floorplan images of the location entity, retrieved with ?expand=images query parameter
 * @property {LocationAddressVerificationDetails} [addressVerificationDetails] - Address verification information, retrieve dwith the ?expand=addressVerificationDetails query parameter
 * @property {boolean} [addressVerified] - Boolean field which states if the address has been verified as an actual address
 * @property {boolean} [addressStored] - Boolean field which states if the address has been stored for E911
 * @property {string} [images]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} LocationEmergencyNumber
 * @property {string} [e164]
 * @property {string} [number]
 * @property {string} [type] - The type of emergency number.
 */
 
/**
 * @typedef {object} LocationImage
 * @property {string} [resolution] - Height and/or width of image. ex: 640x480 or x128
 * @property {string} [imageUri]
 */
 
/**
 * @typedef {object} MediaSummary
 * @property {MediaSummaryDetail} [contactCenter]
 * @property {MediaSummaryDetail} [enterprise]
 */
 
/**
 * @typedef {object} MediaSummaryDetail
 * @property {number} [active]
 * @property {number} [acw]
 */
 
/**
 * @typedef {object} MergeOperation
 * @property {AddressableEntityRef} [sourceContact] - The source contact for the merge operation
 * @property {AddressableEntityRef} [targetContact] - The target contact for the merge operation
 * @property {AddressableEntityRef} [resultingContact] - The contact created as a result of the merge operation
 */
 
/**
 * @typedef {object} MergeRequest
 * @property {string} sourceContactId - The ID of the source contact for the merge operation
 * @property {string} targetContactId - The ID of the target contact for the merge operation
 */
 
/**
 * @typedef {object} Note
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {WritableStarrableDivision} [division] - The division to which this entity belongs.
 * @property {string} [entityId] - The id of the contact or organization to which this note refers. This only needs to be set for input when using the Bulk APIs.
 * @property {string} [entityType] - This is only need to be set when using Bulk API. Using any other value than contact or organization will result in null being used.
 * @property {string} [noteText]
 * @property {string} [modifyDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [createDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {User} createdBy - When creating or updating a note, only User.id is required. User object is fully populated when expanding a note.
 * @property {ExternalDataSource[]} [externalDataSources] - Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} OAuthLastTokenIssued
 * @property {string} [dateIssued] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} Organization
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [defaultLanguage] - The default language for this organization. Example: 'en'
 * @property {string} [defaultCountryCode] - The default country code for this organization. Example: 'US'
 * @property {string} [thirdPartyOrgName] - The short name for the organization. This field is globally unique and cannot be changed.
 * @property {string} [thirdPartyURI]
 * @property {string} [domain]
 * @property {number} version - The current version of the organization.
 * @property {string} [state] - The current state. Examples are active, inactive, deleted.
 * @property {string} [defaultSiteId]
 * @property {string} [supportURI] - Email address where support tickets are sent to.
 * @property {boolean} [voicemailEnabled]
 * @property {string} [productPlatform] - Organizations Originating Platform.
 * @property {string} [selfUri] - The URI for this object
 * @property {object} [features] - The state of features available for the organization.
 */
 
/**
 * @typedef {object} OrgUser
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {Division} [division] - The division to which this entity belongs.
 * @property {Chat} [chat]
 * @property {string} [department]
 * @property {string} [email]
 * @property {Contact[]} [primaryContactInfo] - Auto populated from addresses.
 * @property {Contact[]} [addresses] - Email addresses and phone numbers for this user
 * @property {string} [state] - The current state for this user.
 * @property {string} [title]
 * @property {string} [username]
 * @property {User} [manager]
 * @property {Image[]} [images]
 * @property {number} version - Required when updating a user, this value should be the current version of the user.  The current version can be obtained with a GET on the user before doing a PATCH.
 * @property {string[]} [certifications]
 * @property {Biography} [biography]
 * @property {EmployerInfo} [employerInfo]
 * @property {string} [preferredName] - Preferred full name of the agent
 * @property {RoutingStatus} [routingStatus] - ACD routing status
 * @property {UserPresence} [presence] - Active presence
 * @property {UserPresence} [integrationPresence] - Integration presence
 * @property {UserConversationSummary} [conversationSummary] - Summary of conversion statistics for conversation types.
 * @property {OutOfOffice} [outOfOffice] - Determine if out of office is enabled
 * @property {Geolocation} [geolocation] - Current geolocation position
 * @property {UserStations} [station] - Effective, default, and last station information
 * @property {UserAuthorization} [authorization] - Roles and permissions assigned to the user
 * @property {string[]} [profileSkills] - Profile skills possessed by the user
 * @property {Location[]} [locations] - The user placement at each site location.
 * @property {Group[]} [groups] - The groups the user is a member of
 * @property {Team} [team] - The team the user is a member of
 * @property {WorkPlanBidRanks} [workPlanBidRanks] - The WFM work plan bid rank settings for the user
 * @property {UserRoutingSkill[]} [skills] - Routing (ACD) skills possessed by the user
 * @property {UserRoutingLanguage[]} [languages] - Routing (ACD) languages possessed by the user
 * @property {boolean} [acdAutoAnswer] - acd auto answer
 * @property {string} [languagePreference] - preferred language by the user
 * @property {OAuthLastTokenIssued} [lastTokenIssued]
 * @property {string} [dateLastLogin] - The last time the user logged in using username and password. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateWelcomeSent] - The date & time the user was sent their welcome email. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {Organization} [organization]
 */
 
/**
 * @typedef {object} OutOfOffice
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {User} [user]
 * @property {string} [startDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {boolean} [active]
 * @property {boolean} [indefinite]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} PhoneNumber
 * @property {string} [display] - The displayed form of the phone number string. Users should input the phone number in this field, but it will be altered by the API on write. If the phone number can be read as E164, the value will be replaced with international formatted-version of the number. If the number cannot be read as E164, the value will be preserved as-is. In both cases, the provided input string will be copied to the userInput field.
 * @property {number} [extension] - An optional extension for the provided phone number.
 * @property {boolean} [acceptsSMS] - Whether this phone number can accept SMS messages.
 * @property {string} [normalizationCountryCode] - The country code that will be used for E164 conversion of a provided phone number. If the country code is omitted from the provided phone number, the country code provided in this field will be used during the E164 conversion attempt. If this field is left empty, the default country code for any provided phone number that does not explicitly include a country code is assumed to be +1 (North America).
 * @property {string} [userInput] - The user-inputted phone number string that was provided to the display field on write. This field is not user-writeable and will always be set by the system.
 * @property {string} [e164] - The E164-formatted form of the provided phone number. This field is not user-writeable and will only be set when the provided phone number could be read as E164.
 * @property {string} [countryCode] - The detected country code from the provided phone number. This field is not user-writeable and will only be set when the provided phone number could be read as E164.
 */
 
/**
 * @typedef {object} PresenceDefinition
 * @property {string} [id] - description
 * @property {string} [systemPresence]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Relationship
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {WritableStarrableDivision} [division] - The division to which this entity belongs.
 * @property {User} user - The user associated with the external organization. When creating or updating a relationship, only User.id is required. User object is fully populated when expanding a note.
 * @property {ExternalOrganization} externalOrganization - The external organization this relationship is attached to
 * @property {string} relationship - The relationship or role of the user to this external organization.Examples: Account Manager, Sales Engineer, Implementation Consultant
 * @property {ExternalDataSource[]} [externalDataSources] - Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ResourceConditionNode
 * @property {string} [variableName]
 * @property {string} [conjunction]
 * @property {string} [operator]
 * @property {ResourceConditionValue[]} [operands]
 * @property {ResourceConditionNode[]} [terms]
 */
 
/**
 * @typedef {object} ResourceConditionValue
 * @property {string} [type]
 * @property {string} [value]
 */
 
/**
 * @typedef {object} ResourcePermissionPolicy
 * @property {string} [id]
 * @property {string} [domain]
 * @property {string} [entityName]
 * @property {string} [policyName]
 * @property {string} [policyDescription]
 * @property {string} [actionSetKey]
 * @property {boolean} [allowConditions]
 * @property {ResourceConditionNode} [resourceConditionNode]
 * @property {string[]} [namedResources]
 * @property {string} [resourceCondition]
 * @property {string[]} [actionSet]
 */
 
/**
 * @typedef {object} RoutingStatus
 * @property {string} [userId] - The userId of the agent
 * @property {string} [status] - Indicates the Routing State of the agent.  A value of OFF_QUEUE will be returned if the specified user does not exist.
 * @property {string} [startTime] - The timestamp when the agent went into this state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} Team
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The team name
 * @property {WritableDivision} [division] - The division to which this entity belongs.
 * @property {string} [description] - Team information.
 * @property {string} [dateCreated] - Last modified datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [memberCount] - Number of members in a team
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Ticker
 * @property {string} symbol - The ticker symbol for this organization. Example: ININ, AAPL, MSFT, etc.
 * @property {string} exchange - The exchange for this ticker symbol. Examples: NYSE, FTSE, NASDAQ, etc.
 */
 
/**
 * @typedef {object} TrusteeAuthorization
 * @property {string[]} [permissions] - Permissions that the trustee user has in the trustor organization
 */
 
/**
 * @typedef {object} Trustor
 * @property {string} [id] - Organization Id for this trust.
 * @property {boolean} enabled - If disabled no trustee user will have access, even if they were previously added.
 * @property {string} [dateCreated] - Date Trust was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {OrgUser} [createdBy] - User that created trust.
 * @property {Organization} [organization] - Organization associated with this trust.
 * @property {TrusteeAuthorization} [authorization] - Authorization for the trustee user has in this trustor organization
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * User information for a twitter account
 * @typedef {object} TwitterId
 * @property {string} [id] - twitter user.id_str
 * @property {string} [name] - twitter user.name
 * @property {string} [screenName] - twitter user.screen_name
 * @property {boolean} [verified] - whether this data has been verified using the twitter API
 * @property {string} [profileUrl] - url of user's twitter profile
 */
 
/**
 * @typedef {object} User
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {Division} [division] - The division to which this entity belongs.
 * @property {Chat} [chat]
 * @property {string} [department]
 * @property {string} [email]
 * @property {Contact[]} [primaryContactInfo] - Auto populated from addresses.
 * @property {Contact[]} [addresses] - Email addresses and phone numbers for this user
 * @property {string} [state] - The current state for this user.
 * @property {string} [title]
 * @property {string} [username]
 * @property {User} [manager]
 * @property {Image[]} [images]
 * @property {number} version - Required when updating a user, this value should be the current version of the user.  The current version can be obtained with a GET on the user before doing a PATCH.
 * @property {string[]} [certifications]
 * @property {Biography} [biography]
 * @property {EmployerInfo} [employerInfo]
 * @property {string} [preferredName] - Preferred full name of the agent
 * @property {RoutingStatus} [routingStatus] - ACD routing status
 * @property {UserPresence} [presence] - Active presence
 * @property {UserPresence} [integrationPresence] - Integration presence
 * @property {UserConversationSummary} [conversationSummary] - Summary of conversion statistics for conversation types.
 * @property {OutOfOffice} [outOfOffice] - Determine if out of office is enabled
 * @property {Geolocation} [geolocation] - Current geolocation position
 * @property {UserStations} [station] - Effective, default, and last station information
 * @property {UserAuthorization} [authorization] - Roles and permissions assigned to the user
 * @property {string[]} [profileSkills] - Profile skills possessed by the user
 * @property {Location[]} [locations] - The user placement at each site location.
 * @property {Group[]} [groups] - The groups the user is a member of
 * @property {Team} [team] - The team the user is a member of
 * @property {WorkPlanBidRanks} [workPlanBidRanks] - The WFM work plan bid rank settings for the user
 * @property {UserRoutingSkill[]} [skills] - Routing (ACD) skills possessed by the user
 * @property {UserRoutingLanguage[]} [languages] - Routing (ACD) languages possessed by the user
 * @property {boolean} [acdAutoAnswer] - acd auto answer
 * @property {string} [languagePreference] - preferred language by the user
 * @property {OAuthLastTokenIssued} [lastTokenIssued]
 * @property {string} [dateLastLogin] - The last time the user logged in using username and password. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateWelcomeSent] - The date & time the user was sent their welcome email. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} UserAuthorization
 * @property {DomainRole[]} [roles]
 * @property {DomainRole[]} [unusedRoles] - A collection of the roles the user is not using
 * @property {string[]} [permissions] - A collection of the permissions granted by all assigned roles
 * @property {ResourcePermissionPolicy[]} [permissionPolicies] - The policies configured for assigned permissions.
 */
 
/**
 * @typedef {object} UserConversationSummary
 * @property {string} [userId]
 * @property {MediaSummary} [call]
 * @property {MediaSummary} [callback]
 * @property {MediaSummary} [email]
 * @property {MediaSummary} [message]
 * @property {MediaSummary} [chat]
 * @property {MediaSummary} [socialExpression]
 * @property {MediaSummary} [video]
 */
 
/**
 * @typedef {object} UserPresence
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [source] - Deprecated - The sourceID field should be used as a replacement.
 * @property {string} [sourceId] - Represents the ID of a registered source
 * @property {boolean} [primary] - A boolean used to tell whether or not to set this presence source as the primary on a PATCH
 * @property {PresenceDefinition} [presenceDefinition]
 * @property {string} [message]
 * @property {string} [modifiedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Represents an organization language assigned to a user. When assigning to a user specify the organization language id as the id.
 * @typedef {object} UserRoutingLanguage
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {number} [proficiency] - A rating from 0.0 to 5.0 that indicates how fluent an agent is in a particular language. ACD interactions are routed to agents with higher proficiency ratings.
 * @property {string} [state] - Activate or deactivate this routing language.
 * @property {string} [languageUri] - URI to the organization language used by this user language.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Represents an organization skill assigned to a user. When assigning to a user specify the organization skill id as the id.
 * @typedef {object} UserRoutingSkill
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {number} [proficiency] - A rating from 0.0 to 5.0 that indicates how adept an agent is at a particular skill. When "Best available skills" is enabled for a queue in Genesys Cloud, ACD interactions in that queue are routed to agents with higher proficiency ratings.
 * @property {string} [state] - Activate or deactivate this routing skill.
 * @property {string} [skillUri] - URI to the organization skill used by this user skill.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} UserStation
 * @property {string} [id] - A globally unique identifier for this station
 * @property {string} [name]
 * @property {string} [type]
 * @property {User} [associatedUser]
 * @property {string} [associatedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {User} [defaultUser]
 * @property {object} [providerInfo] - Provider-specific info for this station, e.g. { "edgeGroupId": "ffe7b15c-a9cc-4f4c-88f5-781327819a49" }
 * @property {number} [webRtcCallAppearances] - The number of call appearances on the station.
 */
 
/**
 * @typedef {object} UserStations
 * @property {UserStation} [associatedStation] - Current associated station for this user.
 * @property {UserStation} [effectiveStation] - The station where the user can be reached based on their default and associated station.
 * @property {UserStation} [defaultStation] - Default station to be used if not associated with a station.
 * @property {UserStation} [lastAssociatedStation] - Last associated station for this user.
 */
 
/**
 * User information for a WhatsApp account
 * @typedef {object} WhatsAppId
 * @property {PhoneNumber} [phoneNumber] - The phone number associated with this WhatsApp account
 * @property {string} [displayName] - The displayName of this person's account in WhatsApp
 */
 
/**
 * @typedef {object} WorkPlanBidRanks
 * @property {string} [id] - The globally unique identifier for the user.
 * @property {number} [workPlanBiddingPerformance] - Work plan bidding agent performance ranking. The range of values is between 0 and 9999.
 * @property {string} [biddingTieBreaker] - Custom agent ranking metric that some customers can use.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WritableDivision
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WritableStarrableDivision
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [selfUri] - The URI for this object
 */
 

/**
 * ExternalContacts - External Organizations, contacts, notes and relationships
 * @class ExternalContacts
 */
class ExternalContactsAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the ExternalContacts class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Bulk remove contacts
	 * @async
	 * @param {BulkIdsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/contacts/remove" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkContactsRemove(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/contacts/remove";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk fetch contacts
	 * @async
	 * @param {BulkIdsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/contacts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkContacts(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/contacts";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk update contacts
	 * @async
	 * @param {BulkContactsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/contacts/update" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkContactsUpdate(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/contacts/update";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk fetch unresolved ancestor contacts
	 * @async
	 * @param {BulkIdsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/contacts/unresolved" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkContactsUnresolved(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/contacts/unresolved";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk add contacts
	 * @async
	 * @param {BulkContactsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/contacts/add" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkContactsAdd(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/contacts/add";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk add notes
	 * @async
	 * @param {BulkNotesRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/notes/add" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkNotesAdd(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/notes/add";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk remove notes
	 * @async
	 * @param {BulkIdsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/notes/remove" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkNotesRemove(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/notes/remove";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk fetch notes
	 * @async
	 * @param {BulkIdsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/notes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkNotes(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/notes";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk update notes
	 * @async
	 * @param {BulkNotesRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/notes/update" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkNotesUpdate(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/notes/update";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk add organizations
	 * @async
	 * @param {BulkOrganizationsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/organizations/add" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkOrganizationsAdd(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/organizations/add";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk remove organizations
	 * @async
	 * @param {BulkIdsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/organizations/remove" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkOrganizationsRemove(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/organizations/remove";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk fetch organizations
	 * @async
	 * @param {BulkIdsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/organizations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkOrganizations(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/organizations";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk update organizations
	 * @async
	 * @param {BulkOrganizationsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/organizations/update" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkOrganizationsUpdate(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/organizations/update";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk add relationships
	 * @async
	 * @param {BulkRelationshipsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/relationships/add" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkRelationshipsAdd(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/relationships/add";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk remove relationships
	 * @async
	 * @param {BulkIdsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/relationships/remove" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkRelationshipsRemove(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/relationships/remove";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk fetch relationships
	 * @async
	 * @param {BulkIdsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/relationships" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkRelationships(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/relationships";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Bulk update relationships
	 * @async
	 * @param {BulkRelationshipsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/bulk/relationships/update" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsBulkRelationshipsUpdate(body) {
		const endpointPath = "/api/v2/externalcontacts/bulk/relationships/update";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch a note for an external contact
	 * @async
	 * @param {string} contactId - ExternalContact Id
	 * @param {string} noteId - Note Id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsContactNote(contactId, noteId, query) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		if (this.#checkJSONSchemaType(noteId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "noteId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.pathParameters.noteId = noteId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a note for an external contact
	 * @async
	 * @param {string} contactId - ExternalContact Id
	 * @param {string} noteId - Note Id
	 * @param {Note} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsContactNote(contactId, noteId, body) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		if (this.#checkJSONSchemaType(noteId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "noteId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.pathParameters.noteId = noteId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a note for an external contact
	 * @async
	 * @param {string} contactId - ExternalContact Id
	 * @param {string} noteId - Note Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsContactNote(contactId, noteId) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/notes/{noteId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		if (this.#checkJSONSchemaType(noteId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "noteId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.pathParameters.noteId = noteId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List notes for an external contact
	 * @async
	 * @param {string} contactId - ExternalContact Id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {number} [query.pageNumber] -  Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {string} [query.sortOrder] -  The Note field to sort by. Any of: [createDate]. Direction: [asc, desc].  e.g. "createDate:asc", "createDate:desc"
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/notes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsContactNotes(contactId, query) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/notes";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a note for an external contact
	 * @async
	 * @param {string} contactId - ExternalContact Id
	 * @param {Note} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/notes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsContactNotes(contactId, body) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/notes";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List the identifiers for a contact
	 * @async
	 * @param {string} contactId - ExternalContact ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/identifiers" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsContactIdentifiers(contactId) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/identifiers";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Claim or release identifiers for a contact
	 * @async
	 * @param {string} contactId - ExternalContact ID
	 * @param {IdentifierClaimRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/identifiers" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchExternalcontactsContactIdentifiers(contactId, body) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/identifiers";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch an external contact
	 * @async
	 * @param {string} contactId - ExternalContact ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsContact(contactId, query) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an external contact
	 * @async
	 * @param {string} contactId - ExternalContact ID
	 * @param {ExternalContact} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsContact(contactId, body) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an external contact
	 * @async
	 * @param {string} contactId - ExternalContact ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsContact(contactId) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Promote an observed contact (ephemeral or identified) to a curated contact
	 * @async
	 * @param {string} contactId - ExternalContact ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/promotion" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postExternalcontactsContactPromotion(contactId) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/promotion";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsContactsSchema(schemaId) {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas/{schemaId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @param {DataSchema} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsContactsSchema(schemaId, body) {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas/{schemaId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsContactsSchema(schemaId) {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas/{schemaId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a specific version of a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @param {string} versionId - Schema version
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas/{schemaId}/versions/{versionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsContactsSchemaVersion(schemaId, versionId) {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas/{schemaId}/versions/{versionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;
		apiCallOptions.pathParameters.versionId = versionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all versions of an external contact's schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas/{schemaId}/versions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsContactsSchemaVersions(schemaId) {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas/{schemaId}/versions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of schemas.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas" endpoint.
	 */
	getExternalcontactsContactsSchemas() {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a schema
	 * @async
	 * @param {DataSchema} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsContactsSchemas(body) {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Merge two contacts into a new contact record
	 * @async
	 * @param {MergeRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/merge/contacts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postExternalcontactsMergeContacts(body) {
		const endpointPath = "/api/v2/externalcontacts/merge/contacts";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Search for external contacts
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {number} [query.pageNumber] -  Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {string} [query.q] -  User supplied search keywords (no special syntax is currently supported)
	 * @param {string} [query.sortOrder] -  The External Contact field to sort by. Any of: [firstName, lastName, middleName, title]. Direction: [asc, desc]. e.g. "firstName:asc", "title:desc"
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @param {string[]} [query.divisionIds] -  which divisions to search, up to 50
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsContacts(query) {
		const endpointPath = "/api/v2/externalcontacts/contacts";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("q" in query && this.#checkJSONSchemaType(query["q"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "q", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("divisionIds" in query && this.#checkJSONSchemaType(query["divisionIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionIds", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an external contact
	 * @async
	 * @param {ExternalContact} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsContacts(body) {
		const endpointPath = "/api/v2/externalcontacts/contacts";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Scan for external contacts using paging
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.limit] -  The number of contacts per page; must be between 10 and 200, default is 100
	 * @param {string} [query.cursor] -  Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL
	 * @param {string} [query.divisionId] -  The division to scan over
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/scan/contacts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsScanContacts(query) {
		const endpointPath = "/api/v2/externalcontacts/scan/contacts";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "integer");
			}
			if ("cursor" in query && this.#checkJSONSchemaType(query["cursor"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "cursor", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Associate/disassociate an external contact with a conversation
	 * @async
	 * @param {string} conversationId - Conversation ID
	 * @param {ConversationAssociation} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/conversations/{conversationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsConversation(conversationId, body) {
		const endpointPath = "/api/v2/externalcontacts/conversations/{conversationId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Search for external contacts in an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {number} [query.pageNumber] -  Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {string} [query.q] -  User supplied search keywords (no special syntax is currently supported)
	 * @param {string} [query.sortOrder] -  The External Contact field to sort by. Any of: [firstName, lastName, middleName, title]. Direction: [asc, desc]. e.g. "firstName:asc", "title:desc"
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsOrganizationContacts(externalOrganizationId, query) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/contacts";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("q" in query && this.#checkJSONSchemaType(query["q"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "q", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch a note for an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization Id
	 * @param {string} noteId - Note Id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsOrganizationNote(externalOrganizationId, noteId, query) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		if (this.#checkJSONSchemaType(noteId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "noteId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.pathParameters.noteId = noteId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a note for an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization Id
	 * @param {string} noteId - Note Id
	 * @param {Note} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsOrganizationNote(externalOrganizationId, noteId, body) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		if (this.#checkJSONSchemaType(noteId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "noteId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.pathParameters.noteId = noteId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a note for an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization Id
	 * @param {string} noteId - Note Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsOrganizationNote(externalOrganizationId, noteId) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes/{noteId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		if (this.#checkJSONSchemaType(noteId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "noteId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.pathParameters.noteId = noteId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List notes for an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization Id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {number} [query.pageNumber] -  Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {string} [query.sortOrder] -  The Note field to sort by. Any of: [createDate]. Direction: [asc, desc]. e.g. "createDate:asc", "createDate:desc"
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsOrganizationNotes(externalOrganizationId, query) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a note for an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization Id
	 * @param {Note} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsOrganizationNotes(externalOrganizationId, body) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/notes";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch a relationship for an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {number} [query.pageNumber] -  Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @param {string} [query.sortOrder] -  The Relationship field to sort by. Any of: [createDate, relationship]. Direction: [asc, desc]. e.g. "createDate:asc", "relationship:desc"
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsOrganizationRelationships(externalOrganizationId, query) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/relationships";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @param {boolean} [query.includeTrustors] -  (true or false) whether or not to include trustor information embedded in the externalOrganization
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsOrganization(externalOrganizationId, query) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("includeTrustors" in query && this.#checkJSONSchemaType(query["includeTrustors"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeTrustors", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization ID
	 * @param {ExternalOrganization} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsOrganization(externalOrganizationId, body) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an external organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsOrganization(externalOrganizationId) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsOrganizationsSchema(schemaId) {
		const endpointPath = "/api/v2/externalcontacts/organizations/schemas/{schemaId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @param {DataSchema} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsOrganizationsSchema(schemaId, body) {
		const endpointPath = "/api/v2/externalcontacts/organizations/schemas/{schemaId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a specific version of a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @param {string} versionId - Schema version
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/schemas/{schemaId}/versions/{versionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsOrganizationsSchemaVersion(schemaId, versionId) {
		const endpointPath = "/api/v2/externalcontacts/organizations/schemas/{schemaId}/versions/{versionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;
		apiCallOptions.pathParameters.versionId = versionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all versions of an external organization's schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/schemas/{schemaId}/versions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsOrganizationsSchemaVersions(schemaId) {
		const endpointPath = "/api/v2/externalcontacts/organizations/schemas/{schemaId}/versions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of schemas.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/schemas" endpoint.
	 */
	getExternalcontactsOrganizationsSchemas() {
		const endpointPath = "/api/v2/externalcontacts/organizations/schemas";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a schema
	 * @async
	 * @param {DataSchema} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/schemas" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsOrganizationsSchemas(body) {
		const endpointPath = "/api/v2/externalcontacts/organizations/schemas";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Links a Trustor with an External Organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization ID
	 * @param {string} trustorId - Trustor ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	putExternalcontactsOrganizationTrustorTrustorId(externalOrganizationId, trustorId) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor/{trustorId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		if (this.#checkJSONSchemaType(trustorId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "trustorId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;
		apiCallOptions.pathParameters.trustorId = trustorId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Unlink the Trustor for this External Organization
	 * @async
	 * @param {string} externalOrganizationId - External Organization ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsOrganizationTrustor(externalOrganizationId) {
		const endpointPath = "/api/v2/externalcontacts/organizations/{externalOrganizationId}/trustor";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalOrganizationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalOrganizationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalOrganizationId = externalOrganizationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Search for external organizations
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {number} [query.pageNumber] -  Page number (limited to fetching first 1,000 records; pageNumber * pageSize must be <= 1,000)
	 * @param {string} [query.q] -  Search query
	 * @param {string[]} [query.trustorId] -  Search for external organizations by trustorIds (limit 25). If supplied, the 'q' parameters is ignored. Items are returned in the order requested
	 * @param {string} [query.sortOrder] -  The Organization field to sort by. Any of: [companyType, industry, name]. Direction: [asc, desc]. e.g. "companyType:asc", "industry:desc"
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @param {boolean} [query.includeTrustors] -  (true or false) whether or not to include trustor information embedded in the externalOrganization
	 * @param {string[]} [query.divisionIds] -  which divisions to search, up to 50
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsOrganizations(query) {
		const endpointPath = "/api/v2/externalcontacts/organizations";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("q" in query && this.#checkJSONSchemaType(query["q"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "q", "string");
			}
			if ("trustorId" in query && this.#checkJSONSchemaType(query["trustorId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "trustorId", "array");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("includeTrustors" in query && this.#checkJSONSchemaType(query["includeTrustors"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeTrustors", "boolean");
			}
			if ("divisionIds" in query && this.#checkJSONSchemaType(query["divisionIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionIds", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an external organization
	 * @async
	 * @param {ExternalOrganization} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsOrganizations(body) {
		const endpointPath = "/api/v2/externalcontacts/organizations";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Scan for external organizations using paging
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.limit] -  The number of organizations per page; must be between 10 and 200, default is 100
	 * @param {string} [query.cursor] -  Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL
	 * @param {string} [query.divisionId] -  The division to scan over
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/scan/organizations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsScanOrganizations(query) {
		const endpointPath = "/api/v2/externalcontacts/scan/organizations";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "integer");
			}
			if ("cursor" in query && this.#checkJSONSchemaType(query["cursor"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "cursor", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch an External Source
	 * @async
	 * @param {string} externalSourceId - External Source ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/externalsources/{externalSourceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsExternalsource(externalSourceId) {
		const endpointPath = "/api/v2/externalcontacts/externalsources/{externalSourceId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalSourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalSourceId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalSourceId = externalSourceId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an External Source
	 * @async
	 * @param {string} externalSourceId - External Source ID
	 * @param {ExternalSource} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/externalsources/{externalSourceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsExternalsource(externalSourceId, body) {
		const endpointPath = "/api/v2/externalcontacts/externalsources/{externalSourceId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalSourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalSourceId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalSourceId = externalSourceId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an External Source. WARNING: Any records that reference this External Source will not be automatically cleaned up. Those records will still be editable, but their External IDs may not be fully viewable.
	 * @async
	 * @param {string} externalSourceId - External Source ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/externalsources/{externalSourceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsExternalsource(externalSourceId) {
		const endpointPath = "/api/v2/externalcontacts/externalsources/{externalSourceId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(externalSourceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalSourceId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.externalSourceId = externalSourceId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch a list of External Sources
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.cursor] -  Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL
	 * @param {number} [query.limit] -  The number of ExternalSources per page; must be between 10 and 200, default is 100
	 * @param {string} [query.name] -  Filter by external source name. Filtering is prefix filtering and not an exact match
	 * @param {boolean} [query.active] -  Filter by active status of external source
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/externalsources" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsExternalsources(query) {
		const endpointPath = "/api/v2/externalcontacts/externalsources";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("cursor" in query && this.#checkJSONSchemaType(query["cursor"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "cursor", "string");
			}
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "integer");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("active" in query && this.#checkJSONSchemaType(query["active"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "active", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an External Source
	 * @async
	 * @param {ExternalSource} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/externalsources" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsExternalsources(body) {
		const endpointPath = "/api/v2/externalcontacts/externalsources";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch a contact using an identifier type and value.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  which field, if any, to expand
	 * @param {ContactIdentifier} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/identifierlookup" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postExternalcontactsIdentifierlookup(query, body) {
		const endpointPath = "/api/v2/externalcontacts/identifierlookup";
		const endpointMethod = "POST";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all sessions for a given external contact.
	 * @async
	 * @param {string} contactId - ExternalContact ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {boolean} [query.includeMerged] -  Indicates whether to return sessions from all external contacts in the merge-set of the given one.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/journey/sessions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsContactJourneySessions(contactId, query) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/journey/sessions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("includeMerged" in query && this.#checkJSONSchemaType(query["includeMerged"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeMerged", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Scan for notes using paging
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.limit] -  The number of notes per page; must be between 10 and 200, default is 100
	 * @param {string} [query.cursor] -  Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL
	 * @param {string} [query.divisionId] -  The division to scan over
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/scan/notes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsScanNotes(query) {
		const endpointPath = "/api/v2/externalcontacts/scan/notes";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "integer");
			}
			if ("cursor" in query && this.#checkJSONSchemaType(query["cursor"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "cursor", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch a relationship
	 * @async
	 * @param {string} relationshipId - Relationship Id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/relationships/{relationshipId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsRelationship(relationshipId, query) {
		const endpointPath = "/api/v2/externalcontacts/relationships/{relationshipId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(relationshipId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "relationshipId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.relationshipId = relationshipId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a relationship
	 * @async
	 * @param {string} relationshipId - Relationship Id
	 * @param {Relationship} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/relationships/{relationshipId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsRelationship(relationshipId, body) {
		const endpointPath = "/api/v2/externalcontacts/relationships/{relationshipId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(relationshipId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "relationshipId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.relationshipId = relationshipId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a relationship
	 * @async
	 * @param {string} relationshipId - Relationship Id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/relationships/{relationshipId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsRelationship(relationshipId) {
		const endpointPath = "/api/v2/externalcontacts/relationships/{relationshipId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(relationshipId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "relationshipId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.relationshipId = relationshipId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a relationship
	 * @async
	 * @param {Relationship} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/relationships" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsRelationships(body) {
		const endpointPath = "/api/v2/externalcontacts/relationships";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Scan for relationships
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.limit] -  The number of relationships per page; must be between 10 and 200, default is 100
	 * @param {string} [query.cursor] -  Indicates where to resume query results (not required for first page), each page returns a new cursor with a 24h TTL
	 * @param {string} [query.divisionId] -  The division to scan over
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/scan/relationships" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsScanRelationships(query) {
		const endpointPath = "/api/v2/externalcontacts/scan/relationships";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("limit" in query && this.#checkJSONSchemaType(query["limit"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "limit", "integer");
			}
			if ("cursor" in query && this.#checkJSONSchemaType(query["cursor"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "cursor", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Look up contacts and externalOrganizations based on an attribute. Maximum of 25 values returned.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} query.lookupVal -  User supplied value to lookup contacts/externalOrganizations (supports email addresses, e164 phone numbers, Twitter screen names)
	 * @param {string[]} [query.expand] -  which field, if any, to expand
	 * @param {string} [query.divisionId] -  Specifies which division to lookup contacts/externalOrganizations in, for the given lookup value
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/reversewhitepageslookup" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsReversewhitepageslookup(query) {
		const endpointPath = "/api/v2/externalcontacts/reversewhitepageslookup";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("lookupVal" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "lookupVal");
		}

		if (this.#checkJSONSchemaType(query["lookupVal"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "lookupVal", "string");
		}

		if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
		}

		if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Fetch an unresolved external contact
	 * @async
	 * @param {string} contactId - ExternalContact ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/{contactId}/unresolved" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsContactUnresolved(contactId, query) {
		const endpointPath = "/api/v2/externalcontacts/contacts/{contactId}/unresolved";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the core types from which all schemas are built.
	 * @async
	 * @param {string} coreTypeName - Name of the core type
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas/coretypes/{coreTypeName}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsContactsSchemasCoretype(coreTypeName) {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas/coretypes/{coreTypeName}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(coreTypeName, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "coreTypeName", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.coreTypeName = coreTypeName;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the core types from which all schemas are built.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas/coretypes" endpoint.
	 */
	getExternalcontactsContactsSchemasCoretypes() {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas/coretypes";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get quantitative limits on schemas
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/schemas/limits" endpoint.
	 */
	getExternalcontactsContactsSchemasLimits() {
		const endpointPath = "/api/v2/externalcontacts/contacts/schemas/limits";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the core types from which all schemas are built.
	 * @async
	 * @param {string} coreTypeName - Name of the core type
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/schemas/coretypes/{coreTypeName}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsOrganizationsSchemasCoretype(coreTypeName) {
		const endpointPath = "/api/v2/externalcontacts/organizations/schemas/coretypes/{coreTypeName}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(coreTypeName, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "coreTypeName", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.coreTypeName = coreTypeName;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the core types from which all schemas are built.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/schemas/coretypes" endpoint.
	 */
	getExternalcontactsOrganizationsSchemasCoretypes() {
		const endpointPath = "/api/v2/externalcontacts/organizations/schemas/coretypes";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get quantitative limits on schemas
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/organizations/schemas/limits" endpoint.
	 */
	getExternalcontactsOrganizationsSchemasLimits() {
		const endpointPath = "/api/v2/externalcontacts/organizations/schemas/limits";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get export for exportId
	 * @async
	 * @param {string} exportId - Export id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/exports/{exportId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsContactsExport(exportId) {
		const endpointPath = "/api/v2/externalcontacts/contacts/exports/{exportId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(exportId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "exportId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.exportId = exportId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List exports for organization
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.divisionIds] -  Division IDs of entities
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities
	 * @param {number} [query.pageSize] -  Number of entities to return
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/exports" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsContactsExports(query) {
		const endpointPath = "/api/v2/externalcontacts/contacts/exports";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("divisionIds" in query && this.#checkJSONSchemaType(query["divisionIds"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionIds", "array");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create bulk export
	 * @async
	 * @param {ContactsExport} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/contacts/exports" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsContactsExports(body) {
		const endpointPath = "/api/v2/externalcontacts/contacts/exports";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get job based on id
	 * @async
	 * @param {string} jobId - Job id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsImportJob(jobId, query) {
		const endpointPath = "/api/v2/externalcontacts/import/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update Job's workflow status
	 * @async
	 * @param {string} jobId - Job id
	 * @param {ContactImportJobStatusUpdateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsImportJob(jobId, body) {
		const endpointPath = "/api/v2/externalcontacts/import/jobs/{jobId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List jobs for organization
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  which fields, if any, to expand
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 100.
	 * @param {string} [query.sortOrder] -  Direction of sorting.
	 * @param {string} [query.jobStatus] -  Search term to filter by jobStatus
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsImportJobs(query) {
		const endpointPath = "/api/v2/externalcontacts/import/jobs";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("jobStatus" in query && this.#checkJSONSchemaType(query["jobStatus"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobStatus", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new job
	 * @async
	 * @param {ContactImportJobRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsImportJobs(body) {
		const endpointPath = "/api/v2/externalcontacts/import/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get setting based on id
	 * @async
	 * @param {string} settingsId - Settings id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/settings/{settingsId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsImportSetting(settingsId) {
		const endpointPath = "/api/v2/externalcontacts/import/settings/{settingsId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(settingsId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "settingsId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.settingsId = settingsId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update settings
	 * @async
	 * @param {string} settingsId - Settings id
	 * @param {ContactImportSettings} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/settings/{settingsId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsImportSetting(settingsId, body) {
		const endpointPath = "/api/v2/externalcontacts/import/settings/{settingsId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(settingsId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "settingsId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.settingsId = settingsId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Settings
	 * @async
	 * @param {string} settingsId - Settings id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/settings/{settingsId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsImportSetting(settingsId) {
		const endpointPath = "/api/v2/externalcontacts/import/settings/{settingsId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(settingsId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "settingsId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.settingsId = settingsId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List settings for organization
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 100.
	 * @param {string} [query.sortOrder] -  Direction of sorting.
	 * @param {string} [query.name] -  Search term to filter by settings name
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/settings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsImportSettings(query) {
		const endpointPath = "/api/v2/externalcontacts/import/settings";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new settings
	 * @async
	 * @param {ContactImportSettings} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/settings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsImportSettings(body) {
		const endpointPath = "/api/v2/externalcontacts/import/settings";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create CSV import job
	 * @async
	 * @param {CsvJobRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/csv/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsImportCsvJobs(body) {
		const endpointPath = "/api/v2/externalcontacts/import/csv/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get settings for CSV import
	 * @async
	 * @param {string} settingsId - Settings id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/csv/settings/{settingsId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsImportCsvSetting(settingsId) {
		const endpointPath = "/api/v2/externalcontacts/import/csv/settings/{settingsId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(settingsId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "settingsId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.settingsId = settingsId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update settings for CSV import
	 * @async
	 * @param {string} settingsId - Settings id
	 * @param {CsvSettings} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/csv/settings/{settingsId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putExternalcontactsImportCsvSetting(settingsId, body) {
		const endpointPath = "/api/v2/externalcontacts/import/csv/settings/{settingsId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(settingsId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "settingsId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.settingsId = settingsId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete settings for CSV import
	 * @async
	 * @param {string} settingsId - Settings id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/csv/settings/{settingsId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteExternalcontactsImportCsvSetting(settingsId) {
		const endpointPath = "/api/v2/externalcontacts/import/csv/settings/{settingsId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(settingsId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "settingsId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.settingsId = settingsId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve all settings for organization filtered by externalSettingsId if provided
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {string} [query.pageSize] -  Number of entities to return. Maximum of 200.
	 * @param {string} [query.externalSettingsId] -  External Settings Id to filter the list.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/csv/settings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getExternalcontactsImportCsvSettings(query) {
		const endpointPath = "/api/v2/externalcontacts/import/csv/settings";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "string");
			}
			if ("externalSettingsId" in query && this.#checkJSONSchemaType(query["externalSettingsId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "externalSettingsId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create settings for CSV import
	 * @async
	 * @param {CsvSettings} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/csv/settings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsImportCsvSettings(body) {
		const endpointPath = "/api/v2/externalcontacts/import/csv/settings";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get details for CSV upload
	 * @async
	 * @param {string} uploadId - Upload id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/csv/uploads/{uploadId}/details" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsImportCsvUploadDetails(uploadId) {
		const endpointPath = "/api/v2/externalcontacts/import/csv/uploads/{uploadId}/details";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(uploadId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "uploadId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.uploadId = uploadId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get preview for CSV upload
	 * @async
	 * @param {string} uploadId - Upload id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/csv/uploads/{uploadId}/preview" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getExternalcontactsImportCsvUploadPreview(uploadId) {
		const endpointPath = "/api/v2/externalcontacts/import/csv/uploads/{uploadId}/preview";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(uploadId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "uploadId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.uploadId = uploadId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get url for CSV upload
	 * @async
	 * @param {CsvUploadRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/externalcontacts/import/csv/uploads" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postExternalcontactsImportCsvUploads(body) {
		const endpointPath = "/api/v2/externalcontacts/import/csv/uploads";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { ExternalContactsAPI };