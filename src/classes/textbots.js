/**
 * Chatbot Interactions
 * @module gc-platform-api-textbots
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.316Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} AmazonLexRequest
 * @property {object} [requestAttributes] - AttributeName/AttributeValue pairs of User Defined Request Attributes to be sent to the amazon bot See - https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs
 * @property {object} [sessionAttributes] - AttributeName/AttributeValue pairs of Session Attributes to be sent to the amazon bot. See - https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs
 */
 
/**
 * Attachment object.
 * @typedef {object} ConversationContentAttachment
 * @property {string} [id] - Provider specific ID for attachment. For example, a LINE sticker ID.
 * @property {string} mediaType - The type of attachment this instance represents.
 * @property {string} [url] - URL of the attachment.
 * @property {string} [mime] - Attachment mime type (https://www.iana.org/assignments/media-types/media-types.xhtml).
 * @property {string} [text] - Text associated with attachment such as an image caption.
 * @property {string} [sha256] - Secure hash of the attachment content.
 * @property {string} [filename] - Suggested file name for attachment.
 * @property {number} [contentSizeBytes] - Size in bytes of the attachment content.
 */
 
/**
 * Button response object representing the click of a structured message button, such as a quick reply.
 * @typedef {object} ConversationContentButtonResponse
 * @property {string} [type] - Describes the button that resulted in the Button Response.
 * @property {string} text - The response text from the button click.
 * @property {string} payload - The response payload associated with the clicked button.
 */
 
/**
 * Card content object.
 * @typedef {object} ConversationContentCard
 * @property {string} title - Text to show in the title.
 * @property {string} [description] - Text to show in the description.
 * @property {string} [image] - URL of an image.
 * @property {string} [video] - URL of a video.
 * @property {ConversationContentCardAction} [defaultAction] - The default button action.
 * @property {ConversationContentCardAction[]} actions - An array of action objects.
 */
 
/**
 * A card action that a user can take.
 * @typedef {object} ConversationContentCardAction
 * @property {string} [type] - Describes the type of action.
 * @property {string} [text] - The response text from the button click.
 * @property {string} [payload] - Text to be returned as the payload from a ButtonResponse when a button is clicked. The payload and text are a combination which will have to be unique across each card and carousel in order to determine which button was clicked in that card or carousel.
 * @property {string} [url] - A URL of a web page to direct the user to.
 */
 
/**
 * Carousel content object.
 * @typedef {object} ConversationContentCarousel
 * @property {ConversationContentCard[]} cards - An array of card objects.
 */
 
/**
 * Location object.
 * @typedef {object} ConversationContentLocation
 * @property {string} [url] - URL of the Location.
 * @property {string} [address] - Location postal address.
 * @property {string} [text] - Location name.
 * @property {number} [latitude] - Latitude of the location.
 * @property {number} [longitude] - Longitude of the location.
 */
 
/**
 * Template notification object.
 * @typedef {object} ConversationContentNotificationTemplate
 * @property {string} [id] - The identifier of the message template in 'your-namespace@your-template-id/name' format. For External vendor (e.g WhatsApp), 'your-namespace@your-template-name'. For GenesysCloud canned response message template use 'cannedresponse' as your-namespace and use response ID as your-template-id (e.g. response ID=1234 then 'cannedresponse@1234')
 * @property {string} [language] - Template language.
 * @property {ConversationNotificationTemplateHeader} [header] - The template header.
 * @property {ConversationNotificationTemplateBody} body - The template body.
 * @property {ConversationNotificationTemplateButton[]} [buttons] - Template buttons
 * @property {ConversationNotificationTemplateFooter} [footer] - The template footer.
 */
 
/**
 * Quick reply object.
 * @typedef {object} ConversationContentQuickReply
 * @property {string} text - Text to show inside the quick reply. This is also used as the response text after clicking on the quick reply.
 * @property {string} payload - Content of the payload included in the quick reply response. Could be an ID identifying the quick reply response.
 * @property {string} [image] - URL of an image associated with the quick reply.
 * @property {string} [action] - Specifies the type of action that is triggered upon clicking the quick reply.
 */
 
/**
 * Quick reply object V2.
 * @typedef {object} ConversationContentQuickReplyV2
 * @property {string} title - Text to show as the title of the quick reply.
 * @property {ConversationContentQuickReply[]} actions - An array of quick reply objects.
 */
 
/**
 * An ephemeral story.
 * @typedef {object} ConversationContentStory
 * @property {string} [type] - Type of ephemeral story attachment.
 * @property {string} [url] - URL to the ephemeral story.
 * @property {string} [replyToId] - ID of the ephemeral story being replied to.
 */
 
/**
 * Message content element containing text only.
 * @typedef {object} ConversationContentText
 * @property {string} [type] - Type of text content (Deprecated).
 * @property {string} body - Text to be shown for this content element.
 */
 
/**
 * Message content element. If contentType = "Attachment" only one item is allowed.
 * @typedef {object} ConversationMessageContent
 * @property {string} contentType - Type of this content element.
 * @property {ConversationContentLocation} [location] - Location content.
 * @property {ConversationContentAttachment} [attachment] - Attachment content.
 * @property {ConversationContentQuickReply} [quickReply] - Quick reply content.
 * @property {ConversationContentButtonResponse} [buttonResponse] - Button response content.
 * @property {ConversationContentNotificationTemplate} [template] - Template notification content.
 * @property {ConversationContentStory} [story] - Ephemeral story content.
 * @property {ConversationContentCard} [card] - Card content
 * @property {ConversationContentCarousel} [carousel] - Carousel content
 * @property {ConversationContentText} [text] - Text content.
 * @property {ConversationContentQuickReplyV2} [quickReplyV2] - Quick reply V2 content.
 */
 
/**
 * Template body object.
 * @typedef {object} ConversationNotificationTemplateBody
 * @property {string} [text] - Body text. For WhatsApp, ignored.
 * @property {ConversationNotificationTemplateParameter[]} parameters - Template parameters for placeholders in template.
 */
 
/**
 * Template button object
 * @typedef {object} ConversationNotificationTemplateButton
 * @property {string} type - Specifies the type of the button.
 * @property {string} [text] - Button text message.
 * @property {number} index - index of the button in the list.
 * @property {string} [phoneNumber] - Button phone number.
 * @property {string} [url] - Button URL link.
 * @property {ConversationNotificationTemplateParameter[]} [parameters] - Template parameters for placeholders in the button.
 */
 
/**
 * Template footer object.
 * @typedef {object} ConversationNotificationTemplateFooter
 * @property {string} [text] - Footer text. For WhatsApp, ignored.
 */
 
/**
 * Template header object.
 * @typedef {object} ConversationNotificationTemplateHeader
 * @property {string} type - Template header type.
 * @property {string} [text] - Header text. For WhatsApp, ignored.
 * @property {ConversationContentAttachment} [media] - Media template header image.
 * @property {ConversationNotificationTemplateParameter[]} [parameters] - Template parameters for placeholders in template.
 */
 
/**
 * Template parameters for placeholders in template.
 * @typedef {object} ConversationNotificationTemplateParameter
 * @property {string} [name] - Parameter name.
 * @property {string} text - Parameter text value.
 */
 
/**
 * @typedef {object} GenesysBotConnector
 * @property {object} [queryParameters] - User defined name/value parameters passed to the BotConnector bot.
 */
 
/**
 * @typedef {object} GoogleDialogflowCustomSettings
 * @property {string} [environment] - If set this environment will be used to initiate the dialogflow bot, otherwise the default configuration will be used.  See https://cloud.google.com/dialogflow/docs/agents-versions
 * @property {string} [eventName] - If set this eventName will be used to initiate the dialogflow bot rather than language processing on the input text.  See https://cloud.google.com/dialogflow/es/docs/events-overview
 * @property {object} [webhookQueryParameters] - Parameters passed to the fulfillment webhook of the bot (if any).
 * @property {object} [eventInputParameters] - Parameters passed to the event input of the bot.
 */
 
/**
 * @typedef {object} NuanceMixDlgSettings
 * @property {string} [channelId] - The Nuance channel ID to use when launching the Nuance bot, which must one of the code names of the bot's registered input channels.
 * @property {object} [inputParameters] - Name/value pairs of input variables to be sent to the Nuance bot. The values must be in the appropriate format for the variable's type (see https://docs.mix.nuance.com/dialog-grpc/v1/#simple-variable-types for help)
 */
 
/**
 * @typedef {object} PostTextMessage
 * @property {string} type - Message type
 * @property {string} [text] - Message text. If type is structured, used as fallback for clients that do not support particular structured content
 * @property {ConversationMessageContent[]} [content] - A list of content elements in message
 */
 
/**
 * @typedef {object} PostTextRequest
 * @property {string} botId - ID of the bot to send the text to.
 * @property {string} [botAlias] - Alias/Version of the bot
 * @property {string} integrationId - the integration service id for the bot's credentials
 * @property {string} botSessionId - GUID for this bot's session
 * @property {PostTextMessage} postTextMessage - Message to send to the bot
 * @property {string} [languageCode] - The launguage code the bot will run under
 * @property {number} [botSessionTimeoutMinutes] - Override timeout for the bot session. This should be greater than 10 minutes.
 * @property {string[]} [botChannels] - The channels this bot is utilizing
 * @property {string} [botCorrelationId] - Id for tracking the activity - this will be returned in the response
 * @property {string} [messagingPlatformType] - If the channels list contains a 'Messaging' item and the messaging platform is known, include it here to get accurate analytics
 * @property {AmazonLexRequest} [amazonLexRequest] - Provider specific settings, if any
 * @property {GoogleDialogflowCustomSettings} [googleDialogflow] - Provider specific settings, if any
 * @property {GenesysBotConnector} [genesysBotConnector] - Provider specific settings, if any
 * @property {NuanceMixDlgSettings} [nuanceMixDlg] - Provider specific settings, if any
 */
 
/**
 * Channel information relevant to a bot flow.
 * @typedef {object} TextBotChannel
 * @property {string} name - The name of the channel.
 * @property {string[]} inputModes - The input modes for the channel.
 * @property {string[]} outputModes - The output modes for the channel.
 * @property {TextBotUserAgent} userAgent - Information about the end user agent calling the bot flow.
 */
 
/**
 * Settings for an input event to the bot flow indicating an error has occurred.
 * @typedef {object} TextBotErrorInputEvent
 * @property {string} code - The error code.
 * @property {string} message - The error message.
 */
 
/**
 * Description of the Bot Flow.
 * @typedef {object} TextBotFlow
 * @property {string} id - The Bot Flow ID.
 */
 
/**
 * Settings for launching an instance of a bot flow.
 * @typedef {object} TextBotFlowLaunchRequest
 * @property {TextBotFlow} flow - Specifies which Bot Flow to launch.
 * @property {string} externalSessionId - The ID of the external session that is associated with the bot flow.
 * @property {string} [conversationId] - A conversation ID to associate with the bot flow, if available.
 * @property {TextBotInputOutputData} [inputData] - Input values to the flow. Valid values are defined by the flow's input JSON schema.
 * @property {TextBotChannel} channel - Channel information relevant to the bot flow.
 * @property {string} [language] - The language that the bot will use in the session. Validated against list of supported languages and if the value is omitted or is invalid, the default language will be used.
 */
 
/**
 * Settings for a turn request to a bot flow.
 * @typedef {object} TextBotFlowTurnRequest
 * @property {TextBotTurnReference} [previousTurn] - The reference to a previous turn if appropriate, used to avoid race conditions.
 * @property {string} inputEventType - Indicates the type of input event being requested. If appropriate, fill out the matching user input object details on this request.
 * @property {TextBotUserInputEvent} [inputEventUserInput] - The data for the input event of this turn if it is a user input event. Only one inputEvent may be set.
 * @property {TextBotErrorInputEvent} [inputEventError] - The data for the input event of this turn if it is an error event. Only one inputEvent may be set.
 */
 
/**
 * Input/Output data related to a bot flow which is exiting gracefully.
 * @typedef {object} TextBotInputOutputData
 * @property {object} variables - The input/output variables using the format as appropriate for the variable data type in the flow definition.
 */
 
/**
 * Data for a single bot flow transcript.
 * @typedef {object} TextBotTranscript
 * @property {string} text - The text of the transcript item.
 * @property {number} [confidence] - The confidence factor, expressed as a decimal between 0.0 and 1.0, of the transcript item.
 */
 
/**
 * A reference to a bot flow turn.
 * @typedef {object} TextBotTurnReference
 * @property {string} id - The id of the turn.
 */
 
/**
 * Information about the caller executing a bot flow.
 * @typedef {object} TextBotUserAgent
 * @property {string} name - The name of the user agent.
 */
 
/**
 * User input data used in a bot flow turn.
 * @typedef {object} TextBotUserInputAlternative
 * @property {TextBotTranscript} transcript - The user input transcript.
 */
 
/**
 * Settings for an input event to the bot flow indicating user input is available.
 * @typedef {object} TextBotUserInputEvent
 * @property {string} mode - The input mode.
 * @property {TextBotUserInputAlternative[]} alternatives - The input alternatives.
 */
 

/**
 * Textbots - Chatbot Interactions
 * @class Textbots
 */
class TextbotsAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the Textbots class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Issue a bot flow turn event
	 * @async
	 * @param {string} sessionId - The bot flow session ID, typically obtained from 'POST /api/v2/textbots/botflows/sessions'
	 * @param {TextBotFlowTurnRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/textbots/botflows/sessions/{sessionId}/turns" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTextbotsBotflowsSessionTurns(sessionId, body) {
		const endpointPath = "/api/v2/textbots/botflows/sessions/{sessionId}/turns";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sessionId = sessionId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an execution instance of a bot flow definition.
	 * @async
	 * @param {TextBotFlowLaunchRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/textbots/botflows/sessions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTextbotsBotflowsSessions(body) {
		const endpointPath = "/api/v2/textbots/botflows/sessions";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Send an intent to a bot to start a dialog/interact with it via text
	 * @async
	 * @param {PostTextRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/textbots/bots/execute" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTextbotsBotsExecute(body) {
		const endpointPath = "/api/v2/textbots/bots/execute";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Find bots using the currently configured friendly name or ID.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.botType] -  Bot types
	 * @param {string} [query.botName] -  Bot name
	 * @param {string[]} [query.botId] -  Bot IDs
	 * @param {number} [query.pageSize] -  The maximum results to return
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/textbots/bots/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getTextbotsBotsSearch(query) {
		const endpointPath = "/api/v2/textbots/bots/search";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("botType" in query && this.#checkJSONSchemaType(query["botType"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "botType", "array");
			}
			if ("botName" in query && this.#checkJSONSchemaType(query["botName"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "botName", "string");
			}
			if ("botId" in query && this.#checkJSONSchemaType(query["botId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "botId", "array");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { TextbotsAPI };