/**
 * Web Deployments
 * @module gc-platform-api-web-deployments
 * @documentation https://developer.genesys.cloud/commdigital/digital/webchat/webdeployments-apis
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.284Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} AddressableEntityRef
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * The settings for Agent Video
 * @typedef {object} AgentVideoSettings
 * @property {boolean} [allowCamera] - whether or not agent camera is allowed
 * @property {boolean} [allowScreenShare] - whether or not agent screen share is allowed
 * @property {string} [background] - background for agent
 * @property {BackgroundImageSettings} [backgroundImage] - background image settings for agent
 */
 
/**
 * Settings for authenticated webdeployments.
 * @typedef {object} AuthenticationSettings
 * @property {boolean} enabled - Indicate if these auth is required for this deployment. If, for example, this flag is set to true then webmessaging sessions can not send messages unless the end-user is authenticated.
 * @property {string} integrationId - The integration identifier which contains the auth settings required on the deployment.
 * @property {boolean} [allowSessionUpgrade] - Allow end-users to upgrade an anonymous session to authenticated conversation.
 */
 
/**
 * @typedef {object} AutoStart
 * @property {boolean} [enabled] - whether or not auto start is enabled
 */
 
/**
 * The settings to Agent Video background image
 * @typedef {object} BackgroundImageSettings
 * @property {string} [url] - BackgroundImage URL for agent video settings
 */
 
/**
 * @typedef {object} Biography
 * @property {string} [biography] - Personal detailed description
 * @property {string[]} [interests]
 * @property {string[]} [hobbies]
 * @property {string} [spouse]
 * @property {Education[]} [education] - User education details
 */
 
/**
 * @typedef {object} BotMessengerProfile
 * @property {string} [name] - Name of the Bot
 * @property {string} [avatarUrl] - Avatar for Bot
 */
 
/**
 * @typedef {object} Chat
 * @property {string} [jabberId]
 */
 
/**
 * Settings concerning cobrowse
 * @typedef {object} CobrowseSettings
 * @property {boolean} [enabled] - Whether or not cobrowse is enabled
 * @property {boolean} [allowAgentControl] - Whether the viewer should have option to request control
 * @property {boolean} [allowAgentNavigation] - Whether the viewer should have option to request navigation
 * @property {boolean} [allowDraw] - Should cobrowse draw be enabled
 * @property {string[]} [maskSelectors] - Mask patterns that will apply to pages being shared
 * @property {string[]} [channels] - Cobrowse channels for web messenger
 * @property {string[]} [readonlySelectors] - Readonly patterns that will apply to pages being shared
 * @property {PauseCriteria[]} [pauseCriteria] - Pause criteria that will pause cobrowse if some of them are met in the user's URL
 */
 
/**
 * @typedef {object} Contact
 * @property {string} [address] - Email address or phone number for this contact type
 * @property {string} [display] - Formatted version of the address property
 * @property {string} [mediaType]
 * @property {string} [type]
 * @property {string} [extension] - Use internal extension instead of address. Mutually exclusive with the address field.
 * @property {string} [countryCode]
 * @property {string} [integration] - Integration tag value if this number is associated with an external integration.
 */
 
/**
 * Conversation settings that handles chats within the messenger
 * @typedef {object} ConversationAppSettings
 * @property {boolean} [enabled] - The toggle to enable or disable conversations
 * @property {boolean} [showAgentTypingIndicator] - The toggle to enable or disable typing indicator for messenger
 * @property {boolean} [showUserTypingIndicator] - The toggle to enable or disable typing indicator for messenger
 * @property {AutoStart} [autoStart] - The auto start for the messenger conversation
 * @property {Markdown} [markdown] - The markdown for the messenger app
 * @property {ConversationDisconnectSettings} [conversationDisconnect] - The conversation disconnect settings for the messenger app
 * @property {ConversationClearSettings} [conversationClear] - The conversation clear settings for the messenger app
 * @property {Humanize} [humanize] - The humanize conversations settings for the messenger app
 * @property {NotificationsSettings} [notifications] - The notification settings for messenger apps
 */
 
/**
 * @typedef {object} ConversationClearSettings
 * @property {boolean} [enabled] - whether or not conversation clear setting is enabled
 */
 
/**
 * @typedef {object} ConversationDisconnectSettings
 * @property {boolean} [enabled] - whether or not conversation disconnect setting is enabled
 * @property {string} [type] - Conversation disconnect type
 */
 
/**
 * The localization settings for homescreen
 * @typedef {object} CustomI18nLabels
 * @property {string} [language] - Language of localized labels in homescreen app (eg. en-us, de-de)
 * @property {LocalizedLabels[]} [localizedLabels] - Contains localized labels used in homescreen app
 */
 
/**
 * @typedef {object} Division
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} DomainEntityRef
 * @property {string} [id]
 * @property {string} [name]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} DomainRole
 * @property {string} [id] - The ID of the role
 * @property {string} [name] - The name of the role
 */
 
/**
 * @typedef {object} Education
 * @property {string} [school]
 * @property {string} [fieldOfStudy]
 * @property {string} [notes] - Notes about education has a 2000 character limit
 * @property {string} [dateStart] - Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [dateEnd] - Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} EmployerInfo
 * @property {string} [officialName]
 * @property {string} [employeeId]
 * @property {string} [employeeType]
 * @property {string} [dateHire]
 */
 
/**
 * @typedef {object} FileUploadMode
 * @property {string[]} [fileTypes] - A list of supported content types for uploading files.
 * @property {number} [maxFileSizeKB] - The maximum file size for file uploads in kilobytes. Default is 10240 (10 MB)
 */
 
/**
 * File upload settings for messenger
 * @typedef {object} FileUploadSettings
 * @property {boolean} [enableAttachments] - whether or not attachments are enabled
 * @property {FileUploadMode[]} [modes] - The list of supported file upload modes
 */
 
/**
 * @typedef {object} FlowVersion
 * @property {string} [id] - The flow version identifier
 * @property {string} [name]
 * @property {string} [commitVersion]
 * @property {string} [configurationVersion]
 * @property {string} [type]
 * @property {boolean} [secure]
 * @property {boolean} [debug]
 * @property {User} [createdBy]
 * @property {DomainEntityRef} [createdByClient]
 * @property {string} [configurationUri]
 * @property {number} [dateCreated]
 * @property {number} [dateCheckedIn]
 * @property {number} [dateSaved]
 * @property {string} [generationId]
 * @property {string} [publishResultUri]
 * @property {JsonSchemaDocument} [inputSchema]
 * @property {JsonSchemaDocument} [outputSchema]
 * @property {boolean} [virtualAgentEnabled]
 * @property {string} [datePublished] - The date this version became the published version of the flow. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [datePublishedEnd] - The date this version was no longer the published version of the flow. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {NluInfo} [nluInfo] - Information about the natural language understanding configuration for the flow version
 * @property {SupportedLanguage[]} [supportedLanguages] - List of supported languages for this version of the flow
 * @property {string[]} [compatibleFlowTypes] - Compatible flow types designate which flow types are allowed to embed a flowâ€™s configuration within their own flow configuration.  Currently the only flows that can be embedded are Common Module flows and the embedding flow can invoke them using the Call Common Module action.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Details about a forms tracking event trigger
 * @typedef {object} FormsTrackTrigger
 * @property {string} selector - Form element that triggers the form submitted or abandoned event.
 * @property {string} formName - Prefix for the form submitted or abandoned event name.
 * @property {boolean} captureDataOnFormAbandon - Whether to capture the form data in the form abandoned event.
 * @property {boolean} captureDataOnFormSubmit - Whether to capture the form data in the form submitted event.
 */
 
/**
 * @typedef {object} Geolocation
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [type] - A string used to describe the type of client the geolocation is being updated from e.g. ios, android, web, etc.
 * @property {boolean} [primary] - A boolean used to tell whether or not to set this geolocation client as the primary on a PATCH
 * @property {number} [latitude]
 * @property {number} [longitude]
 * @property {string} [country]
 * @property {string} [region]
 * @property {string} [city]
 * @property {LocationDefinition[]} [locations]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Group
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The group name.
 * @property {string} [description]
 * @property {string} [dateModified] - Last modified date/time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [memberCount] - Number of members.
 * @property {string} [state] - Active, inactive, or deleted state.
 * @property {number} [version] - Current version for this resource.
 * @property {string} type - Type of group.
 * @property {Image[]} [images]
 * @property {GroupContact[]} [addresses]
 * @property {boolean} rulesVisible - Are membership rules visible to the person requesting to view the group
 * @property {string} visibility - Who can view this group
 * @property {boolean} [rolesEnabled] - Allow roles to be assigned to this group
 * @property {boolean} [includeOwners] - Allow owners to be included as members of the group
 * @property {boolean} [callsEnabled] - Allow calls to be placed to this group.
 * @property {User[]} [owners] - Owners of the group
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} GroupContact
 * @property {string} address - Phone number for this contact type
 * @property {string} [extension] - Extension is set if the number is e164 valid
 * @property {string} [display] - Formatted version of the address property
 * @property {string} type - Contact type of the address
 * @property {string} mediaType - Media type of the address
 */
 
/**
 * @typedef {object} Humanize
 * @property {boolean} [enabled] - Whether or not humanize conversations setting is enabled
 * @property {BotMessengerProfile} [bot] - Bot messenger profile setting
 */
 
/**
 * Details about an idle event trigger
 * @typedef {object} IdleEventTrigger
 * @property {string} eventName - Name of event triggered after period of inactivity.
 * @property {number} [idleAfterSeconds] - Number of seconds of inactivity before an event is triggered.
 */
 
/**
 * @typedef {object} Image
 * @property {string} [resolution] - Height and/or width of image. ex: 640x480 or x128
 * @property {string} [imageUri]
 */
 
/**
 * @typedef {object} Intent
 * @property {string} [name]
 * @property {string} [description]
 */
 
/**
 * @typedef {object} IntentDefinition
 * @property {string} [id] - ID of the intent.
 * @property {string} name - The name of the intent.
 * @property {string} [description] - The description of the intent.
 * @property {NamedEntityTypeBinding[]} [entityTypeBindings] - The bindings for the named entity types used in this intent.This field is mutually exclusive with entityNameReferences and entities
 * @property {string[]} [entityNameReferences] - The references for the named entity used in this intent.This field is mutually exclusive with entityTypeBindings
 * @property {NluUtterance[]} utterances - The utterances that act as training phrases for the intent.
 * @property {object} [additionalLanguages] - Additional languages for intents
 */
 
/**
 * @typedef {object} JourneyAction
 * @property {string} id - The ID of an action from the Journey System (an action is spawned from an actionMap)
 * @property {JourneyActionMap} actionMap - Details about the action map from the Journey System which triggered this action
 */
 
/**
 * @typedef {object} JourneyActionMap
 * @property {string} id - The ID of the actionMap in the Journey System which triggered this action
 * @property {number} version - The version number of the actionMap in the Journey System at the time this action was triggered
 */
 
/**
 * @typedef {object} JourneyCustomer
 * @property {string} id - An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable.
 * @property {string} idType - The type of the customerId within the Journey System (e.g. cookie).
 */
 
/**
 * @typedef {object} JourneyCustomerSession
 * @property {string} id - An ID of a Customer/User's session within the Journey System at a point-in-time
 * @property {string} type - The type of the Customer/User's session within the Journey System (e.g. web, app)
 */
 
/**
 * Settings concerning journey events
 * @typedef {object} JourneyEventsSettings
 * @property {boolean} [enabled] - Whether or not journey event collection is enabled.
 * @property {string[]} [excludedQueryParameters] - List of parameters to be excluded from the query string.
 * @property {boolean} [shouldKeepUrlFragment] - Whether or not to keep the URL fragment.
 * @property {string[]} [searchQueryParameters] - List of query parameters used for search (e.g. 'q').
 * @property {string} [pageviewConfig] - Controls how the pageview events are tracked.
 * @property {SelectorEventTrigger[]} [clickEvents] - Tracks when and where a visitor clicks on a webpage.
 * @property {FormsTrackTrigger[]} [formsTrackEvents] - Controls how the form submitted and form abandoned events are tracked after a visitor interacts with a form element.
 * @property {IdleEventTrigger[]} [idleEvents] - Tracks when and where a visitor becomes inactive on a webpage.
 * @property {SelectorEventTrigger[]} [inViewportEvents] - Tracks when elements become visible or hidden on screen.
 * @property {ScrollPercentageEventTrigger[]} [scrollDepthEvents] - Tracks when a visitor scrolls to a specific percentage of a webpage.
 */
 
/**
 * A JSON Schema document.
 * @typedef {object} JsonSchemaDocument
 * @property {string} [id]
 * @property {string} [$schema]
 * @property {string} [title]
 * @property {string} [description]
 * @property {string} [type]
 * @property {string[]} [required]
 * @property {object} [properties]
 * @property {object} [additionalProperties]
 */
 
/**
 * @typedef {object} Knowledge
 * @property {boolean} [enabled] - whether or not knowledge base is enabled
 * @property {AddressableEntityRef} [knowledgeBase] - The knowledge base for messenger
 */
 
/**
 * The settings for the launcher button
 * @typedef {object} LauncherButtonSettings
 * @property {string} [visibility] - The visibility settings for the button
 */
 
/**
 * Contains localized labels used in messenger apps
 * @typedef {object} LocalizedLabels
 * @property {string} [key] - Contains localized label key used in messenger homescreen
 * @property {string} [value] - Contains localized label value used in messenger homescreen
 */
 
/**
 * @typedef {object} Location
 * @property {string} [id] - Unique identifier for the location
 * @property {string} [floorplanId] - Unique identifier for the location floorplan image
 * @property {object} [coordinates] - Users coordinates on the floorplan. Only used when floorplanImage is set
 * @property {string} [notes] - Optional description on the users location
 * @property {LocationDefinition} [locationDefinition]
 */
 
/**
 * @typedef {object} LocationAddress
 * @property {string} [city]
 * @property {string} [country]
 * @property {string} [countryName]
 * @property {string} [state]
 * @property {string} [street1]
 * @property {string} [street2]
 * @property {string} [zipcode]
 */
 
/**
 * @typedef {object} LocationAddressVerificationDetails
 * @property {string} [status] - Status of address verification process
 * @property {string} [dateFinished] - Finished time of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateStarted] - Time started of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [service] - Third party service used for address verification
 */
 
/**
 * @typedef {object} LocationDefinition
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {AddressableEntityRef} [contactUser] - Site contact for the location entity
 * @property {LocationEmergencyNumber} [emergencyNumber] - Emergency number for the location entity
 * @property {LocationAddress} [address]
 * @property {string} [state] - Current state of the location entity
 * @property {string} [notes] - Notes for the location entity
 * @property {number} [version] - Current version of the location entity, value to be supplied should be retrieved by a GET or on create/update response
 * @property {string[]} [path] - A list of ancestor IDs in order
 * @property {LocationImage[]} [profileImage] - Profile image of the location entity, retrieved with ?expand=images query parameter
 * @property {LocationImage[]} [floorplanImage] - Floorplan images of the location entity, retrieved with ?expand=images query parameter
 * @property {LocationAddressVerificationDetails} [addressVerificationDetails] - Address verification information, retrieve dwith the ?expand=addressVerificationDetails query parameter
 * @property {boolean} [addressVerified] - Boolean field which states if the address has been verified as an actual address
 * @property {boolean} [addressStored] - Boolean field which states if the address has been stored for E911
 * @property {string} [images]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} LocationEmergencyNumber
 * @property {string} [e164]
 * @property {string} [number]
 * @property {string} [type] - The type of emergency number.
 */
 
/**
 * @typedef {object} LocationImage
 * @property {string} [resolution] - Height and/or width of image. ex: 640x480 or x128
 * @property {string} [imageUri]
 */
 
/**
 * @typedef {object} Markdown
 * @property {boolean} [enabled] - whether or not markdown is enabled
 */
 
/**
 * @typedef {object} MediaSummary
 * @property {MediaSummaryDetail} [contactCenter]
 * @property {MediaSummaryDetail} [enterprise]
 */
 
/**
 * @typedef {object} MediaSummaryDetail
 * @property {number} [active]
 * @property {number} [acw]
 */
 
/**
 * Media type definition
 * @typedef {object} MediaType
 * @property {string} [type] - The media type string as defined by RFC 2046. You can define specific types such as 'image/jpeg', 'video/mpeg', or specify wild cards for a range of types, 'image/*', or all types '* /*'. See https://www.iana.org/assignments/media-types/media-types.xhtml for a list of registered media types.
 */
 
/**
 * Media type access definitions
 * @typedef {object} MediaTypeAccess
 * @property {MediaType[]} [inbound] - List of media types allowed for inbound messages from customers. If inbound messages from a customer contain media that is not in this list, the media will be dropped from the outbound message.
 * @property {MediaType[]} [outbound] - List of media types allowed for outbound messages to customers. If an outbound message is sent that contains media that is not in this list, the message will not be sent.
 */
 
/**
 * Media types
 * @typedef {object} MediaTypes
 * @property {MediaTypeAccess} [allow] - Specify allowed media types for inbound and outbound messages. If this field is empty, all inbound and outbound media will be blocked.
 */
 
/**
 * The apps embedded in the messenger
 * @typedef {object} MessengerApps
 * @property {ConversationAppSettings} [conversations] - The conversation settings that handles chats within the messenger
 * @property {Knowledge} [knowledge] - The knowledge base config for messenger
 */
 
/**
 * @typedef {object} MessengerHomeScreen
 * @property {boolean} [enabled] - whether or not homescreen is enabled
 * @property {string} [logoUrl] - to capture uploaded company logoUrl
 */
 
/**
 * Settings concerning messenger
 * @typedef {object} MessengerSettings
 * @property {boolean} [enabled] - Whether or not messenger is enabled
 * @property {MessengerStyles} [styles] - The style settings for messenger
 * @property {LauncherButtonSettings} [launcherButton] - The launcher button settings for messenger
 * @property {FileUploadSettings} [fileUpload] - The file upload settings for messenger
 * @property {MessengerApps} [apps] - The apps embedded in the messenger
 * @property {MessengerHomeScreen} [homeScreen] - The homescreen settings for messenger
 * @property {string} [sessionPersistenceType] - The session persistence type for messenger
 */
 
/**
 * @typedef {object} MessengerStyles
 * @property {string} [primaryColor] - The primary color of messenger in hexadecimal
 */
 
/**
 * @typedef {object} NamedEntityAnnotation
 * @property {string} name - The name of the annotated named entity.
 */
 
/**
 * @typedef {object} NamedEntityDefinition
 * @property {string} name - The name of the entity.
 * @property {string} type - The name of the entity type.
 */
 
/**
 * @typedef {object} NamedEntityTypeBinding
 * @property {string} entityType - The named entity type of the binding. It can be a built-in one such as builtin:number or a custom entity type such as BeverageType.
 * @property {string} entityName - The name that this named entity type is bound to.
 */
 
/**
 * @typedef {object} NamedEntityTypeDefinition
 * @property {string} name - The name of the entity type.
 * @property {string} [description] - Description of the of the named entity type.
 * @property {NamedEntityTypeMechanism} mechanism - The mechanism enabling detection of the named entity type.
 */
 
/**
 * @typedef {object} NamedEntityTypeItem
 * @property {string} value - A value for an named entity type definition.
 * @property {string[]} [synonyms] - Synonyms for the given named entity value.
 * @property {object} [additionalLanguages] - Additional Language Synonyms for the given named entity value.
 */
 
/**
 * @typedef {object} NamedEntityTypeMechanism
 * @property {NamedEntityTypeItem[]} items - The items that define the named entity type.
 * @property {boolean} [restricted] - Whether the named entity type is restricted to the items provided. Default: false
 * @property {string} type - The type of the mechanism.
 * @property {string} [subType] - Subtype of detection mechanism
 * @property {number} [maxLength] - The maximum length of the entity resolved value
 * @property {number} [minLength] - The minimum length of the entity resolved value
 * @property {NamedEntityTypeMechanismExample[]} [examples] - Examples for entity detection
 */
 
/**
 * @typedef {object} NamedEntityTypeMechanismExample
 * @property {string} text - Example input text
 * @property {string} resolvedValue - Resolved entity value
 */
 
/**
 * @typedef {object} NluDomain
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the NLU domain.
 * @property {string} [language] - The language culture of the NLU domain, e.g. `en-us`, `de-de`.
 * @property {NluDomainVersion} [draftVersion] - The draft version of that NLU domain.
 * @property {NluDomainVersion} [lastPublishedVersion] - The last published version of that NLU domain.
 * @property {string} [dateCreated] - The date when the NLU domain was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - The date when the NLU domain was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [engineVersion] - The version of the NLU engine to use.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} NluDomainVersion
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {NluDomain} [domain] - The NLU domain of the version.
 * @property {string} [description] - The description of the NLU domain version.
 * @property {string} language - The language that the NLU domain version supports.
 * @property {boolean} [published] - Whether this NLU domain version has been published.
 * @property {string} [dateCreated] - The date when the NLU domain version was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - The date when the NLU domain version was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateTrained] - The date when the NLU domain version was trained. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [datePublished] - The date when the NLU domain version was published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [trainingStatus] - The training status of the NLU domain version.
 * @property {string} [evaluationStatus] - The evaluation status of the NLU domain version.
 * @property {IntentDefinition[]} [intents] - The intents defined for this NLU domain version.
 * @property {NamedEntityTypeDefinition[]} [entityTypes] - The entity types defined for this NLU domain version.
 * @property {NamedEntityDefinition[]} [entities] - The entities defined for this NLU domain version.This field is mutually exclusive with entityTypeBindings
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} NluInfo
 * @property {AddressableEntityRef} [domain]
 * @property {NluDomainVersion} [version]
 * @property {Intent[]} [intents]
 * @property {string} [engineVersion]
 * @property {NluDomainVersion} [nluData]
 */
 
/**
 * @typedef {object} NluUtterance
 * @property {string} [id] - ID of the utterance.
 * @property {string} [source] - The source of the utterance.
 * @property {NluUtteranceSegment[]} segments - The list of segments that that constitute this utterance for the given intent.
 */
 
/**
 * @typedef {object} NluUtteranceSegment
 * @property {string} text - The text of the segment.
 * @property {NamedEntityAnnotation} [entity] - The entity annotation of the segment.
 */
 
/**
 * Notification settings that handles messenger notifications
 * @typedef {object} NotificationsSettings
 * @property {boolean} [enabled] - The toggle to enable or disable notifications
 */
 
/**
 * @typedef {object} OAuthLastTokenIssued
 * @property {string} [dateIssued] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} OutOfOffice
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {User} [user]
 * @property {string} [startDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {boolean} [active]
 * @property {boolean} [indefinite]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} PauseCriteria
 * @property {string} [urlFragment]
 * @property {string} [condition]
 */
 
/**
 * Settings concerning position
 * @typedef {object} PositionSettings
 * @property {string} [alignment] - The alignment for position
 * @property {number} [sideSpace] - The sidespace value for position
 * @property {number} [bottomSpace] - The bottomspace value for position
 */
 
/**
 * @typedef {object} PresenceDefinition
 * @property {string} [id] - description
 * @property {string} [systemPresence]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ResourceConditionNode
 * @property {string} [variableName]
 * @property {string} [conjunction]
 * @property {string} [operator]
 * @property {ResourceConditionValue[]} [operands]
 * @property {ResourceConditionNode[]} [terms]
 */
 
/**
 * @typedef {object} ResourceConditionValue
 * @property {string} [type]
 * @property {string} [value]
 */
 
/**
 * @typedef {object} ResourcePermissionPolicy
 * @property {string} [id]
 * @property {string} [domain]
 * @property {string} [entityName]
 * @property {string} [policyName]
 * @property {string} [policyDescription]
 * @property {string} [actionSetKey]
 * @property {boolean} [allowConditions]
 * @property {ResourceConditionNode} [resourceConditionNode]
 * @property {string[]} [namedResources]
 * @property {string} [resourceCondition]
 * @property {string[]} [actionSet]
 */
 
/**
 * @typedef {object} RoutingStatus
 * @property {string} [userId] - The userId of the agent
 * @property {string} [status] - Indicates the Routing State of the agent.  A value of OFF_QUEUE will be returned if the specified user does not exist.
 * @property {string} [startTime] - The timestamp when the agent went into this state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * Details about a scroll percentage event trigger
 * @typedef {object} ScrollPercentageEventTrigger
 * @property {number} percentage - Percentage of a webpage at which an event is triggered.
 * @property {string} eventName - Name of event triggered after scrolling to the specified percentage.
 */
 
/**
 * Details about a selector event trigger
 * @typedef {object} SelectorEventTrigger
 * @property {string} selector - Element that triggers event.
 * @property {string} eventName - Name of event triggered when element matching selector is interacted with.
 */
 
/**
 * @typedef {object} SupportCenterCategory
 * @property {string} [id]
 * @property {string} [selfUri]
 * @property {SupportCenterImage} [image] - Image attributes for a featured category
 */
 
/**
 * @typedef {object} SupportCenterCompactCategoryModuleTemplate
 * @property {boolean} active - Whether this template is active or not
 */
 
/**
 * @typedef {object} SupportCenterCustomMessage
 * @property {string} defaultValue - Default value for the message
 * @property {string} type - Type of the message
 */
 
/**
 * @typedef {object} SupportCenterDetailedCategoryModuleSidebar
 * @property {boolean} enabled - Whether sidebar is enabled or not
 */
 
/**
 * @typedef {object} SupportCenterDetailedCategoryModuleTemplate
 * @property {boolean} active - Whether this template is active or not
 * @property {SupportCenterDetailedCategoryModuleSidebar} sidebar - Sidebar settings for the template
 */
 
/**
 * @typedef {object} SupportCenterFeedbackSettings
 * @property {boolean} enabled - Whether or not requesting customer feedback on article content and article search results is enabled
 */
 
/**
 * @typedef {object} SupportCenterGlobalStyle
 * @property {string} backgroundColor - Global background color, in hexadecimal format, eg #ffffff
 * @property {string} primaryColor - Global primary color, in hexadecimal format, eg #ffffff
 * @property {string} primaryColorDark - Global dark primary color, in hexadecimal format, eg #ffffff
 * @property {string} primaryColorLight - Global light primary color, in hexadecimal format, eg #ffffff
 * @property {string} textColor - Global text color, in hexadecimal format, eg #ffffff
 * @property {string} fontFamily - Global font family
 */
 
/**
 * @typedef {object} SupportCenterHeroStyle
 * @property {string} backgroundColor - Background color for hero section, in hexadecimal format, eg #ffffff
 * @property {string} textColor - Text color for hero section, in hexadecimal format, eg #ffffff
 * @property {SupportCenterImage} [image] - Background image for hero section
 */
 
/**
 * @typedef {object} SupportCenterImage
 * @property {SupportCenterImageSource} source - Source URLs for image
 */
 
/**
 * @typedef {object} SupportCenterImageSource
 * @property {string} defaultUrl - Default URL for image
 */
 
/**
 * @typedef {object} SupportCenterLabelFilter
 * @property {AddressableEntityRef[]} [labels] - Labels to filter by.
 */
 
/**
 * @typedef {object} SupportCenterModuleSetting
 * @property {string} type - Screen module type
 * @property {boolean} enabled - Whether or not knowledge portal (previously support center) screen module is enabled
 * @property {SupportCenterCompactCategoryModuleTemplate} [compactCategoryModuleTemplate] - Compact category module template
 * @property {SupportCenterDetailedCategoryModuleTemplate} [detailedCategoryModuleTemplate] - Detailed category module template
 */
 
/**
 * @typedef {object} SupportCenterScreen
 * @property {string} type - The type of the screen
 * @property {SupportCenterModuleSetting[]} moduleSettings - Module settings for the screen, valid modules for each screenType: Home: Search, Categories, TopViewedArticles; Category: Search, Categories; SearchResults: Search, Results; Article: Search, Article;
 */
 
/**
 * Settings concerning knowledge portal (previously support center)
 * @typedef {object} SupportCenterSettings
 * @property {boolean} enabled - Whether or not knowledge portal (previously support center) is enabled
 * @property {AddressableEntityRef} knowledgeBase - The knowledge base for knowledge portal (previously support center)
 * @property {SupportCenterCustomMessage[]} [customMessages] - Customizable display texts for knowledge portal (previously support center)
 * @property {string} [routerType] - Router type for knowledge portal (previously support center)
 * @property {SupportCenterScreen[]} screens - Available screens for the knowledge portal (previously support center) with its modules
 * @property {SupportCenterCategory[]} enabledCategories - Featured categories for knowledge portal (previously support center) home screen
 * @property {SupportCenterLabelFilter} [labelFilter] - Document label filter. If set, only documents having at least one of the specified labels will be returned by knowledge document query operations.
 * @property {SupportCenterStyleSetting} styleSetting - Style attributes for knowledge portal (previously support center)
 * @property {SupportCenterFeedbackSettings} [feedback] - Customer feedback settings
 */
 
/**
 * @typedef {object} SupportCenterStyleSetting
 * @property {SupportCenterHeroStyle} heroStyle - Knowledge portal (previously support center) hero customizations
 * @property {SupportCenterGlobalStyle} globalStyle - Knowledge portal (previously support center) global customizations
 */
 
/**
 * Reference to supported content profile associated with the integration
 * @typedef {object} SupportedContentReference
 * @property {string} id - The SupportedContent unique identifier associated with this integration
 * @property {string} [name] - The SupportedContent profile name
 * @property {string} [selfUri] - The SupportedContent profile URI
 * @property {MediaTypes} [mediaTypes] - Media types definition for the supported content
 */
 
/**
 * @typedef {object} SupportedLanguage
 * @property {string} [language] - Architect supported language tag, e.g. en-us, es-us
 * @property {boolean} [isDefault] - Whether or not this language is the default language
 */
 
/**
 * @typedef {object} Team
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The team name
 * @property {WritableDivision} [division] - The division to which this entity belongs.
 * @property {string} [description] - Team information.
 * @property {string} [dateCreated] - Last modified datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [memberCount] - Number of members in a team
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} User
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {Division} [division] - The division to which this entity belongs.
 * @property {Chat} [chat]
 * @property {string} [department]
 * @property {string} [email]
 * @property {Contact[]} [primaryContactInfo] - Auto populated from addresses.
 * @property {Contact[]} [addresses] - Email addresses and phone numbers for this user
 * @property {string} [state] - The current state for this user.
 * @property {string} [title]
 * @property {string} [username]
 * @property {User} [manager]
 * @property {Image[]} [images]
 * @property {number} version - Required when updating a user, this value should be the current version of the user.  The current version can be obtained with a GET on the user before doing a PATCH.
 * @property {string[]} [certifications]
 * @property {Biography} [biography]
 * @property {EmployerInfo} [employerInfo]
 * @property {string} [preferredName] - Preferred full name of the agent
 * @property {RoutingStatus} [routingStatus] - ACD routing status
 * @property {UserPresence} [presence] - Active presence
 * @property {UserPresence} [integrationPresence] - Integration presence
 * @property {UserConversationSummary} [conversationSummary] - Summary of conversion statistics for conversation types.
 * @property {OutOfOffice} [outOfOffice] - Determine if out of office is enabled
 * @property {Geolocation} [geolocation] - Current geolocation position
 * @property {UserStations} [station] - Effective, default, and last station information
 * @property {UserAuthorization} [authorization] - Roles and permissions assigned to the user
 * @property {string[]} [profileSkills] - Profile skills possessed by the user
 * @property {Location[]} [locations] - The user placement at each site location.
 * @property {Group[]} [groups] - The groups the user is a member of
 * @property {Team} [team] - The team the user is a member of
 * @property {WorkPlanBidRanks} [workPlanBidRanks] - The WFM work plan bid rank settings for the user
 * @property {UserRoutingSkill[]} [skills] - Routing (ACD) skills possessed by the user
 * @property {UserRoutingLanguage[]} [languages] - Routing (ACD) languages possessed by the user
 * @property {boolean} [acdAutoAnswer] - acd auto answer
 * @property {string} [languagePreference] - preferred language by the user
 * @property {OAuthLastTokenIssued} [lastTokenIssued]
 * @property {string} [dateLastLogin] - The last time the user logged in using username and password. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateWelcomeSent] - The date & time the user was sent their welcome email. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} UserAuthorization
 * @property {DomainRole[]} [roles]
 * @property {DomainRole[]} [unusedRoles] - A collection of the roles the user is not using
 * @property {string[]} [permissions] - A collection of the permissions granted by all assigned roles
 * @property {ResourcePermissionPolicy[]} [permissionPolicies] - The policies configured for assigned permissions.
 */
 
/**
 * @typedef {object} UserConversationSummary
 * @property {string} [userId]
 * @property {MediaSummary} [call]
 * @property {MediaSummary} [callback]
 * @property {MediaSummary} [email]
 * @property {MediaSummary} [message]
 * @property {MediaSummary} [chat]
 * @property {MediaSummary} [socialExpression]
 * @property {MediaSummary} [video]
 */
 
/**
 * @typedef {object} UserPresence
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [source] - Deprecated - The sourceID field should be used as a replacement.
 * @property {string} [sourceId] - Represents the ID of a registered source
 * @property {boolean} [primary] - A boolean used to tell whether or not to set this presence source as the primary on a PATCH
 * @property {PresenceDefinition} [presenceDefinition]
 * @property {string} [message]
 * @property {string} [modifiedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Represents an organization language assigned to a user. When assigning to a user specify the organization language id as the id.
 * @typedef {object} UserRoutingLanguage
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {number} [proficiency] - A rating from 0.0 to 5.0 that indicates how fluent an agent is in a particular language. ACD interactions are routed to agents with higher proficiency ratings.
 * @property {string} [state] - Activate or deactivate this routing language.
 * @property {string} [languageUri] - URI to the organization language used by this user language.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Represents an organization skill assigned to a user. When assigning to a user specify the organization skill id as the id.
 * @typedef {object} UserRoutingSkill
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {number} [proficiency] - A rating from 0.0 to 5.0 that indicates how adept an agent is at a particular skill. When "Best available skills" is enabled for a queue in Genesys Cloud, ACD interactions in that queue are routed to agents with higher proficiency ratings.
 * @property {string} [state] - Activate or deactivate this routing skill.
 * @property {string} [skillUri] - URI to the organization skill used by this user skill.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} UserStation
 * @property {string} [id] - A globally unique identifier for this station
 * @property {string} [name]
 * @property {string} [type]
 * @property {User} [associatedUser]
 * @property {string} [associatedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {User} [defaultUser]
 * @property {object} [providerInfo] - Provider-specific info for this station, e.g. { "edgeGroupId": "ffe7b15c-a9cc-4f4c-88f5-781327819a49" }
 * @property {number} [webRtcCallAppearances] - The number of call appearances on the station.
 */
 
/**
 * @typedef {object} UserStations
 * @property {UserStation} [associatedStation] - Current associated station for this user.
 * @property {UserStation} [effectiveStation] - The station where the user can be reached based on their default and associated station.
 * @property {UserStation} [defaultStation] - Default station to be used if not associated with a station.
 * @property {UserStation} [lastAssociatedStation] - Last associated station for this user.
 */
 
/**
 * The settings for User Video
 * @typedef {object} UserVideoSettings
 * @property {boolean} [allowCamera] - whether or not user camera is allowed
 * @property {boolean} [allowScreenShare] - whether or not user screen share is allowed
 */
 
/**
 * The settings to enable video chat
 * @typedef {object} VideoSettings
 * @property {boolean} [enabled] - whether or not video is enabled
 * @property {AgentVideoSettings} [agent] - Video Settings for agent
 * @property {UserVideoSettings} [user] - Video Settings for user
 */
 
/**
 * Details about a Web Deployment
 * @typedef {object} WebDeployment
 * @property {string} [id] - The deployment ID
 * @property {string} name - The deployment name
 * @property {string} [description] - The description of the config
 * @property {boolean} [allowAllDomains] - Property indicates whether all domains are allowed or not. allowedDomains must be empty when this is set as true.
 * @property {string[]} [allowedDomains] - The list of domains that are approved to use this deployment; the list will be added to CORS headers for ease of web use.
 * @property {SupportedContentReference} [supportedContent] - The supported content profile for a deployment
 * @property {string} [snippet] - Javascript snippet used to load the config
 * @property {string} [dateCreated] - The date the deployment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - The date the deployment was most recently modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {AddressableEntityRef} [lastModifiedUser] - A reference to the user who most recently modified the deployment
 * @property {WebDeploymentFlowEntityRef} [flow] - A reference to the inboundshortmessage flow used by this deployment
 * @property {string} [status] - The current status of the deployment
 * @property {WebDeploymentConfigurationVersionEntityRef} configuration - The config version this deployment uses
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Details about the configuration version of a Web Deployment
 * @typedef {object} WebDeploymentConfigurationVersion
 * @property {string} [id] - The configuration version ID
 * @property {string} name - The configuration version name
 * @property {string} [version] - The version of the configuration
 * @property {WebDeploymentHeadlessMode} [headlessMode] - Headless Mode Support which Controls UI components. When enabled, native UI components will be disabled and allows for custom-built UI.
 * @property {string} [description] - The description of the configuration
 * @property {string[]} [languages] - A list of languages supported on the configuration required if the messenger is enabled
 * @property {string} [defaultLanguage] - The default language to use for the configuration required if the messenger is enabled
 * @property {CustomI18nLabels[]} [customI18nLabels] - The localization settings for homescreen app
 * @property {MessengerSettings} [messenger] - The settings for messenger
 * @property {PositionSettings} [position] - The settings for position
 * @property {SupportCenterSettings} [supportCenter] - The settings for knowledge portal (previously support center)
 * @property {CobrowseSettings} [cobrowse] - The settings for cobrowse
 * @property {JourneyEventsSettings} [journeyEvents] - The settings for journey events
 * @property {AuthenticationSettings} [authenticationSettings] - The settings for authenticated deployments
 * @property {VideoSettings} [video] - The settings for video
 * @property {string} [dateCreated] - The date the configuration version was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - The date the configuration version was most recently modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [datePublished] - The date the configuration version was most recently published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {AddressableEntityRef} [lastModifiedUser] - A reference to the user who most recently modified the configuration version
 * @property {AddressableEntityRef} [createdUser] - A reference to the user who created the configuration version
 * @property {AddressableEntityRef} [publishedUser] - A reference to the user who published the configuration version
 * @property {string} [status] - The current status of the configuration version
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WebDeploymentConfigurationVersionEntityRef
 * @property {string} id - The configuration version ID
 * @property {string} [name] - The configuration version name
 * @property {string} [selfUri]
 * @property {string} version - The version of the configuration
 */
 
/**
 * @typedef {object} WebDeploymentFlowEntityRef
 * @property {string} id - The Flow ID
 * @property {string} [name] - The Flow name
 * @property {string} [selfUri]
 * @property {string} [flowDescription] - The flow description for the webdeployment
 * @property {FlowVersion} [publishVersion] - The published config version for the associated deployment
 */
 
/**
 * @typedef {object} WebDeploymentHeadlessMode
 * @property {boolean} [enabled] - Whether or not Headless Mode is enabled
 */
 
/**
 * @typedef {object} WebDeploymentsJourneyContext
 * @property {JourneyAction} [journeyAction] - A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)
 * @property {JourneyCustomer} [customer] - Journey customer information. Used for linking the authenticated customer with the journey. 
 * @property {JourneyCustomerSession} [customerSession] - Contains the Journey System's customer session details.
 */
 
/**
 * @typedef {object} WebDeploymentsOAuthExchangeRequest
 * @property {string} deploymentId - The WebDeployment ID
 * @property {WebDeploymentsJourneyContext} [journeyContext] - A Customer journey context.
 * @property {WebDeploymentsOAuthRequestParameters} [oauth]
 */
 
/**
 * @typedef {object} WebDeploymentsOAuthRequestParameters
 * @property {string} code - The authorization code to be sent to the authentication server during the token request.
 Refer to https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
 * @property {string} redirectUri - Redirect URI sent in the "Authentication Request"Refer to https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
 * @property {string} [nonce] - Required if provided in the "Authentication Request". Otherwise should be empty.String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token. Refer to https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
 * @property {number} [maxAge] - Required if provided in the  "Authentication Request". Otherwise should be empty.Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated.Refer to https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
 * @property {string} [codeVerifier] - Required if authorizing using Proof Key for Code Exchange (PKCE). Otherwise should be empty.Random URL-safe string with a minimum length of 43 characters generated at start of authorization flow to mitigate the threat of having the authorization code intercepted. Refer to https://datatracker.ietf.org/doc/html/rfc7636
 * @property {string} [iss] - Optional parameter. Set it if authorization server discovery metadata authorization_response_iss_parameter_supported is enabled.
Refer to https://datatracker.ietf.org/doc/html/rfc9207
 */
 
/**
 * @typedef {object} WebDeploymentsRefreshJWTRequest
 * @property {string} refreshToken - Refresh token used to issue a new JWT.
 * @property {string} deploymentId - The WebDeployment ID
 */
 
/**
 * @typedef {object} WorkPlanBidRanks
 * @property {string} [id] - The globally unique identifier for the user.
 * @property {number} [workPlanBiddingPerformance] - Work plan bidding agent performance ranking. The range of values is between 0 and 9999.
 * @property {string} [biddingTieBreaker] - Custom agent ranking metric that some customers can use.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WritableDivision
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [selfUri] - The URI for this object
 */
 

/**
 * WebDeployments - Web Deployments
 * @class WebDeployments
 */
class WebDeploymentsAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the WebDeployments class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Retrieves a cobrowse session
	 * @async
	 * @param {string} deploymentId - WebMessaging deployment ID
	 * @param {string} sessionId - Cobrowse session id or join code
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/deployments/{deploymentId}/cobrowse/{sessionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWebdeploymentsDeploymentCobrowseSessionId(deploymentId, sessionId) {
		const endpointPath = "/api/v2/webdeployments/deployments/{deploymentId}/cobrowse/{sessionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.pathParameters.sessionId = sessionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes a cobrowse session
	 * @async
	 * @param {string} deploymentId - WebMessaging deployment ID
	 * @param {string} sessionId - Cobrowse session id or join code
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/deployments/{deploymentId}/cobrowse/{sessionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWebdeploymentsDeploymentCobrowseSessionId(deploymentId, sessionId) {
		const endpointPath = "/api/v2/webdeployments/deployments/{deploymentId}/cobrowse/{sessionId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		if (this.#checkJSONSchemaType(sessionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sessionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.pathParameters.sessionId = sessionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Refresh a JWT.
	 * @async
	 * @param {WebDeploymentsRefreshJWTRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/token/refresh" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWebdeploymentsTokenRefresh(body) {
		const endpointPath = "/api/v2/webdeployments/token/refresh";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Exchange an oAuth code (obtained using the Authorization Code Flow) for a JWT that can be used by webdeployments.
	 * @async
	 * @param {WebDeploymentsOAuthExchangeRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/token/oauthcodegrantjwtexchange" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWebdeploymentsTokenOauthcodegrantjwtexchange(body) {
		const endpointPath = "/api/v2/webdeployments/token/oauthcodegrantjwtexchange";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete all versions of a configuration
	 * @async
	 * @param {string} configurationId - The configuration version ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/configurations/{configurationId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWebdeploymentsConfiguration(configurationId) {
		const endpointPath = "/api/v2/webdeployments/configurations/{configurationId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(configurationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "configurationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.configurationId = configurationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * View configuration drafts
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.showOnlyPublished] -  Filter by published status.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/configurations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWebdeploymentsConfigurations(query) {
		const endpointPath = "/api/v2/webdeployments/configurations";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("showOnlyPublished" in query && this.#checkJSONSchemaType(query["showOnlyPublished"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "showOnlyPublished", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a configuration draft
	 * @async
	 * @param {WebDeploymentConfigurationVersion} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/configurations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWebdeploymentsConfigurations(body) {
		const endpointPath = "/api/v2/webdeployments/configurations";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the versions of a configuration
	 * @async
	 * @param {string} configurationId - The configuration version ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/configurations/{configurationId}/versions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWebdeploymentsConfigurationVersions(configurationId) {
		const endpointPath = "/api/v2/webdeployments/configurations/{configurationId}/versions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(configurationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "configurationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.configurationId = configurationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a configuration version
	 * @async
	 * @param {string} configurationId - The configuration version ID
	 * @param {string} versionId - The version of the configuration to get
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/configurations/{configurationId}/versions/{versionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWebdeploymentsConfigurationVersion(configurationId, versionId) {
		const endpointPath = "/api/v2/webdeployments/configurations/{configurationId}/versions/{versionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(configurationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "configurationId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.configurationId = configurationId;
		apiCallOptions.pathParameters.versionId = versionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the configuration draft
	 * @async
	 * @param {string} configurationId - The configuration version ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/configurations/{configurationId}/versions/draft" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getWebdeploymentsConfigurationVersionsDraft(configurationId) {
		const endpointPath = "/api/v2/webdeployments/configurations/{configurationId}/versions/draft";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(configurationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "configurationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.configurationId = configurationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the configuration draft
	 * @async
	 * @param {string} configurationId - The configuration version ID
	 * @param {WebDeploymentConfigurationVersion} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/configurations/{configurationId}/versions/draft" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putWebdeploymentsConfigurationVersionsDraft(configurationId, body) {
		const endpointPath = "/api/v2/webdeployments/configurations/{configurationId}/versions/draft";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(configurationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "configurationId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.configurationId = configurationId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Publish the configuration draft and create a new version
	 * @async
	 * @param {string} configurationId - The configuration version ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/configurations/{configurationId}/versions/draft/publish" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postWebdeploymentsConfigurationVersionsDraftPublish(configurationId) {
		const endpointPath = "/api/v2/webdeployments/configurations/{configurationId}/versions/draft/publish";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(configurationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "configurationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.configurationId = configurationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a deployment
	 * @async
	 * @param {string} deploymentId - The deployment ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected. 
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/deployments/{deploymentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWebdeploymentsDeployment(deploymentId, query) {
		const endpointPath = "/api/v2/webdeployments/deployments/{deploymentId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a deployment
	 * @async
	 * @param {string} deploymentId - The deployment ID
	 * @param {WebDeployment} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/deployments/{deploymentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putWebdeploymentsDeployment(deploymentId, body) {
		const endpointPath = "/api/v2/webdeployments/deployments/{deploymentId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a deployment
	 * @async
	 * @param {string} deploymentId - The deployment ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/deployments/{deploymentId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteWebdeploymentsDeployment(deploymentId) {
		const endpointPath = "/api/v2/webdeployments/deployments/{deploymentId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get active configuration for a given deployment
	 * @async
	 * @param {string} deploymentId - The deployment ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.type] -  Get active configuration on a deployment
	 * @param {string[]} [query.expand] -  Expand instructions for the return value
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/deployments/{deploymentId}/configurations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWebdeploymentsDeploymentConfigurations(deploymentId, query) {
		const endpointPath = "/api/v2/webdeployments/deployments/{deploymentId}/configurations";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(deploymentId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "deploymentId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("type" in query && this.#checkJSONSchemaType(query["type"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "type", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.deploymentId = deploymentId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Invalidate JWT
	 * @async
	 * @param {object} headers - The headers to include in the request. An empty object or null is allowed if all headers are optional.
	 * The following headers are supported:
	 * {string} X-Journey-Session-Id - (optional) The Customer's journey sessionId.
	 * {string} X-Journey-Session-Type - (optional) The Customer's journey session type.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/token/revoke" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the headers argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID} If a header is not of the proper type.	 
	 */
	deleteWebdeploymentsTokenRevoke(headers) {
		const endpointPath = "/api/v2/webdeployments/token/revoke";
		const endpointMethod = "DELETE";

		// Check the header parameters
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (headers !== null) {
			if ("X-Journey-Session-Id" in headers && this.#checkJSONSchemaType(headers["X-Journey-Session-Id"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "X-Journey-Session-Id", "string");
			}
			if ("X-Journey-Session-Type" in headers && this.#checkJSONSchemaType(headers["X-Journey-Session-Type"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADER_TYPE_INVALID(endpointPath, endpointMethod, "X-Journey-Session-Type", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.headers = headers;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get deployments
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  The specified entity attributes will be filled. Comma separated values expected. 
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/deployments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getWebdeploymentsDeployments(query) {
		const endpointPath = "/api/v2/webdeployments/deployments";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a deployment
	 * @async
	 * @param {WebDeployment} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/webdeployments/deployments" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postWebdeploymentsDeployments(body) {
		const endpointPath = "/api/v2/webdeployments/deployments";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { WebDeploymentsAPI };