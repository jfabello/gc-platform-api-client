/**
 * Mailbox, messages, policy
 * @module gc-platform-api-voicemail
 * @documentation https://developer.genesys.cloud/commdigital/voicemail/
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.320Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} Actions
 * @property {SkillsToRemove[]} [skillsToRemove]
 */
 
/**
 * @typedef {object} AcwSettings
 * @property {string} [wrapupPrompt] - This field controls how the UI prompts the agent for a wrapup.
 * @property {number} [timeoutMs] - The amount of time the agent can stay in ACW (Min: 1 sec, Max: 60 min).  Can only be used when ACW is AGENT_REQUESTED, MANDATORY_TIMEOUT or MANDATORY_FORCED_TIMEOUT.
 */
 
/**
 * @typedef {object} Address
 * @property {string} [name] - This will be nameRaw if present, or a locality lookup of the address field otherwise.
 * @property {string} [nameRaw] - The name as close to the bits on the wire as possible.
 * @property {string} [addressNormalized] - The normalized address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table.
 * @property {string} [addressRaw] - The address as close to the bits on the wire as possible.
 * @property {string} [addressDisplayable] - The displayable address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table.
 */
 
/**
 * @typedef {object} AddressableEntityRef
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} AdjustableLiveSpeakerDetection
 * @property {string} [mode] - Modes to tune between speed to live speaker detection vs accuracy.
 * @property {string} [preconnectDuration] - ISO 8601 formatted relative duration (e.g., PT30.8427419S for 30.8 seconds), calculated on line connect.
 * @property {string} [eventName] - The name of the event that triggered the ALSD evaluation (e.g., line.connect, speech.generic).
 * @property {boolean} [isPersonLikely] - The output of the ALSD detector, evaluating whether there is likely a person on the call based on the above inputs, and if so, a person is detected early (person disposition name and speech.person analyzer result) and the associated action taken (e.g., speech.person postconnect entry in the disposition table has the action to transfer to a queue).
 * @property {number} [totalRingbacks] - Number of tone.ring.* analyzer events detected during the call (expected mostly during pre-connect but the last ringback tone detection could potentially complete after line connect, which will increment totalRingbacks still).
 * @property {boolean} [lineConnected] - Protocol line connect received (answered by a person, machine, busy, fax).
 */
 
/**
 * @typedef {object} AfterCallWork
 * @property {string} [startTime] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endTime] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [state]
 */
 
/**
 * @typedef {object} AgentOwnedRouting
 * @property {boolean} [enableAgentOwnedCallbacks] - Indicates if Agent Owned Callbacks are enabled for the queue
 * @property {number} [maxOwnedCallbackHours] - The max amount of time a callback can be owned (in hours); Allowable range 1 - 168 hour(s) (inclusive)
 * @property {number} [maxOwnedCallbackDelayHours] - The max amount of time a callback can be scheduled out into the future (in hours); Allowable range 1 - 720 hour(s) (inclusive)
 */
 
/**
 * @typedef {object} AiAnswer
 * @property {string} [answerId] - The unique identifier of the suggested AI answer.
 * @property {string} [explanation] - An explanation providing the reasoning behind the suggested answer.
 * @property {string} [failureType] - Describes the type of error associated with the AI answer.
 */
 
/**
 * @typedef {object} AiScoring
 * @property {string} [failureType] - The type of error that occurred while processing AI scores. It is null where there is no error.
 * @property {boolean} [pending] - Indicates whether AI scoring is currently processing the evaluation.
 * @property {string} [dateLastChanged] - The date when the AI scores were last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} AiScoringSetting
 * @property {boolean} [enabled] - True if AI Scoring feature is configured.
 */
 
/**
 * @typedef {object} AiScoringSettings
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {QuestionGroupSettings[]} [questionGroupSettings]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} AnswerOption
 * @property {string} [id]
 * @property {string} [text]
 * @property {number} [value]
 * @property {AssistanceCondition[]} [assistanceConditions] - List of assistance conditions which are combined together with a logical AND operator. Eg ( assistanceCondtion1 && assistanceCondition2 ) wherein assistanceCondition could be ( EXISTS topic1 || topic2 || ... ) or (NOTEXISTS topic3 || topic4 || ...).
 */
 
/**
 * @typedef {object} AssistanceCondition
 * @property {string} [operator] - The operator for the assistance condition. The operator defines whether the listed topicIds should EXIST or NOTEXIST for the condition to be evaluated as true.
 * @property {string[]} [topicIds] - List of topicIds within the assistance condition which would be combined together using logical OR operator. Eg ( topicId_1 || topicId_2 ) .
 */
 
/**
 * @typedef {object} Attachment
 * @property {string} [attachmentId] - The unique identifier for the attachment.
 * @property {string} [name] - The name of the attachment.
 * @property {string} [contentUri] - The content uri of the attachment. If set, this is commonly a public api download location.
 * @property {string} [contentType] - The type of file the attachment is.
 * @property {number} [contentLength] - The length of the attachment file.
 * @property {boolean} [inlineImage] - Whether or not the attachment was attached inline.,
 */
 
/**
 * @typedef {object} Biography
 * @property {string} [biography] - Personal detailed description
 * @property {string[]} [interests]
 * @property {string[]} [hobbies]
 * @property {string} [spouse]
 * @property {Education[]} [education] - User education details
 */
 
/**
 * @typedef {object} Bullseye
 * @property {Ring[]} [rings] - The bullseye rings configured for this queue.
 */
 
/**
 * @typedef {object} Calibration
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {User} [calibrator]
 * @property {User} [agent]
 * @property {ConversationReference} [conversation]
 * @property {EvaluationForm} [evaluationForm]
 * @property {string} [contextId]
 * @property {number} [averageScore]
 * @property {number} [highScore]
 * @property {number} [lowScore]
 * @property {string} [createdDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {Evaluation[]} [evaluations]
 * @property {User[]} [evaluators]
 * @property {Evaluation} [scoringIndex]
 * @property {User} [expertEvaluator]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Call
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [initialState] - The initial connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {string} [direction] - The direction of the call
 * @property {boolean} [recording] - True if this call is being recorded.
 * @property {string} [recordingState] - State of recording on this call.
 * @property {RecordersState} [recordersState] - Contains the states of different recorders.
 * @property {boolean} [muted] - True if this call is muted so that remote participants can't hear any audio from this end.
 * @property {boolean} [confined] - True if this call is held and the person on this side hears hold music.
 * @property {boolean} [held] - True if this call is held and the person on this side hears silence.
 * @property {boolean} [securePause] - True when the recording of this call is in secure pause status.
 * @property {string} [recordingId] - A globally unique identifier for the recording associated with this call.
 * @property {Segment[]} [segments] - The time line of the participant's call, divided into activity segments.
 * @property {ErrorInfo} [errorInfo]
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {string} [startHoldTime] - The timestamp the call was placed on hold in the cloud clock if the call is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [documentId] - If call is an outbound fax of a document from content management, then this is the id in content management.
 * @property {string} [startAlertingTime] - The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {DisconnectReason[]} [disconnectReasons] - List of reasons that this call was disconnected. This will be set once the call disconnects.
 * @property {FaxStatus} [faxStatus] - Extra information on fax transmission.
 * @property {string} [provider] - The source provider for the call.
 * @property {string} [scriptId] - The UUID of the script to use.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {string} [uuiData] - User to User Information (UUI) data managed by SIP session application.
 * @property {Address} [self] - Address and name data for a call endpoint.
 * @property {Address} [other] - Address and name data for a call endpoint.
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {AfterCallWork} [afterCallWork] - After-call work for the communication.
 * @property {boolean} [afterCallWorkRequired] - Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
 * @property {string} [agentAssistantId] - UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation.
 * @property {ConversationQueueMediaSettings} [queueMediaSettings] - Represents the queue settings for this media type.
 * @property {Disposition} [disposition] - Call resolution data for Dialer bulk make calls commands.
 */
 
/**
 * @typedef {object} Callback
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [initialState] - The initial connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {Segment[]} [segments] - The time line of the participant's callback, divided into activity segments.
 * @property {string} [direction] - The direction of the call
 * @property {boolean} [held] - True if this call is held and the person on this side hears silence.
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {string} [startHoldTime] - The timestamp the callback was placed on hold in the cloud clock if the callback is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {DialerPreview} [dialerPreview] - The preview data to be used when this callback is a Preview.
 * @property {Voicemail} [voicemail] - The voicemail data to be used when this callback is an ACD voicemail.
 * @property {string[]} [callbackNumbers] - The phone number(s) to use to place the callback.
 * @property {string} [callbackUserName] - The name of the user requesting a callback.
 * @property {string} [scriptId] - The UUID of the script to use.
 * @property {boolean} [externalCampaign] - True if the call for the callback uses external dialing.
 * @property {boolean} [skipEnabled] - True if the ability to skip a callback should be enabled.
 * @property {number} [timeoutSeconds] - The number of seconds before the system automatically places a call for a callback.  0 means the automatic placement is disabled.
 * @property {string} [startAlertingTime] - The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [callbackScheduledTime] - The timestamp when this communication is scheduled in the provider clock. If this value is missing it indicates the callback will be placed immediately. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [automatedCallbackConfigId] - The id of the config for automatically placing the callback (and handling the disposition). If null, the callback will not be placed automatically but routed to an agent as per normal.
 * @property {string} [provider] - The source provider for the callback.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {AfterCallWork} [afterCallWork] - After-call work for the communication.
 * @property {boolean} [afterCallWorkRequired] - Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
 * @property {string} [callerId] - The phone number displayed to recipients of the phone call. The value should conform to the E164 format.
 * @property {string} [callerIdName] - The name displayed to recipients of the phone call.
 * @property {ConversationQueueMediaSettings} [queueMediaSettings] - Represents the queue settings for this media type.
 */
 
/**
 * @typedef {object} CallbackMediaSettings
 * @property {boolean} [enableAutoAnswer] - Indicates if auto-answer is enabled for the given media type or subtype (default is false).  Subtype settings take precedence over media type settings.
 * @property {number} [alertingTimeoutSeconds] - The alerting timeout for the media type, in seconds
 * @property {ServiceLevel} [serviceLevel] - The targeted service level for the media type
 * @property {number} [autoAnswerAlertToneSeconds] - How long to play the alerting tone for an auto-answer interaction
 * @property {number} [manualAnswerAlertToneSeconds] - How long to play the alerting tone for a manual-answer interaction
 * @property {object} [subTypeSettings] - Map of media subtype to media subtype specific settings.
 * @property {string} [mode] - The mode callbacks will use on this queue.
 * @property {boolean} [enableAutoDialAndEnd] - Flag to enable Auto-Dial and Auto-End automation for callbacks on this queue.
 * @property {number} [autoDialDelaySeconds] - Time in seconds after agent connects to callback before outgoing call is auto-dialed. Allowable values in range 0 - 1200 seconds. Defaults to 300 seconds.
 * @property {number} [autoEndDelaySeconds] - Time in seconds after agent disconnects from the outgoing call before the encasing callback is auto-ended. Allowable values in range 0 - 1200 seconds. Defaults to 300 seconds.
 * @property {number} [pacingModifier] - Controls the maximum number of outbound calls at one time when mode is CustomerFirst.
 * @property {string} [liveVoiceReactionType] - The action to take if a live voice is detected during the outbound call of a customer first callback.
 * @property {DomainEntityRef} [liveVoiceFlow] - The inbound flow to transfer to if a live voice is detected during the outbound call of a customer first callback.
 * @property {string} [answeringMachineReactionType] - The action to take if an answering machine is detected during the outbound call of a customer first callback.
 * @property {DomainEntityRef} [answeringMachineFlow] - The inbound flow to transfer to if an answering machine is detected during the outbound call of a customer first callback when answeringMachineReactionType is set to TransferToFlow.
 */
 
/**
 * @typedef {object} CannedResponseLibraries
 * @property {string[]} [libraryIds] - Set of canned response library IDs associated with the queue only when mode is SelectedOnly.
 * @property {string} [mode] - The association mode of canned response libraries to queue
 */
 
/**
 * @typedef {object} Chat
 * @property {string} [jabberId]
 */
 
/**
 * @typedef {object} Cobrowsesession
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [initialState] - The initial connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {Address} [self] - Address and name data for a call endpoint.
 * @property {string} [cobrowseSessionId] - The co-browse session ID.
 * @property {string} [cobrowseRole] - This value identifies the role of the co-browse client within the co-browse session (a client is a sharer or a viewer).
 * @property {string[]} [controlling] - ID of co-browse participants for which this client has been granted control (list is empty if this client cannot control any shared pages).
 * @property {string} [viewerUrl] - The URL that can be used to open co-browse session in web browser.
 * @property {string} [providerEventTime] - The time when the provider event which triggered this conversation update happened in the corrected provider clock (milliseconds since 1970-01-01 00:00:00 UTC). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [startAlertingTime] - The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [provider] - The source provider for the co-browse session.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {Segment[]} [segments] - The time line of the participant's call, divided into activity segments.
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {AfterCallWork} [afterCallWork] - After-call work for the communication.
 * @property {boolean} [afterCallWorkRequired] - Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
 */
 
/**
 * @typedef {object} ConditionalGroupRouting
 * @property {ConditionalGroupRoutingRule[]} [rules] - The set of rules to be executed for each conversation
 */
 
/**
 * @typedef {object} ConditionalGroupRoutingRule
 * @property {DomainEntityRef} [queue] - The queue being evaluated for this rule.  If null, the current queue will be used.
 * @property {string} [metric] - The queue metric being evaluated
 * @property {string} [operator] - The operator that compares the actual value against the condition value
 * @property {number} [conditionValue] - The limit value, beyond which a rule evaluates as true
 * @property {MemberGroup[]} [groups] - The group(s) to activate if the rule evaluates as true
 * @property {number} [waitSeconds] - The number of seconds to wait in this rule, if it evaluates as true, before evaluating the next rule.  For the final rule, this is ignored, so need not be specified.
 */
 
/**
 * @typedef {object} Contact
 * @property {string} [address] - Email address or phone number for this contact type
 * @property {string} [display] - Formatted version of the address property
 * @property {string} [mediaType]
 * @property {string} [type]
 * @property {string} [extension] - Use internal extension instead of address. Mutually exclusive with the address field.
 * @property {string} [countryCode]
 * @property {string} [integration] - Integration tag value if this number is associated with an external integration.
 */
 
/**
 * @typedef {object} Conversation
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [externalTag] - The external tag associated with the conversation.
 * @property {string} startTime - The time when the conversation started. This will be the time when the first participant joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endTime] - The time when the conversation ended. This will be the time when the last participant left the conversation, or null when the conversation is still active. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [address] - The address of the conversation as seen from an external participant. For phone calls this will be the DNIS for inbound calls and the ANI for outbound calls. For other media types this will be the address of the destination participant for inbound and the address of the initiating participant for outbound.
 * @property {Participant[]} participants - The list of all participants in the conversation.
 * @property {string[]} [conversationIds] - A list of conversations to merge into this conversation to create a conference. This field is null except when being used to create a conference.
 * @property {number} [maxParticipants] - If this is a conference conversation, then this field indicates the maximum number of participants allowed to participant in the conference.
 * @property {string} [recordingState] - On update, 'paused' initiates a secure pause, 'active' resumes any paused recordings; otherwise indicates state of conversation recording.
 * @property {string} [state] - The conversation's state
 * @property {ConversationDivisionMembership[]} [divisions] - Identifiers of divisions associated with this conversation
 * @property {TransferResponse[]} [recentTransfers] - The list of the most recent 20 transfer commands applied to this conversation.
 * @property {boolean} [securePause] - True when the recording of this conversation is in secure pause status.
 * @property {string} [utilizationLabelId] - An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ConversationChat
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [initialState] - The initial connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {string} [roomId] - The room id for the chat.
 * @property {string} [recordingId] - A globally unique identifier for the recording associated with this chat.
 * @property {Segment[]} [segments] - The time line of the participant's chat, divided into activity segments.
 * @property {boolean} [held] - True if this call is held and the person on this side hears silence.
 * @property {string} [direction] - The direction of the chat
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {string} [startHoldTime] - The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [startAlertingTime] - The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [provider] - The source provider for the email.
 * @property {string} [scriptId] - The UUID of the script to use.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {string} [avatarImageUrl] - If available, the URI to the avatar image of this communication.
 * @property {JourneyContext} [journeyContext] - A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {AfterCallWork} [afterCallWork] - After-call work for the communication.
 * @property {boolean} [afterCallWorkRequired] - Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
 * @property {ConversationQueueMediaSettings} [queueMediaSettings] - Represents the queue settings for this media type.
 */
 
/**
 * @typedef {object} ConversationDivisionMembership
 * @property {DomainEntityRef} [division] - A division the conversation belongs to.
 * @property {DivisionEntityRef[]} [entities] - The entities on the conversation within the division. These are the users, queues, work flows, etc. that can be on conversations and and be assigned to different divisions.
 */
 
/**
 * Metadata information about a message.
 * @typedef {object} ConversationMessageMetadata
 * @property {string} [type] - Message type.
 * @property {ConversationMessageMetadataEvent[]} [events] - List of events metadata
 * @property {ConversationMessageMetadataContent[]} [content] - List of message content
 */
 
/**
 * Metadata information about a message content.
 * @typedef {object} ConversationMessageMetadataContent
 * @property {string} [contentType] - Type of this content element.
 * @property {string} [subType] - Content subtype
 */
 
/**
 * Metadata information about a message event.
 * @typedef {object} ConversationMessageMetadataEvent
 * @property {string} [eventType] - Type of this event element
 * @property {string} [subType] - Event subtype
 */
 
/**
 * @typedef {object} ConversationQueueMediaSettings
 * @property {number} [alertingTimeoutSeconds] - Specifies how long the agent has to answer an interaction before being marked as not responding.
 * @property {number} [autoAnswerAlertToneSeconds] - Specifies the duration of the alerting sound to be played for auto answered interactions.
 * @property {number} [manualAnswerAlertToneSeconds] - Specifies the duration of the alerting sound to be played for manually answered interactions.
 * @property {boolean} [enableAutoAnswer] - Flag to indicate if auto answer is enabled for the given media type or media subtype.
 */
 
/**
 * @typedef {object} ConversationReference
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} ConversationRoutingData
 * @property {AddressableEntityRef} [queue] - The queue to use for routing decisions
 * @property {AddressableEntityRef} [language] - The language to use for routing decisions
 * @property {number} [priority] - The priority of the conversation to use for routing decisions
 * @property {AddressableEntityRef[]} [skills] - The skills to use for routing decisions
 * @property {ScoredAgent[]} [scoredAgents] - A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents
 * @property {string} [label] - An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level
 */
 
/**
 * Used to copy a VoicemailMessage to either a User or a Group
 * @typedef {object} CopyVoicemailMessage
 * @property {string} voicemailMessageId - The id of the VoicemailMessage to copy
 * @property {string} [userId] - The id of the User to copy the VoicemailMessage to
 * @property {string} [groupId] - The id of the Group to copy the VoicemailMessage to
 */
 
/**
 * @typedef {object} Detail
 * @property {string} [errorCode]
 * @property {string} [fieldName]
 * @property {string} [entityId]
 * @property {string} [entityName]
 */
 
/**
 * @typedef {object} DialerPreview
 * @property {string} [id]
 * @property {string} [contactId] - The contact associated with this preview data pop
 * @property {string} [contactListId] - The contactList associated with this preview data pop.
 * @property {string} [campaignId] - The campaignId associated with this preview data pop.
 * @property {PhoneNumberColumn[]} [phoneNumberColumns] - The phone number columns associated with this campaign
 * @property {boolean} [callbackAutoAnswer] - Whether or not to auto answer the callback
 */
 
/**
 * @typedef {object} DirectRouting
 * @property {DirectRoutingMediaSettings} [callMediaSettings] - Direct Routing Settings specific to Call media.
 * @property {DirectRoutingMediaSettings} [emailMediaSettings] - Direct Routing Settings specific to Email media.
 * @property {DirectRoutingMediaSettings} [messageMediaSettings] - Direct Routing Settings specific to Message media.
 * @property {string} [backupQueueId] - ID of another queue to be used as the default backup if an agent does not have their Backup Settings configured. If not set, the current queue will be used as backup, but with Direct Routing criteria removed from the conversation.
 * @property {boolean} [waitForAgent] - Flag indicating if Direct Routing interactions should wait for Direct Routing agent or go immediately to selected backup.
 * @property {number} [agentWaitSeconds] - Time (in seconds) that a Direct Routing interaction will wait for Direct Routing agent before going to selected backup. Valid range [60, 864000].
 */
 
/**
 * @typedef {object} DirectRoutingMediaSettings
 * @property {boolean} [useAgentAddressOutbound] - Toggle that enables using an agent's Direct Routing address outbound on behalf of queue for this media type.
 */
 
/**
 * @typedef {object} DisconnectReason
 * @property {string} [type] - Disconnect reason protocol type.
 * @property {number} [code] - Protocol specific reason code. See the Q.850 and SIP specs.
 * @property {string} [phrase] - Human readable English description of the disconnect reason.
 */
 
/**
 * @typedef {object} Disposition
 * @property {string} name - Name of the disposition. Either a platform predefined value, or the name of the disposition in the disposition table..
 * @property {string} [analyzer] - The final media analyzer result that triggered the disposition result, if any.
 * @property {DispositionParameters} [dispositionParameters] - Contains various parameters related to call analysis.
 * @property {string} [detectedSpeechStart] - Absolute time when the speech started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [detectedSpeechEnd] - Absolute time when the speech ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} DispositionParameters
 * @property {AdjustableLiveSpeakerDetection} [adjustableLiveSpeakerDetection] - ALSD evaluation inputs and output (isPersonalLikely) of the ALSD detector the last time it ran on the call (could be multiple times)
 */
 
/**
 * @typedef {object} Division
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} DivisionEntityRef
 * @property {string} [id]
 * @property {string} [name]
 * @property {string} [selfUri]
 * @property {string} [dateDivisionUpdated] - The time the entity division was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} DomainEntityListingEvaluationForm
 * @property {EvaluationForm[]} [entities]
 * @property {number} [pageSize]
 * @property {number} [pageNumber]
 * @property {number} [total]
 * @property {string} [firstUri]
 * @property {string} [lastUri]
 * @property {string} [selfUri]
 * @property {string} [nextUri]
 * @property {string} [previousUri]
 * @property {number} [pageCount]
 */
 
/**
 * @typedef {object} DomainEntityRef
 * @property {string} [id]
 * @property {string} [name]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} DomainRole
 * @property {string} [id] - The ID of the role
 * @property {string} [name] - The name of the role
 */
 
/**
 * @typedef {object} Education
 * @property {string} [school]
 * @property {string} [fieldOfStudy]
 * @property {string} [notes] - Notes about education has a 2000 character limit
 * @property {string} [dateStart] - Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 * @property {string} [dateEnd] - Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd
 */
 
/**
 * @typedef {object} Email
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [initialState] - The initial connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {boolean} [held] - True if this call is held and the person on this side hears silence.
 * @property {string} [subject] - The subject for the initial email that started this conversation.
 * @property {number} [messagesSent] - The number of email messages sent by this participant.
 * @property {Segment[]} [segments] - The time line of the participant's email, divided into activity segments.
 * @property {string} [direction] - The direction of the email
 * @property {string} [recordingId] - A globally unique identifier for the recording associated with this call.
 * @property {ErrorBody} [errorInfo]
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {string} [startHoldTime] - The timestamp the email was placed on hold in the cloud clock if the email is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [startAlertingTime] - The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {boolean} [autoGenerated] - Indicates that the email was auto-generated like an Out of Office reply.
 * @property {string} [provider] - The source provider for the email.
 * @property {string} [scriptId] - The UUID of the script to use.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {string} [messageId] - A globally unique identifier for the stored content of this communication.
 * @property {Attachment[]} [draftAttachments] - A list of uploaded attachments on the email draft.
 * @property {boolean} [spam] - Indicates if the inbound email was marked as spam.
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {AfterCallWork} [afterCallWork] - After-call work for the communication.
 * @property {boolean} [afterCallWorkRequired] - Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
 * @property {ConversationQueueMediaSettings} [queueMediaSettings] - Represents the queue settings for this media type.
 * @property {string} [parkTime] - Represents the time when an email was put into parked state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} EmailAddress
 * @property {string} [email]
 * @property {string} [name]
 */
 
/**
 * @typedef {object} EmailMediaSettings
 * @property {boolean} [enableAutoAnswer] - Indicates if auto-answer is enabled for the given media type or subtype (default is false).  Subtype settings take precedence over media type settings.
 * @property {number} [alertingTimeoutSeconds] - The alerting timeout for the media type, in seconds
 * @property {ServiceLevel} [serviceLevel] - The targeted service level for the media type
 * @property {number} [autoAnswerAlertToneSeconds] - How long to play the alerting tone for an auto-answer interaction
 * @property {number} [manualAnswerAlertToneSeconds] - How long to play the alerting tone for a manual-answer interaction
 * @property {object} [subTypeSettings] - Map of media subtype to media subtype specific settings.
 */
 
/**
 * @typedef {object} EmployerInfo
 * @property {string} [officialName]
 * @property {string} [employeeId]
 * @property {string} [employeeType]
 * @property {string} [dateHire]
 */
 
/**
 * @typedef {object} ErrorBody
 * @property {string} [message]
 * @property {string} [code]
 * @property {number} [status]
 * @property {string} [entityId]
 * @property {string} [entityName]
 * @property {string} [messageWithParams]
 * @property {object} [messageParams]
 * @property {string} [contextId]
 * @property {Detail[]} [details]
 * @property {ErrorBody[]} [errors]
 * @property {Limit} [limit]
 */
 
/**
 * @typedef {object} ErrorInfo
 * @property {string} [message]
 * @property {string} [code]
 */
 
/**
 * @typedef {object} Evaluation
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {ConversationReference} [conversation]
 * @property {EvaluationForm} [evaluationForm] - Evaluation form used for evaluation.
 * @property {User} [evaluator]
 * @property {User} [agent]
 * @property {Calibration} [calibration]
 * @property {string} [status]
 * @property {EvaluationScoringSet} [answers]
 * @property {boolean} [agentHasRead]
 * @property {User} [assignee]
 * @property {boolean} [assigneeApplicable] - Indicates whether an assignee is applicable for the evaluation. Set to false when assignee is not applicable.
 * @property {string} [releaseDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [assignedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [changedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [revisionCreatedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {Queue} [queue]
 * @property {string[]} [mediaType] - List of different communication types used in conversation.
 * @property {boolean} [rescore] - Is only true when evaluation is re-scored.
 * @property {string} [conversationDate] - Date of conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [conversationEndDate] - End date of conversation if it had completed before evaluation creation. Null if created before the conversation ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {boolean} [neverRelease] - Signifies if the evaluation is never to be released. This cannot be set true if release date is also set.
 * @property {boolean} [assigned] - Set to false to unassign the evaluation. This cannot be set to false when assignee is also set.
 * @property {string} [dateAssigneeChanged] - Date when the assignee was last changed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [resourceId] - Only used for email evaluations. Will be null for all other evaluations.
 * @property {string} [resourceType] - The type of resource. Only used for email evaluations. Will be null for evaluations on all other resources.
 * @property {boolean} [redacted] - Is only true when the user making the request does not have sufficient permissions to see evaluation
 * @property {Team} [agentTeam] - Team of the evaluation agent
 * @property {boolean} [isScoringIndex]
 * @property {string[]} [authorizedActions] - List of user authorized actions on evaluation. Possible values: assign, edit, editScore, editAgentSignoff, delete, release, viewAudit
 * @property {boolean} [hasAssistanceFailed] - Is true when evaluation assistance didn't execute successfully
 * @property {EvaluationSource} [evaluationSource] - The source that created the evaluation.
 * @property {AiScoring} [aiScoring] - AI scoring details for the evaluation.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} EvaluationForm
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The evaluation form name
 * @property {string} [modifiedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {boolean} [published]
 * @property {string} [contextId]
 * @property {EvaluationQuestionGroup[]} questionGroups - A list of question groups
 * @property {DomainEntityListingEvaluationForm} [publishedVersions] - A list of the published versions of this form. Not populated by default, its availability depends on the endpoint. Use the 'expand=publishHistory' query parameter to retrieve this data where applicable (refer to the endpoint description to see if it is applicable).
 * @property {EvaluationSettings} [evaluationSettings] - Settings for evaluations associated with this form
 * @property {AiScoringSettings} [aiScoring] - AI scoring settings for the evaluation form.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} EvaluationQuestion
 * @property {string} [id]
 * @property {string} [contextId] - An identifier for this question that stays the same across versions of the form.
 * @property {string} [text]
 * @property {string} [helpText]
 * @property {string} [type]
 * @property {boolean} [naEnabled]
 * @property {boolean} [commentsRequired]
 * @property {VisibilityCondition} [visibilityCondition]
 * @property {AnswerOption[]} [answerOptions] - Options from which to choose an answer for this question. Only used by Multiple Choice type questions.
 * @property {boolean} [isKill]
 * @property {boolean} [isCritical]
 */
 
/**
 * @typedef {object} EvaluationQuestionGroup
 * @property {string} [id]
 * @property {string} [contextId] - An identifier for this question group that stays the same across versions of the form.
 * @property {string} [name]
 * @property {string} [type]
 * @property {boolean} [defaultAnswersToHighest]
 * @property {boolean} [defaultAnswersToNA]
 * @property {boolean} [naEnabled]
 * @property {number} [weight]
 * @property {boolean} [manualWeight]
 * @property {EvaluationQuestion[]} [questions]
 * @property {VisibilityCondition} [visibilityCondition]
 */
 
/**
 * @typedef {object} EvaluationQuestionGroupScore
 * @property {string} [questionGroupId]
 * @property {number} [totalScore] - Score of all questions in the group
 * @property {number} [maxTotalScore] - Maximum possible score of all questions in the group
 * @property {boolean} [markedNA] - True when the evaluation is submitted with a question group that does not have any answers. Only allowed when naEnabled is true or if set by the system
 * @property {boolean} [systemMarkedNA] - If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.
 * @property {number} [totalCriticalScore] - Score of only the critical questions in the group
 * @property {number} [maxTotalCriticalScore] - Maximum possible score of only the critical questions in the group
 * @property {number} [totalNonCriticalScore] - Score of only the non critical questions in the group
 * @property {number} [maxTotalNonCriticalScore] - Maximum possible score of only the non critical questions in the group
 * @property {number} [totalScoreUnweighted] - Unweighted score of all questions in the group
 * @property {number} [maxTotalScoreUnweighted] - Maximum possible unweighted score of all questions in the group
 * @property {number} [totalCriticalScoreUnweighted] - Unweighted score of only the critical questions in the group
 * @property {number} [maxTotalCriticalScoreUnweighted] - Maximum possible unweighted score of only the critical questions in the group
 * @property {number} [totalNonCriticalScoreUnweighted] - Unweighted score of only the non critical questions in the group
 * @property {number} [maxTotalNonCriticalScoreUnweighted] - Maximum possible unweighted score of only the non critical questions in the group
 * @property {EvaluationQuestionScore[]} [questionScores]
 */
 
/**
 * @typedef {object} EvaluationQuestionScore
 * @property {string} [questionId]
 * @property {string} [answerId]
 * @property {number} [score] - Unweighted score of the question
 * @property {boolean} [markedNA] - True when the evaluation is submitted with a question that does not have an answer. Only allowed when naEnabled is true or if set by the system
 * @property {boolean} [systemMarkedNA] - If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.
 * @property {string} [assistedAnswerId] - AnswerId found with evaluation assistance conditions
 * @property {boolean} [failedKillQuestion] - Applicable only on fatal questions. Indicates that the answer selected was not the highest score available for the question
 * @property {string} [comments] - Comments from the evaluator specific to this question
 * @property {AiAnswer} [aiAnswer] - Suggested AI answer
 */
 
/**
 * @typedef {object} EvaluationScoringSet
 * @property {number} [totalScore] - Score of all questions
 * @property {number} [totalCriticalScore] - Score of only the critical questions
 * @property {number} [totalNonCriticalScore] - Score of only the non-critical questions
 * @property {EvaluationQuestionGroupScore[]} [questionGroupScores]
 * @property {boolean} [anyFailedKillQuestions] - Indicates that at least one fatal question was answered without having the highest score available for the question
 * @property {string} [comments] - Overall comments from the evaluator
 * @property {string} [privateComments] - Overall private comments from the evaluator
 * @property {string} [agentComments] - Comments from the agent while reviewing evaluation results
 * @property {TranscriptTopic[]} [transcriptTopics] - List of topics found within the conversation's transcripts
 */
 
/**
 * @typedef {object} EvaluationSettings
 * @property {boolean} [revisionsEnabled] - Whether revisions are allowed for evaluations. When enabled, rescoring creates a new version of the evaluation and retracts the existing evaluation version. Does not apply for calibration evaluations.
 * @property {boolean} [disputesEnabled] - Whether disputes are allowed for evaluations. Does not apply for calibration evaluations.
 * @property {number} [disputesAllowedPerEvaluation] - The maximum number of disputes allowed for an evaluation.
 * @property {EvaluationSettingsAssignee[]} [disputesAssignees] - A list of assignees responsible for handling each dispute. This list size needs to be equal to disputesAllowedPerEvaluation.
 */
 
/**
 * @typedef {object} EvaluationSettingsAssignee
 * @property {UserReferenceWithName} [user] - The user the dispute should be assigned to
 * @property {string} [type] - The assignee type. Valid values: Original, Individual, None
 */
 
/**
 * @typedef {object} EvaluationSource
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [type] - Type of the evaluation source.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ExpansionCriterium
 * @property {string} [type]
 * @property {number} [threshold]
 */
 
/**
 * @typedef {object} FaxStatus
 * @property {string} [direction] - The fax direction, either "send" or "receive".
 * @property {number} [expectedPages] - Total number of expected pages, if known.
 * @property {number} [activePage] - Active page of the transmission.
 * @property {number} [linesTransmitted] - Number of lines that have completed transmission.
 * @property {number} [bytesTransmitted] - Number of bytes that have competed transmission.
 * @property {number} [baudRate] - Current signaling rate of transmission, baud rate.
 * @property {number} [pageErrors] - Number of page errors.
 * @property {number} [lineErrors] - Number of line errors.
 */
 
/**
 * @typedef {object} Geolocation
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [type] - A string used to describe the type of client the geolocation is being updated from e.g. ios, android, web, etc.
 * @property {boolean} [primary] - A boolean used to tell whether or not to set this geolocation client as the primary on a PATCH
 * @property {number} [latitude]
 * @property {number} [longitude]
 * @property {string} [country]
 * @property {string} [region]
 * @property {string} [city]
 * @property {LocationDefinition[]} [locations]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Group
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The group name.
 * @property {string} [description]
 * @property {string} [dateModified] - Last modified date/time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [memberCount] - Number of members.
 * @property {string} [state] - Active, inactive, or deleted state.
 * @property {number} [version] - Current version for this resource.
 * @property {string} type - Type of group.
 * @property {Image[]} [images]
 * @property {GroupContact[]} [addresses]
 * @property {boolean} rulesVisible - Are membership rules visible to the person requesting to view the group
 * @property {string} visibility - Who can view this group
 * @property {boolean} [rolesEnabled] - Allow roles to be assigned to this group
 * @property {boolean} [includeOwners] - Allow owners to be included as members of the group
 * @property {boolean} [callsEnabled] - Allow calls to be placed to this group.
 * @property {User[]} [owners] - Owners of the group
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} GroupContact
 * @property {string} address - Phone number for this contact type
 * @property {string} [extension] - Extension is set if the number is e164 valid
 * @property {string} [display] - Formatted version of the address property
 * @property {string} type - Contact type of the address
 * @property {string} mediaType - Media type of the address
 */
 
/**
 * @typedef {object} GroupEmailPolicy
 * @property {boolean} [emailMembers]
 * @property {boolean} [emailGroup]
 */
 
/**
 * @typedef {object} Image
 * @property {string} [resolution] - Height and/or width of image. ex: 640x480 or x128
 * @property {string} [imageUri]
 */
 
/**
 * @typedef {object} InboundRoute
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} pattern - The search pattern that the mailbox name should match.
 * @property {DomainEntityRef} [queue] - The queue to route the emails to.
 * @property {number} [priority] - The priority to use for routing.
 * @property {DomainEntityRef[]} [skills] - The skills to use for routing.
 * @property {DomainEntityRef} [language] - The language to use for routing.
 * @property {string} fromName - The sender name to use for outgoing replies.
 * @property {string} [fromEmail] - The sender email to use for outgoing replies.
 * @property {DomainEntityRef} [flow] - The flow to use for processing the email.
 * @property {QueueEmailAddress} [replyEmailAddress] - The route to use for email replies.
 * @property {EmailAddress[]} [autoBcc] - The recipients that should be automatically blind copied on outbound emails associated with this InboundRoute.
 * @property {DomainEntityRef} [spamFlow] - The flow to use for processing inbound emails that have been marked as spam.
 * @property {Signature} [signature] - The configuration for the canned response signature that will be appended to outbound emails sent via this route
 * @property {string} [historyInclusion] - The configuration to indicate how the history of a conversation has to be included in a draft
 * @property {boolean} [allowMultipleActions] - Control if multiple actions are allowed on this route. When true the disconnect has to be done manually. When false a conversation will be disconnected by the system after every action
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} InternalMessage
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [initialState] - The initial connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {Segment[]} [segments] - The time line of the participant's internal message, divided into activity segments.
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [provider] - The source provider for the message.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {string} [targetUserId] - The user ID for the participant on receiving side of the internal message conversation.
 * @property {string} [sourceUserId] - The user ID for the participant on sending side of the internal message conversation.
 * @property {Address} [toAddress] - Address for the participant on receiving side of the internal message communication.
 * @property {Address} [fromAddress] - Address for the participant on the sending side of the internal message communication.
 * @property {InternalMessageDetails[]} [messages] - The messages sent on this communication channel.
 */
 
/**
 * @typedef {object} InternalMessageDetails
 * @property {string} [messageId] - UUID identifying the internal message media.
 * @property {string} [messageTime] - The time when the message was sent or received. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} JourneyAction
 * @property {string} id - The ID of an action from the Journey System (an action is spawned from an actionMap)
 * @property {JourneyActionMap} actionMap - Details about the action map from the Journey System which triggered this action
 */
 
/**
 * @typedef {object} JourneyActionMap
 * @property {string} id - The ID of the actionMap in the Journey System which triggered this action
 * @property {number} version - The version number of the actionMap in the Journey System at the time this action was triggered
 */
 
/**
 * @typedef {object} JourneyContext
 * @property {JourneyCustomer} customer - A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)
 * @property {JourneyCustomerSession} [customerSession] - A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)
 * @property {JourneyAction} [triggeringAction] - A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)
 */
 
/**
 * @typedef {object} JourneyCustomer
 * @property {string} id - An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable.
 * @property {string} idType - The type of the customerId within the Journey System (e.g. cookie).
 */
 
/**
 * @typedef {object} JourneyCustomerSession
 * @property {string} id - An ID of a Customer/User's session within the Journey System at a point-in-time
 * @property {string} type - The type of the Customer/User's session within the Journey System (e.g. web, app)
 */
 
/**
 * @typedef {object} Limit
 * @property {string} [key]
 * @property {string} [namespace]
 * @property {number} [value]
 */
 
/**
 * @typedef {object} Location
 * @property {string} [id] - Unique identifier for the location
 * @property {string} [floorplanId] - Unique identifier for the location floorplan image
 * @property {object} [coordinates] - Users coordinates on the floorplan. Only used when floorplanImage is set
 * @property {string} [notes] - Optional description on the users location
 * @property {LocationDefinition} [locationDefinition]
 */
 
/**
 * @typedef {object} LocationAddress
 * @property {string} [city]
 * @property {string} [country]
 * @property {string} [countryName]
 * @property {string} [state]
 * @property {string} [street1]
 * @property {string} [street2]
 * @property {string} [zipcode]
 */
 
/**
 * @typedef {object} LocationAddressVerificationDetails
 * @property {string} [status] - Status of address verification process
 * @property {string} [dateFinished] - Finished time of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateStarted] - Time started of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [service] - Third party service used for address verification
 */
 
/**
 * @typedef {object} LocationDefinition
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {AddressableEntityRef} [contactUser] - Site contact for the location entity
 * @property {LocationEmergencyNumber} [emergencyNumber] - Emergency number for the location entity
 * @property {LocationAddress} [address]
 * @property {string} [state] - Current state of the location entity
 * @property {string} [notes] - Notes for the location entity
 * @property {number} [version] - Current version of the location entity, value to be supplied should be retrieved by a GET or on create/update response
 * @property {string[]} [path] - A list of ancestor IDs in order
 * @property {LocationImage[]} [profileImage] - Profile image of the location entity, retrieved with ?expand=images query parameter
 * @property {LocationImage[]} [floorplanImage] - Floorplan images of the location entity, retrieved with ?expand=images query parameter
 * @property {LocationAddressVerificationDetails} [addressVerificationDetails] - Address verification information, retrieve dwith the ?expand=addressVerificationDetails query parameter
 * @property {boolean} [addressVerified] - Boolean field which states if the address has been verified as an actual address
 * @property {boolean} [addressStored] - Boolean field which states if the address has been stored for E911
 * @property {string} [images]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} LocationEmergencyNumber
 * @property {string} [e164]
 * @property {string} [number]
 * @property {string} [type] - The type of emergency number.
 */
 
/**
 * @typedef {object} LocationImage
 * @property {string} [resolution] - Height and/or width of image. ex: 640x480 or x128
 * @property {string} [imageUri]
 */
 
/**
 * @typedef {object} MediaSettings
 * @property {boolean} [enableAutoAnswer] - Indicates if auto-answer is enabled for the given media type or subtype (default is false).  Subtype settings take precedence over media type settings.
 * @property {number} [alertingTimeoutSeconds] - The alerting timeout for the media type, in seconds
 * @property {ServiceLevel} [serviceLevel] - The targeted service level for the media type
 * @property {number} [autoAnswerAlertToneSeconds] - How long to play the alerting tone for an auto-answer interaction
 * @property {number} [manualAnswerAlertToneSeconds] - How long to play the alerting tone for a manual-answer interaction
 * @property {object} [subTypeSettings] - Map of media subtype to media subtype specific settings.
 */
 
/**
 * @typedef {object} MediaSummary
 * @property {MediaSummaryDetail} [contactCenter]
 * @property {MediaSummaryDetail} [enterprise]
 */
 
/**
 * @typedef {object} MediaSummaryDetail
 * @property {number} [active]
 * @property {number} [acw]
 */
 
/**
 * @typedef {object} MemberGroup
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {WritableDivision} [division] - The division to which this entity belongs.
 * @property {string} [type] - The group type
 * @property {number} [memberCount] - The number of members in this group
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Message
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [initialState] - The initial connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {boolean} [held] - True if this call is held and the person on this side hears silence.
 * @property {Segment[]} [segments] - The time line of the participant's message, divided into activity segments.
 * @property {string} [direction] - The direction of the message.
 * @property {string} [recordingId] - A globally unique identifier for the recording associated with this message.
 * @property {ErrorBody} [errorInfo]
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {string} [startHoldTime] - The timestamp the message was placed on hold in the cloud clock if the message is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [startAlertingTime] - The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [provider] - The source provider for the message.
 * @property {boolean} [authenticated] - If true, the participant member is authenticated.
 * @property {string} [type] - Indicates the type of message platform from which the message originated.
 * @property {string} [recipientCountry] - Indicates the country where the recipient is associated in ISO 3166-1 alpha-2 format.
 * @property {string} [recipientType] - The type of the recipient. Eg: Provisioned phoneNumber is the recipient for sms message type.
 * @property {string} [scriptId] - The UUID of the script to use.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {Address} [toAddress] - Address and name data for a call endpoint.
 * @property {Address} [fromAddress] - Address and name data for a call endpoint.
 * @property {MessageDetails[]} [messages] - The messages sent on this communication channel.
 * @property {JourneyContext} [journeyContext] - A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context).
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {AfterCallWork} [afterCallWork] - After-call work for the communication.
 * @property {boolean} [afterCallWorkRequired] - Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
 * @property {string} [agentAssistantId] - UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation.
 * @property {string} [byoSmsIntegrationId] - The internal id representing the customer supplied sms integration message.
 * @property {ConversationQueueMediaSettings} [queueMediaSettings] - Represents the queue settings for this media type.
 */
 
/**
 * @typedef {object} MessageDetails
 * @property {string} [messageId] - UUID identifying the message media.
 * @property {string} [messageURI] - A URI for this message entity.
 * @property {string} [messageStatus] - Indicates the delivery status of the message.
 * @property {number} [messageSegmentCount] - The message segment count, greater than 1 if the message content was split into multiple parts for this message type, e.g. SMS character limits.
 * @property {string} [messageTime] - The time when the message was sent or received. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {MessageMedia[]} [media] - The media (images, files, etc) associated with this message, if any
 * @property {MessageSticker[]} [stickers] - One or more stickers associated with this message, if any
 * @property {ConversationMessageMetadata} [messageMetadata] - Information that describes the content of the message, if any
 * @property {string} [socialVisibility] - For social media messages, the visibility of the message in the originating social platform
 * @property {ErrorBody} [errorInfo] - Provider specific error information for a communication.
 */
 
/**
 * @typedef {object} MessageMedia
 * @property {string} [url] - The location of the media, useful for retrieving it
 * @property {string} [mediaType] - The optional internet media type of the the media object.  If null then the media type should be dictated by the url
 * @property {number} [contentLengthBytes] - The optional content length of the the media object, in bytes.
 * @property {string} [name] - The optional name of the the media object.
 * @property {string} [id] - The optional id of the the media object.
 */
 
/**
 * @typedef {object} MessageMediaSettings
 * @property {boolean} [enableAutoAnswer] - Indicates if auto-answer is enabled for the given media type or subtype (default is false).  Subtype settings take precedence over media type settings.
 * @property {number} [alertingTimeoutSeconds] - The alerting timeout for the media type, in seconds
 * @property {ServiceLevel} [serviceLevel] - The targeted service level for the media type
 * @property {number} [autoAnswerAlertToneSeconds] - How long to play the alerting tone for an auto-answer interaction
 * @property {number} [manualAnswerAlertToneSeconds] - How long to play the alerting tone for a manual-answer interaction
 * @property {object} [subTypeSettings] - Map of media subtype to media subtype specific settings.
 */
 
/**
 * @typedef {object} MessageSticker
 * @property {string} [url] - The location of the sticker, useful for retrieving it
 * @property {string} [id] - The unique id of the the sticker object.
 */
 
/**
 * @typedef {object} OAuthLastTokenIssued
 * @property {string} [dateIssued] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} OutOfOffice
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {User} [user]
 * @property {string} [startDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {boolean} [active]
 * @property {boolean} [indefinite]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Participant
 * @property {string} [id] - A globally unique identifier for this conversation.
 * @property {string} [startTime] - The timestamp when this participant joined the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endTime] - The timestamp when this participant disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this participant was connected to the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [name] - A human readable name identifying the participant.
 * @property {string} [userUri] - If this participant represents a user, then this will be an URI that can be used to fetch the user.
 * @property {string} [userId] - If this participant represents a user, then this will be the globally unique identifier for the user.
 * @property {string} [externalContactId] - If this participant represents an external contact, then this will be the globally unique identifier for the external contact.
 * @property {string} [externalContactInitialDivisionId] - If this participant represents an external contact, then this will be the initial division for the external contact. This value will not be updated if the external contact is reassigned.
 * @property {string} [externalOrganizationId] - If this participant represents an external org, then this will be the globally unique identifier for the external org.
 * @property {string} [queueId] - If present, the queue id that the communication channel came in on.
 * @property {string} [groupId] - If present, group of users the participant represents.
 * @property {string} [teamId] - The team id that this participant is a member of when added to the conversation.
 * @property {string} [queueName] - If present, the queue name that the communication channel came in on.
 * @property {string} [purpose] - A well known string that specifies the purpose of this participant.
 * @property {string} [participantType] - A well known string that specifies the type of this participant.
 * @property {string} [consultParticipantId] - If this participant is part of a consult transfer, then this will be the participant id of the participant being transferred.
 * @property {string} [address] - The address for the this participant. For a phone call this will be the ANI.
 * @property {string} [ani] - The address for the this participant. For a phone call this will be the ANI.
 * @property {string} [aniName] - The ani-based name for this participant.
 * @property {string} [dnis] - The address for the this participant. For a phone call this will be the ANI.
 * @property {string} [locale] - An ISO 639 language code specifying the locale for this participant
 * @property {boolean} [wrapupRequired] - True iff this participant is required to enter wrapup for this conversation.
 * @property {string} [wrapupPrompt] - This field controls how the UI prompts the agent for a wrapup.
 * @property {number} [wrapupTimeoutMs] - Specifies how long a timed ACW session will last.
 * @property {boolean} [wrapupSkipped] - The UI sets this field when the agent chooses to skip entering a wrapup for this participant.
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {string[]} [mediaRoles] - List of roles this participant's media has had on the conversation, ie monitor, coach, etc.
 * @property {ConversationRoutingData} [conversationRoutingData] - Information on how a communication should be routed to an agent.
 * @property {number} [alertingTimeoutMs] - Specifies how long the agent has to answer an interaction before being marked as not responding.
 * @property {string} [monitoredParticipantId] - If this participant is a monitor, then this will be the id of the participant that is being monitored.
 * @property {string} [coachedParticipantId] - If this participant is a coach, then this will be the id of the participant that is being coached.
 * @property {object} [attributes] - Additional participant attributes
 * @property {Call[]} [calls]
 * @property {Callback[]} [callbacks]
 * @property {ConversationChat[]} [chats]
 * @property {Cobrowsesession[]} [cobrowsesessions]
 * @property {Email[]} [emails]
 * @property {Message[]} [messages]
 * @property {Screenshare[]} [screenshares]
 * @property {SocialExpression[]} [socialExpressions]
 * @property {Video[]} [videos]
 * @property {Evaluation[]} [evaluations]
 * @property {string} [screenRecordingState] - The current screen recording state for this participant.
 * @property {string} [flaggedReason] - The reason specifying why participant flagged the conversation.
 * @property {string} [startAcwTime] - The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [endAcwTime] - The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {InternalMessage[]} [internalMessages]
 * @property {string} [bargedParticipantId] - If this participant barged in a participant's call, then this will be the id of the targeted participant.
 */
 
/**
 * @typedef {object} PhoneNumberColumn
 * @property {string} [columnName]
 * @property {string} [type]
 */
 
/**
 * @typedef {object} PINConfiguration
 * @property {number} [minimumLength]
 * @property {number} [maximumLength]
 */
 
/**
 * @typedef {object} PresenceDefinition
 * @property {string} [id] - description
 * @property {string} [systemPresence]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} QuestionGroupSettings
 * @property {string} [questionGroupContextId] - The context id of the question group in the form.
 * @property {QuestionSettings[]} [questionSettings]
 */
 
/**
 * @typedef {object} QuestionSettings
 * @property {string} [questionContextId] - The context id of the question in the group
 * @property {AiScoringSetting} [settings]
 */
 
/**
 * @typedef {object} Queue
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {Division} [division] - The division to which this entity belongs.
 * @property {string} [description] - The queue description.
 * @property {string} [dateCreated] - The date the queue was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - The date of the last modification to the queue. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [modifiedBy] - The ID of the user that last modified the queue.
 * @property {string} [createdBy] - The ID of the user that created the queue.
 * @property {number} [memberCount] - The total number of members in the queue.
 * @property {number} [userMemberCount] - The number of user members (i.e., non-group members) in the queue.
 * @property {number} [joinedMemberCount] - The number of joined members in the queue.
 * @property {QueueMediaSettings} [mediaSettings] - The media settings for the queue.
 * @property {RoutingRule[]} [routingRules] - The routing rules for the queue, used for Preferred Agent Routing.
 * @property {ConditionalGroupRouting} [conditionalGroupRouting] - The Conditional Group Routing settings for the queue.
 * @property {Bullseye} [bullseye] - The bullseye settings for the queue.
 * @property {string} [scoringMethod] - The Scoring Method for the queue.
 * @property {string} [lastAgentRoutingMode] - The Last Agent Routing Mode for the queue.
 * @property {AcwSettings} [acwSettings] - The ACW settings for the queue.
 * @property {string} [skillEvaluationMethod] - The skill evaluation method to use when routing conversations.
 * @property {MemberGroup[]} [memberGroups] - The groups of agents associated with the queue, if any.  Queue membership will update to match group membership changes.
 * @property {DomainEntityRef} [queueFlow] - The in-queue flow to use for call conversations waiting in queue.
 * @property {DomainEntityRef} [emailInQueueFlow] - The in-queue flow to use for email conversations waiting in queue.
 * @property {DomainEntityRef} [messageInQueueFlow] - The in-queue flow to use for message conversations waiting in queue.
 * @property {DomainEntityRef} [whisperPrompt] - The prompt used for whisper on the queue, if configured.
 * @property {DomainEntityRef} [onHoldPrompt] - The audio to be played when calls on this queue are on hold. If not configured, the default on-hold music will play.
 * @property {boolean} [autoAnswerOnly] - Specifies whether the configured whisper should play for all ACD calls, or only for those which are auto-answered.
 * @property {CannedResponseLibraries} [cannedResponseLibraries] - Canned response library IDs and mode with which they are associated with the queue
 * @property {boolean} [enableTranscription] - Indicates whether voice transcription is enabled for this queue.
 * @property {boolean} [enableAudioMonitoring] - Indicates whether audio monitoring is enabled for this queue.
 * @property {boolean} [enableManualAssignment] - Indicates whether manual assignment is enabled for this queue.
 * @property {AgentOwnedRouting} [agentOwnedRouting] - The Agent Owned Routing settings for the queue
 * @property {DirectRouting} [directRouting] - The Direct Routing settings for the queue
 * @property {string} [callingPartyName] - The name to use for caller identification for outbound calls from this queue.
 * @property {string} [callingPartyNumber] - The phone number to use for caller identification for outbound calls from this queue.
 * @property {object} [defaultScripts] - The default script Ids for the communication types.
 * @property {QueueMessagingAddresses} [outboundMessagingAddresses] - The messaging addresses for the queue.
 * @property {QueueEmailAddress} [outboundEmailAddress] - The default email address to use for outbound email from this queue.
 * @property {string} [peerId] - The ID of an associated external queue.
 * @property {boolean} [suppressInQueueCallRecording] - Indicates whether recording in-queue calls is suppressed for this queue.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} QueueEmailAddress
 * @property {DomainEntityRef} [domain]
 * @property {InboundRoute} [route]
 */
 
/**
 * @typedef {object} QueueMediaSettings
 * @property {MediaSettings} [call] - The queue media settings for call interactions.
 * @property {CallbackMediaSettings} [callback] - The queue media settings for callback interactions.
 * @property {MediaSettings} [chat] - The queue media settings for chat interactions.
 * @property {EmailMediaSettings} [email] - The queue media settings for email interactions.
 * @property {MessageMediaSettings} [message] - The queue media settings for message interactions.
 */
 
/**
 * @typedef {object} QueueMessagingAddresses
 * @property {DomainEntityRef} [smsAddress]
 * @property {DomainEntityRef} [openMessagingRecipient]
 * @property {DomainEntityRef} [whatsAppRecipient]
 */
 
/**
 * @typedef {object} RecordersState
 * @property {string} [adhocState] - Indicates the state of the adhoc recorder.
 * @property {string} [customerExperienceState] - Indicates the state of the customer experience recorder.
 * @property {string} [agentExperienceState] - Indicates the state of the agent experience recorder.
 */
 
/**
 * @typedef {object} ResourceConditionNode
 * @property {string} [variableName]
 * @property {string} [conjunction]
 * @property {string} [operator]
 * @property {ResourceConditionValue[]} [operands]
 * @property {ResourceConditionNode[]} [terms]
 */
 
/**
 * @typedef {object} ResourceConditionValue
 * @property {string} [type]
 * @property {string} [value]
 */
 
/**
 * @typedef {object} ResourcePermissionPolicy
 * @property {string} [id]
 * @property {string} [domain]
 * @property {string} [entityName]
 * @property {string} [policyName]
 * @property {string} [policyDescription]
 * @property {string} [actionSetKey]
 * @property {boolean} [allowConditions]
 * @property {ResourceConditionNode} [resourceConditionNode]
 * @property {string[]} [namedResources]
 * @property {string} [resourceCondition]
 * @property {string[]} [actionSet]
 */
 
/**
 * @typedef {object} Ring
 * @property {ExpansionCriterium[]} [expansionCriteria] - The conditions that will trigger conversations to move to the next bullseye ring.
 * @property {Actions} [actions] - The actions that will be performed just before moving conversations to the next bullseye ring.
 * @property {MemberGroup[]} [memberGroups] - The groups of agents associated with the ring, if any.  Ring membership will update to match group membership changes.
 */
 
/**
 * @typedef {object} RoutingRule
 * @property {string} [operator] - matching operator.  MEETS_THRESHOLD matches any agent with a score at or above the rule's threshold.  ANY matches all specified agents, regardless of score.
 * @property {number} [threshold] - threshold required for routing attempt (generally an agent score).  may be null for operator ANY.
 * @property {number} [waitSeconds] - seconds to wait in this rule before moving to the next
 */
 
/**
 * @typedef {object} RoutingStatus
 * @property {string} [userId] - The userId of the agent
 * @property {string} [status] - Indicates the Routing State of the agent.  A value of OFF_QUEUE will be returned if the specified user does not exist.
 * @property {string} [startTime] - The timestamp when the agent went into this state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} ScoredAgent
 * @property {DomainEntityRef} [agent] - The agent
 * @property {number} [score] - Agent's score for the current conversation, from 0 - 100, higher being better
 */
 
/**
 * @typedef {object} Screenshare
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [initialState] - The initial connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {string} [context] - The room id context (xmpp jid) for the conference session.
 * @property {boolean} [sharing] - Indicates whether this participant is sharing their screen.
 * @property {number} [peerCount] - The number of peer participants from the perspective of the participant in the conference.
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {string} [startAlertingTime] - The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [provider] - The source provider for the screen share.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {Segment[]} [segments] - The time line of the participant's call, divided into activity segments.
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {AfterCallWork} [afterCallWork] - After-call work for the communication.
 * @property {boolean} [afterCallWorkRequired] - Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
 */
 
/**
 * @typedef {object} SearchSort
 * @property {string} [sortOrder] - The sort order for results
 * @property {string} [sortBy] - The field in the resource that you want to sort the results by
 */
 
/**
 * @typedef {object} Segment
 * @property {string} startTime - The timestamp when this segment began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} endTime - The timestamp when this segment ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [type] - The activity taking place for the participant in the segment.
 * @property {string} [howEnded] - A description of the event that ended the segment.
 * @property {string} [disconnectType] - A description of the event that disconnected the segment
 */
 
/**
 * @typedef {object} ServiceLevel
 * @property {number} [percentage] - The desired Service Level. A value between 0 and 1.
 * @property {number} [durationMs] - Service Level target in milliseconds.
 */
 
/**
 * @typedef {object} Signature
 * @property {boolean} [enabled] - A toggle to enable the signature on email send.
 * @property {string} [cannedResponseId] - The identifier referring to an email signature canned response.
 * @property {boolean} [alwaysIncluded] - A toggle that defines if a signature is always included or only set on the first email in an email chain.
 * @property {string} [inclusionType] - The configuration to indicate when the signature of a conversation has to be included
 */
 
/**
 * @typedef {object} SkillsToRemove
 * @property {string} [name]
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} SocialExpression
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {string} [socialMediaId] - A globally unique identifier for the social media.
 * @property {string} [socialMediaHub] - The social network of the communication
 * @property {string} [socialUserName] - The user name for the communication.
 * @property {string} [previewText] - The text preview of the communication contents
 * @property {string} [recordingId] - A globally unique identifier for the recording associated with this chat.
 * @property {Segment[]} [segments] - The time line of the participant's chat, divided into activity segments.
 * @property {boolean} [held] - True if this call is held and the person on this side hears silence.
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {string} [startHoldTime] - The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [startAlertingTime] - The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [provider] - The source provider for the social expression.
 * @property {string} [scriptId] - The UUID of the script to use.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {AfterCallWork} [afterCallWork] - After-call work for the communication.
 * @property {boolean} [afterCallWorkRequired] - Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
 */
 
/**
 * @typedef {object} Team
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The team name
 * @property {WritableDivision} [division] - The division to which this entity belongs.
 * @property {string} [description] - Team information.
 * @property {string} [dateCreated] - Last modified datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [memberCount] - Number of members in a team
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} TopicDuration
 * @property {number} [totalMilliseconds] - The total duration of the topic phrase within the conversation
 */
 
/**
 * @typedef {object} TopicOffset
 * @property {number} [wordCount] - Count of words before the topic 
 * @property {number} [characterCount] - Count of characters before the topic 
 */
 
/**
 * @typedef {object} TranscriptTopic
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name] - The name of the object.
 * @property {string} [topicPhrase] - The phrase which detected the topic. 
 * @property {string} [transcriptPhrase] - The transcript phrase which detected the topic.
 * @property {number} [confidence] - The detection confidence of the topic.
 * @property {number} [startTimeMilliseconds] - The start time of the topic phrase.
 * @property {TopicDuration} [duration]
 * @property {TopicOffset} [offset] - Location of the phrase
 * @property {number} [recordingLocation] - Location of the phrase in the recording in milliseconds
 */
 
/**
 * @typedef {object} TransferDestination
 * @property {string} [userId] - The id of the user if the command destination is a user.
 * @property {string} [address] - The destination address if the command destination is an endpoint.
 */
 
/**
 * @typedef {object} TransferInitiator
 * @property {string} [userId] - The id of the user who initiated the command if it was initiated by a user.
 */
 
/**
 * @typedef {object} TransferResponse
 * @property {string} [id] - The id of the command.
 * @property {string} [state] - The state of the command.
 * @property {string} [dateIssued] - The date/time that this command was issued. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {TransferInitiator} [initiator] - The initiator of the command.
 * @property {TransferResponseModifiedBy} [modifiedBy] - The user or entity that modified the command.
 * @property {TransferDestination} [destination] - The destination of the command.
 * @property {string} [transferType] - The type of transfer to perform.
 */
 
/**
 * @typedef {object} TransferResponseModifiedBy
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} User
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {Division} [division] - The division to which this entity belongs.
 * @property {Chat} [chat]
 * @property {string} [department]
 * @property {string} [email]
 * @property {Contact[]} [primaryContactInfo] - Auto populated from addresses.
 * @property {Contact[]} [addresses] - Email addresses and phone numbers for this user
 * @property {string} [state] - The current state for this user.
 * @property {string} [title]
 * @property {string} [username]
 * @property {User} [manager]
 * @property {Image[]} [images]
 * @property {number} version - Required when updating a user, this value should be the current version of the user.  The current version can be obtained with a GET on the user before doing a PATCH.
 * @property {string[]} [certifications]
 * @property {Biography} [biography]
 * @property {EmployerInfo} [employerInfo]
 * @property {string} [preferredName] - Preferred full name of the agent
 * @property {RoutingStatus} [routingStatus] - ACD routing status
 * @property {UserPresence} [presence] - Active presence
 * @property {UserPresence} [integrationPresence] - Integration presence
 * @property {UserConversationSummary} [conversationSummary] - Summary of conversion statistics for conversation types.
 * @property {OutOfOffice} [outOfOffice] - Determine if out of office is enabled
 * @property {Geolocation} [geolocation] - Current geolocation position
 * @property {UserStations} [station] - Effective, default, and last station information
 * @property {UserAuthorization} [authorization] - Roles and permissions assigned to the user
 * @property {string[]} [profileSkills] - Profile skills possessed by the user
 * @property {Location[]} [locations] - The user placement at each site location.
 * @property {Group[]} [groups] - The groups the user is a member of
 * @property {Team} [team] - The team the user is a member of
 * @property {WorkPlanBidRanks} [workPlanBidRanks] - The WFM work plan bid rank settings for the user
 * @property {UserRoutingSkill[]} [skills] - Routing (ACD) skills possessed by the user
 * @property {UserRoutingLanguage[]} [languages] - Routing (ACD) languages possessed by the user
 * @property {boolean} [acdAutoAnswer] - acd auto answer
 * @property {string} [languagePreference] - preferred language by the user
 * @property {OAuthLastTokenIssued} [lastTokenIssued]
 * @property {string} [dateLastLogin] - The last time the user logged in using username and password. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateWelcomeSent] - The date & time the user was sent their welcome email. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} UserAuthorization
 * @property {DomainRole[]} [roles]
 * @property {DomainRole[]} [unusedRoles] - A collection of the roles the user is not using
 * @property {string[]} [permissions] - A collection of the permissions granted by all assigned roles
 * @property {ResourcePermissionPolicy[]} [permissionPolicies] - The policies configured for assigned permissions.
 */
 
/**
 * @typedef {object} UserConversationSummary
 * @property {string} [userId]
 * @property {MediaSummary} [call]
 * @property {MediaSummary} [callback]
 * @property {MediaSummary} [email]
 * @property {MediaSummary} [message]
 * @property {MediaSummary} [chat]
 * @property {MediaSummary} [socialExpression]
 * @property {MediaSummary} [video]
 */
 
/**
 * @typedef {object} UserPresence
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [source] - Deprecated - The sourceID field should be used as a replacement.
 * @property {string} [sourceId] - Represents the ID of a registered source
 * @property {boolean} [primary] - A boolean used to tell whether or not to set this presence source as the primary on a PATCH
 * @property {PresenceDefinition} [presenceDefinition]
 * @property {string} [message]
 * @property {string} [modifiedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} UserReferenceWithName
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Represents an organization language assigned to a user. When assigning to a user specify the organization language id as the id.
 * @typedef {object} UserRoutingLanguage
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {number} [proficiency] - A rating from 0.0 to 5.0 that indicates how fluent an agent is in a particular language. ACD interactions are routed to agents with higher proficiency ratings.
 * @property {string} [state] - Activate or deactivate this routing language.
 * @property {string} [languageUri] - URI to the organization language used by this user language.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Represents an organization skill assigned to a user. When assigning to a user specify the organization skill id as the id.
 * @typedef {object} UserRoutingSkill
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {number} [proficiency] - A rating from 0.0 to 5.0 that indicates how adept an agent is at a particular skill. When "Best available skills" is enabled for a queue in Genesys Cloud, ACD interactions in that queue are routed to agents with higher proficiency ratings.
 * @property {string} [state] - Activate or deactivate this routing skill.
 * @property {string} [skillUri] - URI to the organization skill used by this user skill.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} UserStation
 * @property {string} [id] - A globally unique identifier for this station
 * @property {string} [name]
 * @property {string} [type]
 * @property {User} [associatedUser]
 * @property {string} [associatedDate] - Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {User} [defaultUser]
 * @property {object} [providerInfo] - Provider-specific info for this station, e.g. { "edgeGroupId": "ffe7b15c-a9cc-4f4c-88f5-781327819a49" }
 * @property {number} [webRtcCallAppearances] - The number of call appearances on the station.
 */
 
/**
 * @typedef {object} UserStations
 * @property {UserStation} [associatedStation] - Current associated station for this user.
 * @property {UserStation} [effectiveStation] - The station where the user can be reached based on their default and associated station.
 * @property {UserStation} [defaultStation] - Default station to be used if not associated with a station.
 * @property {UserStation} [lastAssociatedStation] - Last associated station for this user.
 */
 
/**
 * @typedef {object} Video
 * @property {string} [state] - The connection state of this communication.
 * @property {string} [initialState] - The initial connection state of this communication.
 * @property {string} [id] - A globally unique identifier for this communication.
 * @property {string} [context] - The room id context (xmpp jid) for the conference session.
 * @property {boolean} [audioMuted] - Indicates whether this participant has muted their outgoing audio.
 * @property {boolean} [videoMuted] - Indicates whether this participant has muted/paused their outgoing video.
 * @property {boolean} [sharingScreen] - Indicates whether this participant is sharing their screen to the session.
 * @property {number} [peerCount] - The number of peer participants from the perspective of the participant in the conference.
 * @property {string} [disconnectType] - System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.
 * @property {string} [startAlertingTime] - The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [connectedTime] - The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [disconnectedTime] - The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [provider] - The source provider for the video.
 * @property {string} [peerId] - The id of the peer communication corresponding to a matching leg for this communication.
 * @property {string[]} [msids] - List of media stream ids
 * @property {Address} [self] - Address and name data for a call endpoint.
 * @property {Wrapup} [wrapup] - Call wrap up or disposition data.
 * @property {AfterCallWork} [afterCallWork] - After-call work for the communication.
 * @property {boolean} [afterCallWorkRequired] - Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.
 */
 
/**
 * @typedef {object} VisibilityCondition
 * @property {string} [combiningOperation]
 * @property {object[]} [predicates] - A list of strings, each representing the location in the form of the Answer Option to depend on. In the format of "/form/questionGroup/{questionGroupIndex}/question/{questionIndex}/answer/{answerIndex}" or, to assume the current question group, "../question/{questionIndex}/answer/{answerIndex}". Note: Indexes are zero-based
 */
 
/**
 * @typedef {object} Voicemail
 * @property {string} [id] - The voicemail id
 * @property {string} [uploadStatus] - current state of the voicemail upload
 */
 
/**
 * @typedef {object} VoicemailCopyRecord
 * @property {User} [user] - The user that the voicemail message was copied to/from
 * @property {Group} [group] - The group that the voicemail message was copied to/from
 * @property {string} [date] - The date when the voicemail was copied. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} VoicemailGroupPolicy
 * @property {string} [name]
 * @property {Group} [group] - The group associated with the policy
 * @property {boolean} [enabled] - Whether voicemail is enabled for the group
 * @property {boolean} [sendEmailNotifications] - Whether email notifications are sent to group members when a new voicemail is received
 * @property {boolean} [disableEmailPii] - Removes any PII from group emails. This is overridden by the analogous organization configuration value. This is always true if HIPAA is enabled or unknown for an organization.
 * @property {boolean} [includeEmailTranscriptions] - Whether to include the voicemail transcription in a group notification email
 * @property {string} [languagePreference] - The language preference for the group.  Used for group voicemail transcription
 * @property {GroupEmailPolicy} [emailPolicy] - The email policy for the group
 * @property {number} [rotateCallsSecs] - How many seconds to ring before rotating to the next member in the group
 * @property {number} [stopRingingAfterRotations] - How many rotations to go through
 * @property {string} [overflowGroupId] - A fallback group to contact when all of the members in this group did not answer the call.
 * @property {string} [groupAlertType] - Specifies if the members in this group should be contacted randomly, in a specific order, or by round-robin.
 * @property {string} [interactiveResponsePromptId] - The prompt to use when connecting a user to a Group Ring call
 * @property {boolean} [interactiveResponseRequired] - Whether user should be prompted with a confirmation prompt when connecting to a Group Ring call
 */
 
/**
 * @typedef {object} VoicemailMessage
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {Conversation} [conversation] - The conversation that the voicemail message is associated with
 * @property {boolean} [read] - Whether the voicemail message is marked as read
 * @property {number} [audioRecordingDurationSeconds] - The voicemail message's audio recording duration in seconds
 * @property {number} [audioRecordingSizeBytes] - The voicemail message's audio recording size in bytes
 * @property {string} [transcription] - The transcription of the voicemail's audio
 * @property {string} [createdDate] - The date the voicemail message was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [modifiedDate] - The date the voicemail message was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [deletedDate] - The date the voicemail message deleted property was set to true. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [callerAddress] - The caller address
 * @property {string} [callerName] - Optionally the name of the caller that left the voicemail message if the caller was a known user
 * @property {User} [callerUser] - Optionally the user that left the voicemail message if the caller was a known user
 * @property {boolean} [deleted] - Whether the voicemail message has been marked as deleted
 * @property {string} [note] - An optional note
 * @property {User} [user] - The user that the voicemail message belongs to or null which means the voicemail message belongs to a group or queue
 * @property {Group} [group] - The group that the voicemail message belongs to or null which means the voicemail message belongs to a user or queue
 * @property {Queue} [queue] - The queue that the voicemail message belongs to or null which means the voicemail message belongs to a user or group
 * @property {VoicemailCopyRecord} [copiedFrom] - Represents where this voicemail message was copied from
 * @property {VoicemailCopyRecord[]} [copiedTo] - Represents where this voicemail has been copied to
 * @property {VoicemailRetentionPolicy} [deleteRetentionPolicy] - The retention policy for this voicemail when deleted is set to true
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} VoicemailOrganizationPolicy
 * @property {boolean} [enabled] - Whether voicemail is enabled for this organization
 * @property {number} [alertTimeoutSeconds] - The organization's default number of seconds to ring a user's phone before a call is transferred to voicemail
 * @property {PINConfiguration} [pinConfiguration] - The configuration for user PINs to access their voicemail from a phone
 * @property {string} [voicemailExtension] - The extension for voicemail retrieval.  The default value is *86.
 * @property {boolean} [pinRequired] - If this is true, a PIN is required when accessing a user's voicemail from a phone.
 * @property {boolean} [interactiveResponseRequired] - Whether user should be prompted with a confirmation prompt when connecting to a Group Ring call
 * @property {boolean} [sendEmailNotifications] - Whether email notifications are sent for new voicemails in the organization. If false, new voicemail email notifications are not be sent for the organization overriding any user or group setting.
 * @property {boolean} [includeEmailTranscriptions] - Whether to include the voicemail transcription in the notification email
 * @property {boolean} [disableEmailPii] - Removes any PII from emails. This overrides any analogous group configuration value. This is always true if HIPAA is enabled or unknown for an organization.
 * @property {number} [maximumRecordingTimeSeconds] - Default value for the maximum length of time in seconds of a recorded voicemail
 * @property {string} [modifiedDate] - The date the policy was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * Governs how the voicemail is retained
 * @typedef {object} VoicemailRetentionPolicy
 * @property {string} [voicemailRetentionPolicyType] - The retention policy type
 * @property {number} [numberOfDays] - If retentionPolicyType == RETAIN_WITH_TTL, then this value represents the number of days for the TTL
 */
 
/**
 * @typedef {object} VoicemailSearchCriteria
 * @property {string} [endValue] - The end value of the range. This field is used for range search types.
 * @property {string[]} [values] - A list of values for the search to match against
 * @property {string} [startValue] - The start value of the range. This field is used for range search types.
 * @property {string} [value] - A value for the search to match against
 * @property {string} [operator] - How to apply this search criteria against other criteria
 * @property {VoicemailSearchCriteria[]} [group] - Groups multiple conditions
 * @property {string} [dateFormat] - Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.
 * @property {string[]} [fields] - Field names to search against
 * @property {string} type - Search Type
 */
 
/**
 * @typedef {object} VoicemailSearchRequest
 * @property {string} [sortOrder] - The sort order for results
 * @property {string} [sortBy] - The field in the resource that you want to sort the results by
 * @property {number} [pageSize] - The number of results per page
 * @property {number} [pageNumber] - The page of resources you want to retrieve
 * @property {SearchSort[]} [sort] - Multi-value sort order, list of multiple sort values
 * @property {string[]} [expand] - Provides more details about a specified resource
 * @property {VoicemailSearchCriteria[]} [query]
 */
 
/**
 * @typedef {object} VoicemailUserPolicy
 * @property {boolean} [enabled] - Whether the user has voicemail enabled
 * @property {number} [alertTimeoutSeconds] - The number of seconds to ring the user's phone before a call is transfered to voicemail
 * @property {string} [pin] - The user's PIN to access their voicemail. This property is only used for updates and never provided otherwise to ensure security
 * @property {string} [modifiedDate] - The date the policy was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {boolean} [sendEmailNotifications] - Whether email notifications are sent to the user when a new voicemail is received
 */
 
/**
 * @typedef {object} WorkPlanBidRanks
 * @property {string} [id] - The globally unique identifier for the user.
 * @property {number} [workPlanBiddingPerformance] - Work plan bidding agent performance ranking. The range of values is between 0 and 9999.
 * @property {string} [biddingTieBreaker] - Custom agent ranking metric that some customers can use.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Wrapup
 * @property {string} [code] - The user configured wrap up code id.
 * @property {string} [name] - The user configured wrap up code name.
 * @property {string} [notes] - Text entered by the agent to describe the call or disposition.
 * @property {string[]} [tags] - List of tags selected by the agent to describe the call or disposition.
 * @property {number} [durationSeconds] - The length of time in seconds that the agent spent doing after call work.
 * @property {string} [endTime] - The timestamp when the wrapup was finished. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {boolean} [provisional] - Indicates if this is a pending save and should not require a code to be specified.  This allows someone to save some temporary wrapup that will be used later.
 */
 
/**
 * @typedef {object} WritableDivision
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [selfUri] - The URI for this object
 */
 

/**
 * Voicemail - Mailbox, messages, policy
 * @class Voicemail
 */
class VoicemailAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the Voicemail class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * List voicemail messages
	 * @async
	 * @param {string} groupId - Group ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/groups/{groupId}/messages" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getVoicemailGroupMessages(groupId, query) {
		const endpointPath = "/api/v2/voicemail/groups/{groupId}/messages";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List voicemail messages
	 * @async
	 * @param {string} queueId - Queue ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/queues/{queueId}/messages" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getVoicemailQueueMessages(queueId, query) {
		const endpointPath = "/api/v2/voicemail/queues/{queueId}/messages";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(queueId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "queueId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.queueId = queueId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List voicemail messages
	 * @async
	 * @param {string} userId - User ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/users/{userId}/messages" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getVoicemailUserMessages(userId, query) {
		const endpointPath = "/api/v2/voicemail/users/{userId}/messages";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a group's voicemail policy
	 * @async
	 * @param {string} groupId - Group ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/groups/{groupId}/policy" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getVoicemailGroupPolicy(groupId) {
		const endpointPath = "/api/v2/voicemail/groups/{groupId}/policy";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a group's voicemail policy
	 * @async
	 * @param {string} groupId - Group ID
	 * @param {VoicemailGroupPolicy} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/groups/{groupId}/policy" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchVoicemailGroupPolicy(groupId, body) {
		const endpointPath = "/api/v2/voicemail/groups/{groupId}/policy";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the current user's mailbox information
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/mailbox" endpoint.
	 */
	getVoicemailMailbox() {
		const endpointPath = "/api/v2/voicemail/mailbox";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the current user's mailbox information
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/me/mailbox" endpoint.
	 */
	getVoicemailMeMailbox() {
		const endpointPath = "/api/v2/voicemail/me/mailbox";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the group's mailbox information
	 * @async
	 * @param {string} groupId - groupId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/groups/{groupId}/mailbox" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getVoicemailGroupMailbox(groupId) {
		const endpointPath = "/api/v2/voicemail/groups/{groupId}/mailbox";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(groupId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "groupId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.groupId = groupId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a user's mailbox information
	 * @async
	 * @param {string} userId - userId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/users/{userId}/mailbox" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getVoicemailUserMailbox(userId) {
		const endpointPath = "/api/v2/voicemail/users/{userId}/mailbox";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List voicemail messages
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/me/messages" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getVoicemailMeMessages(query) {
		const endpointPath = "/api/v2/voicemail/me/messages";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the current user's voicemail policy
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/me/policy" endpoint.
	 */
	getVoicemailMePolicy() {
		const endpointPath = "/api/v2/voicemail/me/policy";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the current user's voicemail policy
	 * @async
	 * @param {VoicemailUserPolicy} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/me/policy" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchVoicemailMePolicy(body) {
		const endpointPath = "/api/v2/voicemail/me/policy";
		const endpointMethod = "PATCH";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a voicemail message
	 * @async
	 * @param {string} messageId - Message ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expand] -  If the caller is a known user, which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/messages/{messageId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getVoicemailMessage(messageId, query) {
		const endpointPath = "/api/v2/voicemail/messages/{messageId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messageId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messageId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messageId = messageId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a voicemail message
	 * @async
	 * @param {string} messageId - Message ID
	 * @param {VoicemailMessage} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/messages/{messageId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putVoicemailMessage(messageId, body) {
		const endpointPath = "/api/v2/voicemail/messages/{messageId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messageId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messageId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messageId = messageId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a voicemail message.
	 * @async
	 * @param {string} messageId - Message ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/messages/{messageId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteVoicemailMessage(messageId) {
		const endpointPath = "/api/v2/voicemail/messages/{messageId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messageId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messageId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messageId = messageId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a voicemail message
	 * @async
	 * @param {string} messageId - Message ID
	 * @param {VoicemailMessage} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/messages/{messageId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchVoicemailMessage(messageId, body) {
		const endpointPath = "/api/v2/voicemail/messages/{messageId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messageId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messageId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messageId = messageId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get media playback URI for this voicemail message
	 * @async
	 * @param {string} messageId - Message ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.formatId] -  The desired media format.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/messages/{messageId}/media" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getVoicemailMessageMedia(messageId, query) {
		const endpointPath = "/api/v2/voicemail/messages/{messageId}/media";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messageId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messageId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("formatId" in query && this.#checkJSONSchemaType(query["formatId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "formatId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messageId = messageId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * List voicemail messages
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.ids] -  An optional comma separated list of VoicemailMessage ids
	 * @param {string[]} [query.expand] -  If the caller is a known user, which fields, if any, to expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/messages" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getVoicemailMessages(query) {
		const endpointPath = "/api/v2/voicemail/messages";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("ids" in query && this.#checkJSONSchemaType(query["ids"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ids", "string");
			}
			if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Copy a voicemail message to a user or group
	 * @async
	 * @param {CopyVoicemailMessage} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/messages" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postVoicemailMessages(body) {
		const endpointPath = "/api/v2/voicemail/messages";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete all voicemail messages
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/messages" endpoint.
	 */
	deleteVoicemailMessages() {
		const endpointPath = "/api/v2/voicemail/messages";
		const endpointMethod = "DELETE";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a policy
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/policy" endpoint.
	 */
	getVoicemailPolicy() {
		const endpointPath = "/api/v2/voicemail/policy";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a policy
	 * @async
	 * @param {VoicemailOrganizationPolicy} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/policy" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putVoicemailPolicy(body) {
		const endpointPath = "/api/v2/voicemail/policy";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a user's voicemail policy
	 * @async
	 * @param {string} userId - User ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/userpolicies/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getVoicemailUserpolicy(userId) {
		const endpointPath = "/api/v2/voicemail/userpolicies/{userId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a user's voicemail policy
	 * @async
	 * @param {string} userId - User ID
	 * @param {VoicemailUserPolicy} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/userpolicies/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putVoicemailUserpolicy(userId, body) {
		const endpointPath = "/api/v2/voicemail/userpolicies/{userId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a user's voicemail policy
	 * @async
	 * @param {string} userId - User ID
	 * @param {VoicemailUserPolicy} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/userpolicies/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchVoicemailUserpolicy(userId, body) {
		const endpointPath = "/api/v2/voicemail/userpolicies/{userId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Search voicemails using the q64 value returned from a previous search
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} query.q64 -  q64
	 * @param {string[]} [query.expand] -  expand
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getVoicemailSearch(query) {
		const endpointPath = "/api/v2/voicemail/search";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("q64" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "q64");
		}

		if (this.#checkJSONSchemaType(query["q64"], "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "q64", "string");
		}

		if ("expand" in query && this.#checkJSONSchemaType(query["expand"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expand", "array");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Search voicemails
	 * @async
	 * @param {VoicemailSearchRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/voicemail/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postVoicemailSearch(body) {
		const endpointPath = "/api/v2/voicemail/search";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { VoicemailAPI };