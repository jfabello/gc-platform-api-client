/**
 * @module gc-platform-api-outbound
 * @documentation https://developer.genesys.cloud/routing/outbound/
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.264Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} AddressableEntityRef
 * @property {string} [id]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} Agent
 * @property {string} [stage] - The current stage for this agent
 */
 
/**
 * @typedef {object} Alteration
 * @property {string} [type] - Range type (Exclusion: used to exclude a specific time within the recurrence. Inclusion: used to include a specific time within the recurrence which will execute in addition to the normal recurrence. If both an exclusion and inclusion are specified, the inclusion will take precedence over the exclusion.)
 * @property {string} [start] - The start date of an alteration range as an ISO-8601 string
 * @property {string} [end] - The end date of an alteration range as an ISO-8601 string
 */
 
/**
 * @typedef {object} AppendToDncActionSettings
 * @property {boolean} expire - Whether to expire the record appended to the DNC list.
 * @property {string} [expirationDuration] - If 'expire' is set to true, how long to keep the record.
 * @property {string} [listType] - The Dnc List Type to append entries to
 */
 
/**
 * @typedef {object} AttemptLimits
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {number} [maxAttemptsPerContact] - The maximum number of times a contact can be called within the resetPeriod. Required if maxAttemptsPerNumber is not defined.
 * @property {number} [maxAttemptsPerNumber] - The maximum number of times a phone number can be called within the resetPeriod. Required if maxAttemptsPerContact is not defined.
 * @property {string} [timeZoneId] - If the resetPeriod is TODAY, this specifies the timezone in which TODAY occurs. Required if the resetPeriod is TODAY.
 * @property {string} [resetPeriod] - After how long the number of attempts will be set back to 0. Defaults to NEVER.
 * @property {object} [recallEntries] - Configuration for recall attempts.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} AtzmTimeSlot
 * @property {string} [earliestCallableTime] - The earliest time to dial a contact. Valid format is HH:mm
 * @property {string} [latestCallableTime] - The latest time to dial a contact. Valid format is HH:mm
 */
 
/**
 * @typedef {object} AtzmTimeSlotWithTimeZone
 * @property {string} [earliestCallableTime] - The earliest time to dial a contact. Valid format is HH:mm
 * @property {string} [latestCallableTime] - The latest time to dial a contact. Valid format is HH:mm
 * @property {string} [timeZoneId] - The time zone to use for contacts that cannot be mapped.
 */
 
/**
 * @typedef {object} AutomaticTimeZoneMappingSettings
 * @property {CallableWindow[]} [callableWindows] - The time intervals to use for automatic time zone mapping.
 * @property {string[]} [supportedCountries] - The countries that are supported for automatic time zone mapping.
 */
 
/**
 * @typedef {object} CallableTime
 * @property {CampaignTimeSlot[]} timeSlots - The time intervals for which it is acceptable to place outbound calls.
 * @property {string} timeZoneId - The time zone for the time slots; for example, Africa/Abidjan
 */
 
/**
 * @typedef {object} CallableTimeSet
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the CallableTimeSet.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {CallableTime[]} callableTimes - The list of CallableTimes for which it is acceptable to place outbound calls.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CallableWindow
 * @property {AtzmTimeSlot} [mapped] - The time interval to place outbound calls, for contacts that can be mapped to a time zone.
 * @property {AtzmTimeSlotWithTimeZone} [unmapped] - The time interval and time zone to place outbound calls, for contacts that cannot be mapped to a time zone.
 */
 
/**
 * @typedef {object} Campaign
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the Campaign.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {DomainEntityRef} contactList - The ContactList for this Campaign to dial.
 * @property {DomainEntityRef} [queue] - The Queue for this Campaign to route calls to. Required for all dialing modes except agentless.
 * @property {string} dialingMode - The strategy this Campaign will use for dialing.
 * @property {DomainEntityRef} [script] - The Script to be displayed to agents that are handling outbound calls. Required for all dialing modes except agentless.
 * @property {DomainEntityRef} [edgeGroup] - The EdgeGroup that will place the calls. Required for all dialing modes except preview.
 * @property {DomainEntityRef} [site] - The identifier of the site to be used for dialing; can be set in place of an edge group.
 * @property {string} [campaignStatus] - The current status of the Campaign. A Campaign may be turned 'on' or 'off'. Required for updates.
 * @property {PhoneColumn[]} phoneColumns - The ContactPhoneNumberColumns on the ContactList that this Campaign should dial.
 * @property {number} [abandonRate] - The targeted compliance abandon rate percentage. Required for power and predictive campaigns.
 * @property {DomainEntityRef[]} [dncLists] - DncLists for this Campaign to check before placing a call.
 * @property {DomainEntityRef} [callableTimeSet] - The callable time set for this campaign to check before placing a call.
 * @property {DomainEntityRef} [callAnalysisResponseSet] - The call analysis response set to handle call analysis results from the edge. Required for all dialing modes except preview.
 * @property {RestErrorDetail[]} [errors] - A list of current error conditions associated with the campaign.
 * @property {string} callerName - The caller id name to be displayed on the outbound call.
 * @property {string} callerAddress - The caller id phone number to be displayed on the outbound call.
 * @property {number} [outboundLineCount] - The number of outbound lines to be concurrently dialed. Only applicable to non-preview campaigns; only required for agentless.
 * @property {DomainEntityRef[]} [ruleSets] - Rule sets to be applied while this campaign is dialing.
 * @property {boolean} [skipPreviewDisabled] - Whether or not agents can skip previews without placing a call. Only applicable for preview campaigns.
 * @property {number} [previewTimeOutSeconds] - The number of seconds before a call will be automatically placed on a preview. A value of 0 indicates no automatic placement of calls. Only applicable to preview campaigns.
 * @property {boolean} [alwaysRunning] - Indicates (when true) that the campaign will remain on after contacts are depleted, allowing additional contacts to be appended/added to the contact list and processed by the still-running campaign. The campaign can still be turned off manually.
 * @property {ContactSort} [contactSort] - The order in which to sort contacts for dialing, based on a column.
 * @property {ContactSort[]} [contactSorts] - The order in which to sort contacts for dialing, based on up to four columns.
 * @property {number} [noAnswerTimeout] - How long to wait before dispositioning a call as 'no-answer'. Default 30 seconds. Only applicable to non-preview campaigns.
 * @property {string} [callAnalysisLanguage] - The language the edge will use to analyze the call.
 * @property {number} [priority] - The priority of this campaign relative to other campaigns that are running on the same queue. 5 is the highest priority, 1 the lowest.
 * @property {DomainEntityRef[]} [contactListFilters] - Filter to apply to the contact list before dialing. Currently a campaign can only have one filter applied.
 * @property {DomainEntityRef} [division] - The division this campaign belongs to.
 * @property {string} [agentOwnedColumn] - Name of the contact list column containing the id of the agent who owns the record. Only applicable to preview campaigns.
 * @property {DynamicContactQueueingSettings} [dynamicContactQueueingSettings] - Settings for dynamic queueing of contacts.
 * @property {string[]} [skillColumns] - The skill columns on the ContactList that this Campaign should take into account when dialing
 * @property {number} [maxCallsPerAgent] - The maximum number of calls that can be placed per agent on this campaign
 * @property {number} [maxCallsPerAgentDecimal] - The maximum number of calls that can be placed per agent on this campaign with decimal precision
 * @property {boolean} [callbackAutoAnswer] - The option manages the auto-answer callback calls
 * @property {DynamicLineBalancingSettings} [dynamicLineBalancingSettings] - Dynamic line balancing settings
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * Campaign patch request
 * @typedef {object} CampaignPatchRequest
 * @property {number} [outboundLineCount] - The number of outbound lines to be concurrently dialed.
 * @property {number} [abandonRate] - The targeted compliance abandon rate percentage
 * @property {number} [maxCallsPerAgent] - The maximum number of calls that can be placed per agent on this campaign
 * @property {DynamicLineBalancingSettingsPatchRequest} [dynamicLineBalancingSettings] - Dynamic line balancing settings
 * @property {AddressableEntityRef} [queue] - The Queue for this Campaign to route calls to.
 */
 
/**
 * @typedef {object} CampaignRule
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the CampaignRule.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {CampaignRuleEntities} campaignRuleEntities - The list of entities that this CampaignRule monitors.
 * @property {CampaignRuleCondition[]} campaignRuleConditions - The list of conditions that are evaluated on the entities.
 * @property {CampaignRuleAction[]} campaignRuleActions - The list of actions that are executed if the conditions are satisfied.
 * @property {boolean} [matchAnyConditions]
 * @property {boolean} [enabled] - Whether or not this CampaignRule is currently enabled. Required on updates.
 * @property {string} [campaignRuleProcessing] - CampaignRule processing algorithm
 * @property {CampaignRuleConditionGroup[]} [conditionGroups] - List of condition groups that are evaluated, used only with campaignRuleProcessing="v2"
 * @property {CampaignRuleExecutionSettings} [executionSettings] - CampaignRule execution settings
 * @property {CampaignRuleWarning[]} [warnings] - A list of current warning conditions associated with the campaign rule.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CampaignRuleAction
 * @property {string} [id]
 * @property {CampaignRuleParameters} [parameters] - The parameters for the CampaignRuleAction. Required for certain actionTypes.
 * @property {string} actionType - The action to take on the campaignRuleActionEntities.
 * @property {CampaignRuleActionEntities} campaignRuleActionEntities - The list of entities that this action will apply to.
 */
 
/**
 * @typedef {object} CampaignRuleActionEntities
 * @property {DomainEntityRef[]} [campaigns] - The list of campaigns for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a campaign.
 * @property {DomainEntityRef[]} [sequences] - The list of sequences for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a sequence.
 * @property {DomainEntityRef[]} [emailCampaigns] - The list of Email campaigns for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a Email campaign.
 * @property {DomainEntityRef[]} [smsCampaigns] - The list of SMS campaigns for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a SMS campaign.
 * @property {boolean} [useTriggeringEntity] - If true, the CampaignRuleAction will apply to the same entity that triggered the CampaignRuleCondition.
 */
 
/**
 * @typedef {object} CampaignRuleCondition
 * @property {string} [id]
 * @property {CampaignRuleParameters} parameters - The parameters for the CampaignRuleCondition.
 * @property {string} conditionType - The type of condition to evaluate.
 */
 
/**
 * @typedef {object} CampaignRuleConditionGroup
 * @property {boolean} matchAnyConditions - Whether or not this condition group should be evaluated as true if any of sub conditions is matched
 * @property {CampaignRuleCondition[]} conditions - The parameters for the CampaignRuleCondition.
 */
 
/**
 * @typedef {object} CampaignRuleEntities
 * @property {DomainEntityRef[]} [campaigns] - The list of campaigns for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a campaign.
 * @property {DomainEntityRef[]} [sequences] - The list of sequences for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a sequence.
 * @property {DomainEntityRef[]} [emailCampaigns] - The list of Email campaigns for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a Email campaign.
 * @property {DomainEntityRef[]} [smsCampaigns] - The list of SMS campaigns for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a SMS campaign.
 */
 
/**
 * @typedef {object} CampaignRuleExecutionSettings
 * @property {string} frequency - Execution control frequency
 * @property {string} [timeZoneId] - The time zone for the execution control frequency="oncePerDay"; for example, Africa/Abidjan. This property is ignored when frequency is not "oncePerDay"
 */
 
/**
 * @typedef {object} CampaignRuleParameters
 * @property {string} [operator] - The operator for comparison. Required for a CampaignRuleCondition.
 * @property {string} [value] - The value for comparison. Required for a CampaignRuleCondition.
 * @property {string} [priority] - The priority to set a campaign to. Required for the 'setCampaignPriority' action.
 * @property {string} [dialingMode] - The dialing mode to set a campaign to. Required for the 'setCampaignDialingMode' action.
 * @property {number} [abandonRate] - The abandon rate to set a campaign to. Required for the 'setCampaignAbandonRate' action.
 * @property {number} [outboundLineCount] - The  number of outbound lines to set a campaign to. Required for the 'setCampaignNumberOfLines' action.
 * @property {number} [relativeWeight] - The relative weight to set a campaign to. Required for the 'setCampaignWeight' action.
 * @property {number} [maxCallsPerAgent] - The maximum number of calls per agent to set a campaign to. Required for the 'setCampaignMaxCallsPerAgent' action.
 * @property {DomainEntityRef} [queue] - The queue a campaign to. Required for the 'changeCampaignQueue' action.
 * @property {number} [messagesPerMinute] - The number of messages per minute to set a messaging campaign to.
 * @property {number} [smsMessagesPerMinute] - The number of messages per minute to set a SMS messaging campaign to.
 * @property {number} [emailMessagesPerMinute] - The number of messages per minute to set a Email messaging campaign to.
 * @property {DomainEntityRef} [smsContentTemplate] - The content template to set a SMS campaign to.
 * @property {DomainEntityRef} [emailContentTemplate] - The content template to set a Email campaign to.
 */
 
/**
 * @typedef {object} CampaignRuleWarning
 * @property {string} code - Warning code for this warning.
 * @property {string} message - Warning message for this warning.
 * @property {CampaignRuleWarningParameters} [params] - Additional warning information
 */
 
/**
 * @typedef {object} CampaignRuleWarningParameters
 * @property {string} [actionId] - ID of action
 * @property {string} [conditionId] - ID of condition
 * @property {string} [actionType] - Type of action
 * @property {string} [conditionType] - Type of condition
 */
 
/**
 * @typedef {object} CampaignSchedule
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {ScheduleInterval[]} intervals - A list of intervals during which to run the associated Campaign.
 * @property {Reoccurrence[]} [recurrences] - Recurring schedules of the campaign
 * @property {string} [timeZone] - The time zone for this CampaignSchedule. Defaults to UTC if empty or not provided. See here for a list of valid time zones https://www.iana.org/time-zones
 * @property {DivisionedDomainEntityRef} campaign - The Campaign that this CampaignSchedule is for.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CampaignSequence
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {DomainEntityRef[]} campaigns - The ordered list of Campaigns that this CampaignSequence will run.
 * @property {number} currentCampaign - A zero-based index indicating which Campaign this CampaignSequence is currently on.
 * @property {string} status - The current status of the CampaignSequence. A CampaignSequence can be turned 'on' or 'off'.
 * @property {string} [stopMessage] - A message indicating if and why a CampaignSequence has stopped unexpectedly.
 * @property {boolean} [repeat] - Indicates if a sequence should repeat from the beginning after the last campaign completes. Default is false.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} CampaignTimeSlot
 * @property {string} startTime - The start time of the interval as an ISO-8601 string, i.e. HH:mm:ss
 * @property {string} stopTime - The end time of the interval as an ISO-8601 string, i.e. HH:mm:ss
 * @property {number} day - The day of the interval. Valid values: [1-7], representing Monday through Sunday
 */
 
/**
 * @typedef {object} Column
 * @property {string} [columnName] - Column name. Mandatory for Fixed position/length file format.
 * @property {number} [columnNumber] - 0 based column number in delimited file format
 * @property {number} [startPosition] - Zero-based position of the first column's character. Mandatory for Fixed position/length file format.
 * @property {number} [length] - Column width. Mandatory for Fixed position/length file format.
 */
 
/**
 * @typedef {object} ColumnDataTypeSpecification
 * @property {string} [columnName] - The column name of a column selected for dynamic queueing
 * @property {string} [columnDataType] - The data type of the column selected for dynamic queueing (TEXT, NUMERIC or TIMESTAMP)
 * @property {number} [min] - The minimum length of the numeric column selected for dynamic queueing
 * @property {number} [max] - The maximum length of the numeric column selected for dynamic queueing
 * @property {number} [maxLength] - The maximum length of the text column selected for dynamic queueing
 */
 
/**
 * @typedef {object} Condition
 * @property {string} [type] - The type of the condition.
 * @property {boolean} [inverted] - If true, inverts the result of evaluating this Condition. Default is false.
 * @property {string} [attributeName] - An attribute name associated with this Condition. Required for a contactAttributeCondition.
 * @property {string} [value] - A value associated with this Condition. This could be text, a number, or a relative time. Not used for a DataActionCondition.
 * @property {string} [valueType] - The type of the value associated with this Condition. Not used for a DataActionCondition.
 * @property {string} [operator] - An operation with which to evaluate the Condition. Not used for a DataActionCondition.
 * @property {string[]} [codes] - List of wrap-up code identifiers. Required for a wrapupCondition.
 * @property {string} [property] - A value associated with the property type of this Condition. Required for a contactPropertyCondition.
 * @property {string} [propertyType] - The type of the property associated with this Condition. Required for a contactPropertyCondition.
 * @property {DomainEntityRef} [dataAction] - The Data Action to use for this condition. Required for a dataActionCondition.
 * @property {boolean} [dataNotFoundResolution] - The result of this condition if the data action returns a result indicating there was no data. Required for a DataActionCondition.
 * @property {string} [contactIdField] - The input field from the data action that the contactId will be passed to for this condition. Valid for a dataActionCondition.
 * @property {string} [callAnalysisResultField] - The input field from the data action that the callAnalysisResult will be passed to for this condition. Valid for a wrapup dataActionCondition.
 * @property {string} [agentWrapupField] - The input field from the data action that the agentWrapup will be passed to for this condition. Valid for a wrapup dataActionCondition.
 * @property {ContactColumnToDataActionFieldMapping[]} [contactColumnToDataActionFieldMappings] - A list of mappings defining which contact data fields will be passed to which data action input fields for this condition. Valid for a dataActionCondition.
 * @property {DataActionConditionPredicate[]} [predicates] - A list of predicates defining the comparisons to use for this condition. Required for a dataActionCondition.
 */
 
/**
 * @typedef {object} ConfigurationOverrides
 * @property {boolean} [priority] - Indicates whether or not the contact will be placed in front of the queue or at the end of the queue.
 */
 
/**
 * @typedef {object} ContactAddressConditionSettings
 * @property {string} operator - The operator to use when comparing address values.
 * @property {string} value - The value to compare against the contact's address.
 */
 
/**
 * @typedef {object} ContactAddressTypeConditionSettings
 * @property {string} operator - The operator to use when comparing the address types.
 * @property {string} value - The type value to compare against the contact column type.
 */
 
/**
 * @typedef {object} ContactBulkEditRequest
 * @property {string} [contactListFilterId] - Contact List Filter ID.
 * @property {ContactBulkSearchCriteria} [criteria] - Criteria to filter the contacts by.
 * @property {string[]} [contactIds] - Contact IDs to be bulk edited.
 * @property {DialerContact} [contact] - Contact object with details of fields used for patching.
 */
 
/**
 * @typedef {object} ContactBulkSearchCriteria
 * @property {ContactListFilterClause[]} [clauses] - Groups of conditions to filter the contacts by.
 * @property {string} [filterType] - How to join clauses together.
 */
 
/**
 * @typedef {object} ContactBulkSearchParameters
 * @property {string} [contactListFilterId] - Contact List Filter ID. Either this property or criteria is required.
 * @property {ContactBulkSearchCriteria} [criteria] - Criteria to filter the contacts by. Either this property or contactListFilterId is required.
 */
 
/**
 * @typedef {object} ContactCallbackRequest
 * @property {string} campaignId - Campaign identifier
 * @property {string} contactListId - Contact list identifier
 * @property {string} contactId - Contact identifier
 * @property {string} phoneColumn - Name of the phone column containing the number to be called
 * @property {string} schedule - The scheduled time for the callback as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ", example = "2016-01-02T16:59:59"
 */
 
/**
 * @typedef {object} ContactColumnConditionSettings
 * @property {string} columnName - The name of the contact list column to evaluate.
 * @property {string} operator - The operator to use when comparing values.
 * @property {string} value - The value to compare against the contact's data.
 * @property {string} valueType - The data type the value should be treated as.
 */
 
/**
 * @typedef {object} ContactColumnToDataActionFieldMapping
 * @property {string} contactColumnName - The name of a contact column whose data will be passed to the data action
 * @property {string} dataActionField - The name of an input field from the data action that the contact column data will be passed to
 */
 
/**
 * @typedef {object} ContactList
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {DomainEntityRef} [division] - The division this entity belongs to.
 * @property {string[]} columnNames - The names of the contact data columns.
 * @property {ContactPhoneNumberColumn[]} [phoneColumns] - Indicates which columns are phone numbers.
 * @property {EmailColumn[]} [emailColumns] - Indicates which columns are email addresses
 * @property {WhatsAppColumn[]} [whatsAppColumns] - Indicates which columns are whatsApp contacts
 * @property {ImportStatus} [importStatus] - The status of the import process.
 * @property {string} [previewModeColumnName] - A column to check if a contact should always be dialed in preview mode.
 * @property {string[]} [previewModeAcceptedValues] - The values in the previewModeColumnName column that indicate a contact should always be dialed in preview mode.
 * @property {number} [size] - The number of contacts in the ContactList.
 * @property {DomainEntityRef} [attemptLimits] - AttemptLimits for this ContactList.
 * @property {boolean} [automaticTimeZoneMapping] - Indicates if automatic time zone mapping is to be used for this ContactList.
 * @property {string} [zipCodeColumnName] - The name of contact list column containing the zip code for use with automatic time zone mapping. Only allowed if 'automaticTimeZoneMapping' is set to true.
 * @property {ColumnDataTypeSpecification[]} [columnDataTypeSpecifications] - The settings of the columns selected for dynamic queueing
 * @property {boolean} [trimWhitespace] - Whether to trim white space when importing a contactlist csv file, default value = true
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ContactListFilter
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the list.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {DomainEntityRef} [contactList] - The contact list the filter is based on. Required if sourceType is ContactList
 * @property {DomainEntityRef} [contactListTemplate] - The contact list template the filter is based on. Required if sourceType is ContactListTemplate
 * @property {string} [sourceType] - The source type the filter is based on.
 * @property {ContactListFilterClause[]} [clauses] - Groups of conditions to filter the contacts by.
 * @property {string} [filterType] - How to join clauses together.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ContactListFilterBulkRetrieveBody
 * @property {string[]} ids - The IDs of the Contact List Filters to retrieve.
 */
 
/**
 * @typedef {object} ContactListFilterClause
 * @property {string} [filterType] - How to join predicates together.
 * @property {ContactListFilterPredicate[]} [predicates] - Conditions to filter the contacts by.
 */
 
/**
 * @typedef {object} ContactListFilterPredicate
 * @property {string} [column] - Contact list column from the ContactListFilter's contactList.
 * @property {string} [columnType] - The type of data in the contact column.
 * @property {string} [operator] - The operator for this ContactListFilterPredicate.
 * @property {string} [value] - Value with which to compare the contact's data. This could be text, a number, or a relative time. A value for relative time should follow the format PxxDTyyHzzM, where xx, yy, and zz specify the days, hours and minutes. For example, a value of P01DT08H30M corresponds to 1 day, 8 hours, and 30 minutes from now. To specify a time in the past, include a negative sign before each numeric value. For example, a value of P-01DT-08H-30M corresponds to 1 day, 8 hours, and 30 minutes in the past. You can also do things like P01DT00H-30M, which would correspond to 23 hours and 30 minutes from now (1 day - 30 minutes).
 * @property {ContactListFilterRange} [range] - A range of values. Required for operators BETWEEN and IN.
 * @property {boolean} [inverted] - Inverts the result of the predicate (i.e., if the predicate returns true, inverting it will return false).
 */
 
/**
 * @typedef {object} ContactListFilterRange
 * @property {string} [min] - The minimum value of the range. Required for the operator BETWEEN.
 * @property {string} [max] - The maximum value of the range. Required for the operator BETWEEN.
 * @property {boolean} [minInclusive] - Whether or not to include the minimum in the range.
 * @property {boolean} [maxInclusive] - Whether or not to include the maximum in the range.
 * @property {string[]} [inSet] - A set of values that the contact data should be in. Required for the IN operator.
 */
 
/**
 * @typedef {object} ContactListingRequest
 * @property {string} [contactListFilterId] - Contact List Filter ID.
 * @property {ContactBulkSearchCriteria} [criteria] - Criteria to filter the contacts by.
 * @property {number} pageNumber - Page number.
 * @property {number} pageSize - Page size. The max that will be returned is 100.
 * @property {ContactSort[]} [contactSorts] - The order in which to sort contacts.
 */
 
/**
 * @typedef {object} ContactListTemplate
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {string[]} columnNames - The names of the contact data columns.
 * @property {ContactPhoneNumberColumn[]} [phoneColumns] - Indicates which columns are phone numbers.
 * @property {EmailColumn[]} [emailColumns] - Indicates which columns are email addresses
 * @property {WhatsAppColumn[]} [whatsAppColumns] - Indicates which columns are whatsApp contacts
 * @property {string} [previewModeColumnName] - A column to check if a contact should always be dialed in preview mode.
 * @property {string[]} [previewModeAcceptedValues] - The values in the previewModeColumnName column that indicate a contact should always be dialed in preview mode.
 * @property {DomainEntityRef} [attemptLimits] - AttemptLimits for this ContactListTemplate.
 * @property {boolean} [automaticTimeZoneMapping] - Indicates if automatic time zone mapping is to be used for this ContactListTemplate.
 * @property {string} [zipCodeColumnName] - The name of ContactListTemplate column containing the zip code for use with automatic time zone mapping. Only allowed if 'automaticTimeZoneMapping' is set to true.
 * @property {ColumnDataTypeSpecification[]} [columnDataTypeSpecifications] - The settings of the columns selected for dynamic queueing
 * @property {boolean} [trimWhitespace] - Whether to trim white space when importing a ContactListTemplate csv file, default value = true
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ContactListTemplateBulkRetrieveBody
 * @property {string[]} ids - The IDs of the Contact List Templates to retrieve.
 */
 
/**
 * @typedef {object} ContactPhoneNumberColumn
 * @property {string} columnName - The name of the phone column.
 * @property {string} type - Indicates the type of the phone column. For example, 'cell' or 'home'.
 * @property {string} [callableTimeColumn] - A column that indicates the timezone to use for a given contact when checking callable times. Not allowed if 'automaticTimeZoneMapping' is set to true.
 */
 
/**
 * @typedef {object} ContactsExportRequest
 * @property {string} [contactListFilterId] - Contact List Filter ID.
 * @property {ContactBulkSearchCriteria} [criteria] - Criteria to filter the contacts by.
 * @property {string[]} [contactIds] - Contact IDs to be exported.
 */
 
/**
 * @typedef {object} ContactSort
 * @property {string} [fieldName]
 * @property {string} [direction] - The direction in which to sort contacts.
 * @property {boolean} [numeric] - Whether or not the column contains numeric data.
 */
 
/**
 * @typedef {object} DataActionConditionPredicate
 * @property {string} outputField - The name of an output field from the data action's output to use for this condition
 * @property {string} outputOperator - The operation with which to evaluate this condition
 * @property {string} comparisonValue - The value to compare against for this condition
 * @property {boolean} inverted - If true, inverts the result of evaluating this Predicate. Default is false.
 * @property {boolean} outputFieldMissingResolution - The result of this predicate if the requested output field is missing from the data action's result
 */
 
/**
 * @typedef {object} DataActionConditionSettings
 * @property {string} dataActionId - The Data Action Id to use for this condition.
 * @property {string} [contactIdField] - The input field from the data action that the contactId will be passed into.
 * @property {boolean} dataNotFoundResolution - The result of this condition if the data action returns a result indicating there was no data.
 * @property {DigitalDataActionConditionPredicate[]} [predicates] - A list of predicates defining the comparisons to use for this condition.
 * @property {DataActionContactColumnFieldMapping[]} [contactColumnToDataActionFieldMappings] - A list of mappings defining which contact data fields will be passed to which data action input fields.
 */
 
/**
 * @typedef {object} DataActionContactColumnFieldMapping
 * @property {string} contactColumnName - The name of a contact column whose data will be passed to the data action
 * @property {string} dataActionField - The name of an input field from the data action that the contact column data will be passed to
 */
 
/**
 * @typedef {object} DialerAction
 * @property {string} type - The type of this DialerAction.
 * @property {string} actionTypeName - Additional type specification for this DialerAction.
 * @property {string} [updateOption] - Specifies how a contact attribute should be updated. Required for MODIFY_CONTACT_ATTRIBUTE.
 * @property {object} [properties] - A map of key-value pairs pertinent to the DialerAction. Different types of DialerActions require different properties. MODIFY_CONTACT_ATTRIBUTE with an updateOption of SET takes a contact column as the key and accepts any value. SCHEDULE_CALLBACK takes a key 'callbackOffset' that specifies how far in the future the callback should be scheduled, in minutes. SET_CALLER_ID takes two keys: 'callerAddress', which should be the caller id phone number, and 'callerName'. For either key, you can also specify a column on the contact to get the value from. To do this, specify 'contact.Column', where 'Column' is the name of the contact column from which to get the value. SET_SKILLS takes a key 'skills' with an array of skill ids wrapped into a string (Example: {'skills': '['skillIdHere']'} ).
 * @property {DomainEntityRef} [dataAction] - The Data Action to use for this action. Required for a dataActionBehavior.
 * @property {ContactColumnToDataActionFieldMapping[]} [contactColumnToDataActionFieldMappings] - A list of mappings defining which contact data fields will be passed to which data action input fields for this condition. Valid for a dataActionBehavior.
 * @property {string} [contactIdField] - The input field from the data action that the contactId will be passed to for this condition. Valid for a dataActionBehavior.
 * @property {string} [callAnalysisResultField] - The input field from the data action that the callAnalysisResult will be passed to for this condition. Valid for a wrapup dataActionBehavior.
 * @property {string} [agentWrapupField] - The input field from the data action that the agentWrapup will be passed to for this condition. Valid for a wrapup dataActionBehavior.
 */
 
/**
 * @typedef {object} DialerContact
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} contactListId - The identifier of the contact list containing this contact.
 * @property {object} data - An ordered map of the contact's columns and corresponding values.
 * @property {object} [callRecords] - A map of call records for the contact phone columns.
 * @property {object} [latestSmsEvaluations] - A map of SMS records for the contact phone columns.
 * @property {object} [latestEmailEvaluations] - A map of email records for the contact email columns.
 * @property {object} [latestWhatsAppEvaluations] - A map of whatsapp records for the contact whatsapp columns.
 * @property {boolean} [callable] - Indicates whether or not the contact can be called.
 * @property {object} [phoneNumberStatus] - A map of phone number columns to PhoneNumberStatuses, which indicate if the phone number is callable or not.
 * @property {object} [contactableStatus] - A map of media types (Voice, SMS and Email) to ContactableStatus, which indicates if the contact can be contacted using the specified media type.
 * @property {object} [contactColumnTimeZones] - Map containing data about the timezone the contact is mapped to. This will only be populated if the contact list has automatic timezone mapping turned on. The key is the column name. The value is the timezone it mapped to and the type of column: Phone or Zip
 * @property {ConfigurationOverrides} [configurationOverrides] - the priority property within ConfigurationOverides indicates whether or not the contact to be placed in front of the queue or at the end of the queue
 * @property {string} [dateCreated] - Timestamp for when the contact was added. Contacts added prior to 2023 September 1 may be missing this value. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} DialerRule
 * @property {string} [id] - The identifier of the rule.
 * @property {string} name - The name of the rule.
 * @property {number} [order] - The ranked order of the rule. Rules are processed from lowest number to highest.
 * @property {string} category - The category of the rule.
 * @property {Condition[]} conditions - A list of Conditions. All of the Conditions must evaluate to true to trigger the actions.
 * @property {DialerAction[]} [actions] - The list of actions to be taken if the conditions are true.
 */
 
/**
 * @typedef {object} DigitalAction
 * @property {UpdateContactColumnActionSettings} [updateContactColumnActionSettings] - The settings for an 'update contact column' action.
 * @property {DoNotSendActionSettings} [doNotSendActionSettings] - The settings for a 'do not send' action.
 * @property {AppendToDncActionSettings} [appendToDncActionSettings] - The settings for an 'Append to DNC' action.
 * @property {MarkContactUncontactableActionSettings} [markContactUncontactableActionSettings] - The settings for a 'mark contact uncontactable' action.
 * @property {MarkContactAddressUncontactableActionSettings} [markContactAddressUncontactableActionSettings] - The settings for an 'mark contact address uncontactable' action.
 * @property {SetContentTemplateActionSettings} [setContentTemplateActionSettings] - The settings for a 'Set content template' action.
 * @property {SetSmsPhoneNumberActionSettings} [setSmsPhoneNumberActionSettings] - The settings for a 'set sms phone number' action.
 */
 
/**
 * @typedef {object} DigitalCondition
 * @property {boolean} [inverted] - If true, inverts the result of evaluating this condition. Default is false.
 * @property {ContactColumnConditionSettings} [contactColumnConditionSettings] - The settings for a 'contact list column' condition.
 * @property {ContactAddressConditionSettings} [contactAddressConditionSettings] - The settings for a 'contact address' condition.
 * @property {ContactAddressTypeConditionSettings} [contactAddressTypeConditionSettings] - The settings for a 'contact address type' condition.
 * @property {LastAttemptByColumnConditionSettings} [lastAttemptByColumnConditionSettings] - The settings for a 'last attempt by column' condition.
 * @property {LastAttemptOverallConditionSettings} [lastAttemptOverallConditionSettings] - The settings for a 'last attempt overall' condition.
 * @property {LastResultByColumnConditionSettings} [lastResultByColumnConditionSettings] - The settings for a 'last result by column' condition.
 * @property {LastResultOverallConditionSettings} [lastResultOverallConditionSettings] - The settings for a 'last result overall' condition.
 * @property {DataActionConditionSettings} [dataActionConditionSettings] - The settings for a 'data action' condition.
 */
 
/**
 * @typedef {object} DigitalDataActionConditionPredicate
 * @property {string} outputField - The name of an output field from the data action's output to use for this condition
 * @property {string} outputOperator - The operation with which to evaluate this condition
 * @property {string} comparisonValue - The value to compare against for this condition
 * @property {boolean} inverted - If true, inverts the result of evaluating this Predicate. Default is false.
 * @property {boolean} outputFieldMissingResolution - The result of this predicate if the requested output field is missing from the data action's result
 */
 
/**
 * @typedef {object} DigitalRule
 * @property {string} [id] - The identifier of the rule.
 * @property {string} name - The name of the rule.
 * @property {number} order - The ranked order of the rule. Rules are processed from lowest number to highest.
 * @property {string} category - The category of the rule.
 * @property {DigitalCondition[]} conditions - A list of conditions to evaluate. All of the Conditions must evaluate to true to trigger the actions.
 * @property {DigitalAction[]} actions - The list of actions to be taken if all conditions are true.
 */
 
/**
 * @typedef {object} DigitalRuleSet
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {DomainEntityRef} [contactList] - A ContactList to provide suggestions for contact columns on relevant conditions and actions.
 * @property {DigitalRule[]} rules - The list of rules.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} DivisionedDomainEntityRef
 * @property {string} [id]
 * @property {string} [name]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} DncList
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the DncList.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {ImportStatus} [importStatus] - The status of the import process
 * @property {number} [size] - The total number of phone numbers in the DncList.
 * @property {string} dncSourceType - The type of the DncList.
 * @property {string} [contactMethod] - The contact method. Required if dncSourceType is rds.
 * @property {string} [loginId] - A dnc.com loginId. Required if the dncSourceType is dnc.com.
 * @property {string} [campaignId] - A dnc.com campaignId. Optional if the dncSourceType is dnc.com.
 * @property {string[]} [dncCodes] - The list of dnc.com codes to be treated as DNC. Required if the dncSourceType is dnc.com.
 * @property {string} [licenseId] - A gryphon license number. Required if the dncSourceType is gryphon.
 * @property {DomainEntityRef} [division] - The division this DncList belongs to.
 * @property {string} [customExclusionColumn] - The column to evaluate exclusion against. Required if the dncSourceType is rds_custom.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} DncListCreate
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the DncList.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {ImportStatus} [importStatus] - The status of the import process
 * @property {number} [size] - The total number of phone numbers in the DncList.
 * @property {string} dncSourceType - The type of the DncList.
 * @property {string} [contactMethod] - The contact method. Required if dncSourceType is rds.
 * @property {string} [loginId] - A dnc.com loginId. Required if the dncSourceType is dnc.com.
 * @property {string} [campaignId] - A dnc.com campaignId. Optional if the dncSourceType is dnc.com.
 * @property {string[]} [dncCodes] - The list of dnc.com codes to be treated as DNC. Required if the dncSourceType is dnc.com.
 * @property {string} [licenseId] - A gryphon license number. Required if the dncSourceType is gryphon.
 * @property {DomainEntityRef} [division] - The division this DncList belongs to.
 * @property {string} [customExclusionColumn] - The column to evaluate exclusion against. Required if the dncSourceType is rds_custom.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} DncPatchCustomExclusionColumnsRequest
 * @property {string} [action] - The action to perform
 * @property {string[]} [customExclusionColumnEntries] - The list of custom exclusion column entries to Add to / Remove from the DNC list 
 * @property {string} [expirationDateTime] - Expiration date for DNC customExclusionColumnEntries in yyyy-MM-ddTHH:mmZ format
 */
 
/**
 * @typedef {object} DncPatchEmailsRequest
 * @property {string} [action] - The action to perform
 * @property {string[]} [emailAddresses] - The list of email addresses to Add to / Remove from the DNC list 
 * @property {string} [expirationDateTime] - Expiration date for DNC email addresses in yyyy-MM-ddTHH:mmZ format
 */
 
/**
 * @typedef {object} DncPatchPhoneNumbersRequest
 * @property {string} [action] - The action to perform
 * @property {string[]} [phoneNumbers] - The list of phone numbers to Add to / Remove from the DNC list 
 * @property {string} [expirationDateTime] - Expiration date for DNC phone numbers in yyyy-MM-ddTHH:mmZ format
 */
 
/**
 * @typedef {object} DncPatchWhatsAppNumbersRequest
 * @property {string} [action] - The action to perform
 * @property {string[]} [whatsAppNumbers] - The list of whatsApp numbers to Add to / Remove from the DNC list 
 * @property {string} [expirationDateTime] - Expiration date for DNC whatsApp numbers in yyyy-MM-ddTHH:mmZ format
 */
 
/**
 * @typedef {object} DomainEntityRef
 * @property {string} [id]
 * @property {string} [name]
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} DoNotSendActionSettings
 */
 
/**
 * @typedef {object} DynamicContactQueueingSettings
 * @property {boolean} [sort] - Whether to sort contacts dynamically
 * @property {boolean} [filter] - Whether to filter contacts dynamically
 */
 
/**
 * @typedef {object} DynamicLineBalancingSettings
 * @property {boolean} [enabled] - Indicates that this campaign is subject of dynamic line balancing
 * @property {number} [relativeWeight] - Relative weight of this campaign in dynamic line balancing
 */
 
/**
 * @typedef {object} DynamicLineBalancingSettingsPatchRequest
 * @property {boolean} [enabled] - Indicates that this campaign is subject of dynamic line balancing
 * @property {number} [relativeWeight] - Relative weight of this campaign in dynamic line balancing
 */
 
/**
 * @typedef {object} EmailCampaignSchedule
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {ScheduleInterval[]} intervals - A list of intervals during which to run the associated Campaign.
 * @property {Reoccurrence[]} [recurrences] - Recurring schedules of the campaign
 * @property {string} [timeZone] - The time zone for this email campaign schedule. Defaults to UTC if empty or not provided. See here for a list of valid time zones https://www.iana.org/time-zones
 * @property {DivisionedDomainEntityRef} emailCampaign - The Campaign that this email campaign schedule is for.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} EmailColumn
 * @property {string} columnName - The name of the email column.
 * @property {string} type - Indicates the type of the email column. For example, 'work' or 'personal'.
 * @property {string} [contactableTimeColumn] - A column that indicates the timezone to use for a given contact when checking contactable times.
 */
 
/**
 * @typedef {object} EmailConfig
 * @property {string[]} emailColumns - The contact list columns specifying the email address(es) of the contact.
 * @property {DomainEntityRef} [contentTemplate] - The content template used to formulate the email to send to the contact.
 * @property {FromEmailAddress} fromAddress - The email address that will be used as the sender of the email.
 * @property {ReplyToEmailAddress} [replyToAddress] - The email address from which any reply will be sent.
 */
 
/**
 * @typedef {object} FileSpecificationTemplate
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the File Specification template.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {string} [description] - Description of the file specification template
 * @property {string} format - File format
 * @property {number} [numberOfHeadingLinesSkipped] - Number of heading lines to be skipped
 * @property {number} [numberOfTrailingLinesSkipped] - Number of trailing lines to be skipped
 * @property {boolean} [header] - If true indicates that delimited file has a header row, which can provide column names
 * @property {string} [delimiter] - Kind of delimiter
 * @property {string} [delimiterValue] - Delimiter character, used only when delimiter="Custom"
 * @property {Column[]} [columnInformation] - Columns specification
 * @property {PreprocessingRule[]} [preprocessingRules] - Preprocessing rules
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} FromEmailAddress
 * @property {DomainEntityRef} domain - The OutboundDomain used for the email address.
 * @property {string} [friendlyName] - The friendly name of the email address.
 * @property {string} [localPart] - The local part of the email address.
 */
 
/**
 * @typedef {object} ImportStatus
 * @property {string} state - current status of the import
 * @property {number} totalRecords - total number of records to be imported
 * @property {number} completedRecords - number of records finished importing
 * @property {number} percentComplete - percentage of records finished importing
 * @property {string} [failureReason] - if the import has failed, the reason for the failure
 * @property {string[]} [targetContactListIds] - The contact list Ids for target contact lists.
 * @property {string} [listNamePrefix] - The prefix for the contact list name
 */
 
/**
 * @typedef {object} ImportTemplate
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name] - The name of the import template.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {DomainEntityRef} contactListTemplate - ContactListTemplate for this ImportTemplate.
 * @property {DomainEntityRef} [contactListFilter] - ContactListFilter for this ImportTemplate.
 * @property {boolean} [useSplittingCriteria] - Whether or not to use splitting criteria. Default is false.
 * @property {SplittingInformation} [splittingInformation] - How to split contact records, required if useSplittingCriteria is true.
 * @property {string} [listNameFormat] - The list name format for target ContactLists. When Custom is provided, customListNameFormatValue is required.
 * @property {string} [customListNameFormatValue] - Custom value for the list name format, at least %N is required. Any character other than the specified tokens will be used as is. Available tokens: %N: ListNamePrefix; %P: Part number; %F: Filter name; %C: Column value; YYYY: year; MM: month; DD: day; hh: hour; mm: minute; ss: second.
 * @property {ImportStatus} [importStatus] - The status of the import process.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} LastAttemptByColumnConditionSettings
 * @property {string} [emailColumnName] - The name of the contact column to evaluate for Email.
 * @property {string} [smsColumnName] - The name of the contact column to evaluate for SMS.
 * @property {string} operator - The operator to use when comparing values.
 * @property {string} value - The period value to compare against the contact's data.
 */
 
/**
 * @typedef {object} LastAttemptOverallConditionSettings
 * @property {string[]} mediaTypes - A list of media types to evaluate.
 * @property {string} operator - The operator to use when comparing values.
 * @property {string} value - The period value to compare against the contact's data.
 */
 
/**
 * @typedef {object} LastResultByColumnConditionSettings
 * @property {string} [emailColumnName] - The name of the contact column to evaluate for Email.
 * @property {string[]} [emailWrapupCodes] - A list of wrapup code identifiers to match for Email.
 * @property {string} [smsColumnName] - The name of the contact column to evaluate for SMS.
 * @property {string[]} [smsWrapupCodes] - A list of wrapup code identifiers to match for SMS.
 */
 
/**
 * @typedef {object} LastResultOverallConditionSettings
 * @property {string[]} [emailWrapupCodes] - A list of wrapup code identifiers to match for Email.
 * @property {string[]} [smsWrapupCodes] - A list of wrapup code identifiers to match for SMS.
 */
 
/**
 * @typedef {object} MarkContactAddressUncontactableActionSettings
 */
 
/**
 * @typedef {object} MarkContactUncontactableActionSettings
 * @property {string[]} mediaTypes - A list of media types to evaluate.
 */
 
/**
 * @typedef {object} MessagingCampaign
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {DomainEntityRef} [division] - The division this entity belongs to.
 * @property {string} [campaignStatus] - The current status of the messaging campaign. A messaging campaign may be turned 'on' or 'off'.
 * @property {DomainEntityRef} [callableTimeSet] - The callable time set for this messaging campaign.
 * @property {DomainEntityRef} contactList - The contact list that this messaging campaign will send messages for.
 * @property {DomainEntityRef[]} [dncLists] - The dnc lists to check before sending a message for this messaging campaign.
 * @property {boolean} [alwaysRunning] - Whether this messaging campaign is always running
 * @property {ContactSort[]} [contactSorts] - The order in which to sort contacts for dialing, based on up to four columns.
 * @property {number} messagesPerMinute - How many messages this messaging campaign will send per minute.
 * @property {DomainEntityRef[]} [ruleSets] - Rule Sets to be applied while this campaign is sending messages
 * @property {DomainEntityRef[]} [contactListFilters] - The contact list filter to check before sending a message for this messaging campaign.
 * @property {RestErrorDetail[]} [errors] - A list of current error conditions associated with this messaging campaign.
 * @property {DynamicContactQueueingSettings} [dynamicContactQueueingSettings] - Indicates (when true) that the campaign supports dynamic queueing of the contact list at the time of a request for contacts.
 * @property {EmailConfig} [emailConfig] - Configuration for this messaging campaign to send Email messages.
 * @property {SmsConfig} [smsConfig] - Configuration for this messaging campaign to send SMS messages.
 * @property {WhatsAppConfig} [whatsAppConfig] - Configuration for this messaging campaign to send WhatsApp messages.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} MessagingCampaignSchedule
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {ScheduleInterval[]} intervals - A list of intervals during which to run the associated Campaign.
 * @property {Reoccurrence[]} [recurrences] - Recurring schedules of the campaign
 * @property {string} [timeZone] - The time zone for this messaging campaign schedule. Defaults to UTC if empty or not provided. See here for a list of valid time zones https://www.iana.org/time-zones
 * @property {DivisionedDomainEntityRef} messagingCampaign - The Campaign that this messaging campaign schedule is for.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} NextOccurrenceDetails
 * @property {OccurrenceDetails} [startOccurrenceDetails] - The details for the next start occurrence for the recurrence.
 * @property {OccurrenceDetails} [endOccurrenceDetails] - The details for the next end occurrence for the recurrence.
 */
 
/**
 * @typedef {object} OccurrenceDetails
 * @property {string} [dateOfNextOccurrence] - The date of the next start or end occurrence for the recurrence as an ISO-8601 string
 * @property {number} [numberOfOccurrences] - The number of start or end occurrences that have been processed for the recurrence.
 */
 
/**
 * @typedef {object} OutboundSettings
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {number} [maxCallsPerAgent] - The maximum number of calls that can be placed per agent on any campaign
 * @property {number} [maxCallsPerAgentDecimal] - The maximum number of calls that can be placed per agent on any campaign with decimal precision
 * @property {number} [maxConfigurableCallsPerAgent] - The maximum number of calls that can be configured to be placed per agent on any campaign
 * @property {number} [maxLineUtilization] - The maximum percentage of lines that should be used for Outbound, expressed as a decimal in the range [0.0, 1.0]
 * @property {number} [abandonSeconds] - The number of seconds used to determine if a call is abandoned
 * @property {string} [complianceAbandonRateDenominator] - The denominator to be used in determining the compliance abandon rate
 * @property {AutomaticTimeZoneMappingSettings} [automaticTimeZoneMapping] - The settings for automatic time zone mapping. Note that changing these settings will change them for both voice and messaging campaigns.
 * @property {boolean} [rescheduleTimeZoneSkippedContacts] - Whether or not to reschedule time-zone blocked contacts
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} Pattern
 * @property {string} type - Pattern type (Daily/Weekly)
 * @property {number} interval - The interval of days between the occurrences for Daily pattern type, and weeks between the occurrences for Weekly
 * @property {string[]} [daysOfWeek] - The day(s) of week the occurrence should be repeated. Required to set for Weekly pattern type. E.g. ["Monday", "Wednesday"]
 */
 
/**
 * @typedef {object} PhoneColumn
 * @property {string} columnName - The name of the phone column.
 * @property {string} type - The type of the phone column. For example, 'cell' or 'home'.
 */
 
/**
 * @typedef {object} PreprocessingRule
 * @property {string} [find] - The regular expression to which file lines are to be matched.
 * @property {string} [replaceWith] - The string to be substituted for each match.
 * @property {boolean} [global] - Replaces all matching substrings in every line.
 * @property {boolean} [ignoreCase] - Enables case-insensitive matching
 */
 
/**
 * @typedef {object} Range
 * @property {string} type - Range type (NoEnd: without an end date. EndDate: with an end date. Numbered: with a specific number of occurrences)
 * @property {string} [end] - The end date time of the last occurrence of the range as an ISO-8601 string. Required for EndDate range type.
 * @property {number} [numberOfOccurrences] - The number of times the schedule will be repeated, e.g: 2. Required to set for Numbered range type.
 */
 
/**
 * @typedef {object} Reoccurrence
 * @property {string} [id]
 * @property {string} start - The start date time of the initial occurrence as an ISO-8601 string in the format YYYY-MM-DDThh:mm:ss
 * @property {string} end - The end date time of the initial occurrence as an ISO-8601 string in the format YYYY-MM-DDThh:mm:ss
 * @property {string} [timeZone] - The time zone for the recurrence. The time zone of the recurrence is determined by prioritizing the recurrence's time zone if specified, then the schedule's time zone if set, and finally defaulting to UTC if neither defines a time zone. See here for a list of valid time zones https://www.iana.org/time-zones
 * @property {Pattern} pattern - The schedule pattern e.g.: Daily/Weekly
 * @property {Range} range - The schedule range e.g.: EndDate/NoEnd/Numbered
 * @property {Alteration[]} [alterations] - Modifications to the original recurrence schedule (Exclusions/Inclusions)
 * @property {NextOccurrenceDetails} [nextOccurrenceDetails] - The next occurrence details for the next start and end occurrences for the recurrence
 */
 
/**
 * @typedef {object} ReplyToEmailAddress
 * @property {DomainEntityRef} domain - The InboundDomain used for the email address.
 * @property {DomainEntityRef} route - The InboundRoute used for the email address.
 */
 
/**
 * @typedef {object} ResponseSet
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the ResponseSet.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {object} responses - Map of disposition identifiers to reactions. For example: {"disposition.classification.callable.person": {"reactionType": "transfer"}}.
 * @property {boolean} [beepDetectionEnabled] - Whether to enable answering machine beep detection
 * @property {boolean} [amdSpeechDistinguishEnabled] - Whether to enable answering machine detection
 * @property {string} [liveSpeakerDetectionMode] - Setting level of live speaker detection based on ringbacks
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} RestErrorDetail
 * @property {string} error - name of the error
 * @property {string} [details] - additional information regarding the error
 */
 
/**
 * @typedef {object} RuleSet
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} name - The name of the RuleSet.
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {DomainEntityRef} [contactList] - A ContactList to provide user-interface suggestions for contact columns on relevant conditions and actions.
 * @property {DomainEntityRef} [queue] - A Queue to provide user-interface suggestions for wrap-up codes on relevant conditions and actions.
 * @property {DialerRule[]} rules - The list of rules.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} ScheduleInterval
 * @property {string} start - The scheduled start time as an ISO-8601 string, i.e yyyy-MM-ddTHH:mm:ss.SSSZ
 * @property {string} end - The scheduled end time as an ISO-8601 string, i.e. yyyy-MM-ddTHH:mm:ss.SSSZ
 */
 
/**
 * @typedef {object} SequenceSchedule
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {ScheduleInterval[]} intervals - A list of intervals during which to run the associated CampaignSequence.
 * @property {Reoccurrence[]} [recurrences] - Recurring schedules of the campaign
 * @property {string} [timeZone] - The time zone for this SequenceSchedule. Defaults to UTC if empty or not provided. See here for a list of valid time zones https://www.iana.org/time-zones
 * @property {DomainEntityRef} sequence - The CampaignSequence that this SequenceSchedule is for.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} SetContentTemplateActionSettings
 * @property {string} smsContentTemplateId - A string of sms contentTemplateId.
 * @property {string} emailContentTemplateId - A string of email contentTemplateId.
 */
 
/**
 * @typedef {object} SetSmsPhoneNumberActionSettings
 * @property {string} senderSmsPhoneNumber - The string address for the sms phone number.
 */
 
/**
 * @typedef {object} SmsConfig
 * @property {string} messageColumn - The Contact List column specifying the message to send to the contact.
 * @property {string} phoneColumn - The Contact List column specifying the phone number to send a message to.
 * @property {SmsPhoneNumberRef} senderSmsPhoneNumber - A reference to the SMS Phone Number that will be used as the sender of a message.
 * @property {DomainEntityRef} [contentTemplate] - The content template used to formulate the message to send to the contact.
 */
 
/**
 * @typedef {object} SmsPhoneNumberRef
 * @property {string} phoneNumber - A phone number provisioned for SMS communications in E.164 format. E.g. +13175555555 or +34234234234
 * @property {string} [selfUri]
 */
 
/**
 * @typedef {object} SplittingInformation
 * @property {string} [criteria] - The splitting criteria type
 * @property {string} [criteriaValue] - The criteria value for the specified criteria type
 * @property {boolean} [createRemainderContactList] - Whether to create remainder contact list
 * @property {boolean} [useWaterfallRule] - Whether to use waterfall rule
 */
 
/**
 * @typedef {object} UpdateContactColumnActionSettings
 * @property {object} properties - A mapping of contact columns to their new values.
 * @property {string} updateOption - The type of update to make to the specified contact column(s).
 */
 
/**
 * @typedef {object} WhatsAppColumn
 * @property {string} columnName - The name of the whatsApp column.
 * @property {string} type - Indicates the type of the whatsApp column. For example, 'work' or 'personal'.
 */
 
/**
 * @typedef {object} WhatsAppConfig
 * @property {string[]} whatsAppColumns - The contact list columns specifying the WhatsApp address(es) of the contact.
 * @property {AddressableEntityRef} whatsAppIntegration - The WhatsApp integration used to send message to the contact.
 * @property {DomainEntityRef} contentTemplate - The content template used to formulate the WhatsApp message to send to the contact.
 */
 
/**
 * @typedef {object} WrapUpCodeMapping
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} [name]
 * @property {string} [dateCreated] - Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateModified] - Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [version] - Required for updates, must match the version number of the most recent update
 * @property {string[]} [defaultSet] - The default set of wrap-up flags. These will be used if there is no entry for a given wrap-up code in the mapping.
 * @property {object} [mapping] - A map from wrap-up code identifiers to a set of wrap-up flags.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} WritableDialerContact
 * @property {string} [id] - The globally unique identifier for the object.
 * @property {string} contactListId - The identifier of the contact list containing this contact.
 * @property {object} data - An ordered map of the contact's columns and corresponding values.
 * @property {object} [latestSmsEvaluations] - A map of SMS records for the contact phone columns.
 * @property {object} [latestEmailEvaluations] - A map of email records for the contact email columns.
 * @property {object} [latestWhatsAppEvaluations] - A map of whatsapp records for the contact whatsapp columns.
 * @property {boolean} [callable] - Indicates whether or not the contact can be called.
 * @property {object} [phoneNumberStatus] - A map of phone number columns to PhoneNumberStatuses, which indicate if the phone number is callable or not.
 * @property {object} [contactableStatus] - A map of media types (Voice, SMS and Email) to ContactableStatus, which indicates if the contact can be contacted using the specified media type.
 * @property {string} [dateCreated] - Timestamp for when the contact was added. Contacts added prior to 2023 September 1 may be missing this value. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 

/**
 * Outbound
 * @class Outbound
 */
class OutboundAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the Outbound class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Send notification that an agent's state changed 
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @param {string} userId - Agent's user ID
	 * @param {Agent} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/agents/{userId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundCampaignAgent(campaignId, userId, body) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/agents/{userId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get attempt limits
	 * @async
	 * @param {string} attemptLimitsId - Attempt limits ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/attemptlimits/{attemptLimitsId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundAttemptlimit(attemptLimitsId) {
		const endpointPath = "/api/v2/outbound/attemptlimits/{attemptLimitsId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(attemptLimitsId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attemptLimitsId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.attemptLimitsId = attemptLimitsId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update attempt limits
	 * @async
	 * @param {string} attemptLimitsId - Attempt limits ID
	 * @param {AttemptLimits} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/attemptlimits/{attemptLimitsId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundAttemptlimit(attemptLimitsId, body) {
		const endpointPath = "/api/v2/outbound/attemptlimits/{attemptLimitsId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(attemptLimitsId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attemptLimitsId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.attemptLimitsId = attemptLimitsId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete attempt limits
	 * @async
	 * @param {string} attemptLimitsId - Attempt limits ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/attemptlimits/{attemptLimitsId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundAttemptlimit(attemptLimitsId) {
		const endpointPath = "/api/v2/outbound/attemptlimits/{attemptLimitsId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(attemptLimitsId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "attemptLimitsId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.attemptLimitsId = attemptLimitsId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query attempt limits list
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/attemptlimits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundAttemptlimits(query) {
		const endpointPath = "/api/v2/outbound/attemptlimits";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create attempt limits
	 * @async
	 * @param {AttemptLimits} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/attemptlimits" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundAttemptlimits(body) {
		const endpointPath = "/api/v2/outbound/attemptlimits";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a dialer call analysis response set.
	 * @async
	 * @param {string} callAnalysisSetId - Call Analysis Response Set ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCallanalysisresponseset(callAnalysisSetId) {
		const endpointPath = "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(callAnalysisSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "callAnalysisSetId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.callAnalysisSetId = callAnalysisSetId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a dialer call analysis response set.
	 * @async
	 * @param {string} callAnalysisSetId - Call Analysis Response Set ID
	 * @param {ResponseSet} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundCallanalysisresponseset(callAnalysisSetId, body) {
		const endpointPath = "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(callAnalysisSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "callAnalysisSetId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.callAnalysisSetId = callAnalysisSetId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a dialer call analysis response set.
	 * @async
	 * @param {string} callAnalysisSetId - Call Analysis Response Set ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundCallanalysisresponseset(callAnalysisSetId) {
		const endpointPath = "/api/v2/outbound/callanalysisresponsesets/{callAnalysisSetId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(callAnalysisSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "callAnalysisSetId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.callAnalysisSetId = callAnalysisSetId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of dialer call analysis response sets.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callanalysisresponsesets" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundCallanalysisresponsesets(query) {
		const endpointPath = "/api/v2/outbound/callanalysisresponsesets";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a dialer call analysis response set.
	 * @async
	 * @param {ResponseSet} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callanalysisresponsesets" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundCallanalysisresponsesets(body) {
		const endpointPath = "/api/v2/outbound/callanalysisresponsesets";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get callable time set
	 * @async
	 * @param {string} callableTimeSetId - Callable Time Set ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callabletimesets/{callableTimeSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCallabletimeset(callableTimeSetId) {
		const endpointPath = "/api/v2/outbound/callabletimesets/{callableTimeSetId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(callableTimeSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "callableTimeSetId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.callableTimeSetId = callableTimeSetId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update callable time set
	 * @async
	 * @param {string} callableTimeSetId - Callable Time Set ID
	 * @param {CallableTimeSet} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callabletimesets/{callableTimeSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundCallabletimeset(callableTimeSetId, body) {
		const endpointPath = "/api/v2/outbound/callabletimesets/{callableTimeSetId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(callableTimeSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "callableTimeSetId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.callableTimeSetId = callableTimeSetId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete callable time set
	 * @async
	 * @param {string} callableTimeSetId - Callable Time Set ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callabletimesets/{callableTimeSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundCallabletimeset(callableTimeSetId) {
		const endpointPath = "/api/v2/outbound/callabletimesets/{callableTimeSetId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(callableTimeSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "callableTimeSetId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.callableTimeSetId = callableTimeSetId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query callable time set list
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callabletimesets" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundCallabletimesets(query) {
		const endpointPath = "/api/v2/outbound/callabletimesets";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create callable time set
	 * @async
	 * @param {CallableTimeSet} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/callabletimesets" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundCallabletimesets(body) {
		const endpointPath = "/api/v2/outbound/callabletimesets";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Schedule a Callback for a Dialer Campaign (Deprecated)
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @param {ContactCallbackRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/callback/schedule" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 * @deprecated
	 */
	postOutboundCampaignCallbackSchedule(campaignId, body) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/callback/schedule";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a basic Campaign information object
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/divisionviews/{campaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCampaignsDivisionview(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/divisionviews/{campaignId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of basic Campaign information objects
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string[]} [query.id] -  id
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/divisionviews" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundCampaignsDivisionviews(query) {
		const endpointPath = "/api/v2/outbound/campaigns/divisionviews";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get dialer campaign interactions.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/interactions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCampaignInteractions(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/interactions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get line distribution information for campaigns using same Edge Group or Site as given campaign
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeOnlyActiveCampaigns] -  If true will return only active Campaigns
	 * @param {string} [query.edgeGroupId] -  Edge group to be used in line distribution calculations instead of current Campaign's Edge Group. Campaign's Site and Edge Group are mutually exclusive.
	 * @param {string} [query.siteId] -  Site to be used in line distribution calculations instead of current Campaign's Site.  Campaign's Site and Edge Group are mutually exclusive.
	 * @param {boolean} [query.useWeight] -  Enable usage of weight, this value overrides current Campaign's setting in line distribution calculations
	 * @param {number} [query.relativeWeight] -  Relative weight to be used in line distribution calculations instead of current Campaign's relative weight
	 * @param {number} [query.outboundLineCount] -  The number of outbound lines to be used in line distribution calculations, instead of current Campaign's Outbound Lines Count
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/linedistribution" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundCampaignLinedistribution(campaignId, query) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/linedistribution";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeOnlyActiveCampaigns" in query && this.#checkJSONSchemaType(query["includeOnlyActiveCampaigns"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeOnlyActiveCampaigns", "boolean");
			}
			if ("edgeGroupId" in query && this.#checkJSONSchemaType(query["edgeGroupId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "edgeGroupId", "string");
			}
			if ("siteId" in query && this.#checkJSONSchemaType(query["siteId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "siteId", "string");
			}
			if ("useWeight" in query && this.#checkJSONSchemaType(query["useWeight"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "useWeight", "boolean");
			}
			if ("relativeWeight" in query && this.#checkJSONSchemaType(query["relativeWeight"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "relativeWeight", "integer");
			}
			if ("outboundLineCount" in query && this.#checkJSONSchemaType(query["outboundLineCount"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "outboundLineCount", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get campaign progress
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/progress" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCampaignProgress(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/progress";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Reset campaign progress and recycle the campaign
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/progress" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundCampaignProgress(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/progress";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get dialer campaign.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCampaign(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a campaign.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.useMaxCallsPerAgentDecimal] -  Use maxCallsPerAgent with decimal precision
	 * @param {Campaign} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundCampaign(campaignId, query, body) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("useMaxCallsPerAgentDecimal" in query && this.#checkJSONSchemaType(query["useMaxCallsPerAgentDecimal"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "useMaxCallsPerAgentDecimal", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a campaign.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundCampaign(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a campaign.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @param {CampaignPatchRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchOutboundCampaign(campaignId, body) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a preview of how agents will be mapped to this campaign's contact list.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview/results" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCampaignAgentownedmappingpreviewResults(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview/results";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Initiate request for a preview of how agents will be mapped to this campaign's contact list.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postOutboundCampaignAgentownedmappingpreview(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/agentownedmappingpreview";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get campaign diagnostics
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/diagnostics" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCampaignDiagnostics(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/diagnostics";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the remaining and total contact count for each skill combination in a skills campaign
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {number} [query.pageSize] -  Page size
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/skillcombinations" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundCampaignSkillcombinations(campaignId, query) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/skillcombinations";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Start the campaign
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/start" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postOutboundCampaignStart(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/start";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Stop the campaign
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/stop" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postOutboundCampaignStop(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/stop";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Campaign Rule
	 * @async
	 * @param {string} campaignRuleId - Campaign Rule ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaignrules/{campaignRuleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCampaignrule(campaignRuleId) {
		const endpointPath = "/api/v2/outbound/campaignrules/{campaignRuleId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignRuleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignRuleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignRuleId = campaignRuleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update Campaign Rule
	 * @async
	 * @param {string} campaignRuleId - Campaign Rule ID
	 * @param {CampaignRule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaignrules/{campaignRuleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundCampaignrule(campaignRuleId, body) {
		const endpointPath = "/api/v2/outbound/campaignrules/{campaignRuleId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignRuleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignRuleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignRuleId = campaignRuleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Campaign Rule
	 * @async
	 * @param {string} campaignRuleId - Campaign Rule ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaignrules/{campaignRuleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundCampaignrule(campaignRuleId) {
		const endpointPath = "/api/v2/outbound/campaignrules/{campaignRuleId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignRuleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignRuleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignRuleId = campaignRuleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query Campaign Rule list
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaignrules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundCampaignrules(query) {
		const endpointPath = "/api/v2/outbound/campaignrules";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create Campaign Rule
	 * @async
	 * @param {CampaignRule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaignrules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundCampaignrules(body) {
		const endpointPath = "/api/v2/outbound/campaignrules";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a dialer campaign schedule.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/campaigns/{campaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundSchedulesCampaign(campaignId) {
		const endpointPath = "/api/v2/outbound/schedules/campaigns/{campaignId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a new campaign schedule.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @param {CampaignSchedule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/campaigns/{campaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundSchedulesCampaign(campaignId, body) {
		const endpointPath = "/api/v2/outbound/schedules/campaigns/{campaignId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a dialer campaign schedule.
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/campaigns/{campaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundSchedulesCampaign(campaignId) {
		const endpointPath = "/api/v2/outbound/schedules/campaigns/{campaignId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for a list of dialer campaign schedules.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/campaigns" endpoint.
	 */
	getOutboundSchedulesCampaigns() {
		const endpointPath = "/api/v2/outbound/schedules/campaigns";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get statistics about a Dialer Campaign
	 * @async
	 * @param {string} campaignId - Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/{campaignId}/stats" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundCampaignStats(campaignId) {
		const endpointPath = "/api/v2/outbound/campaigns/{campaignId}/stats";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(campaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.campaignId = campaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get progress for a list of campaigns
	 * @async
	 * @param {string[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/progress" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundCampaignsProgress(body) {
		const endpointPath = "/api/v2/outbound/campaigns/progress";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of dialer campaigns.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string[]} [query.id] -  id
	 * @param {string} [query.contactListId] -  Contact List ID
	 * @param {string} [query.dncListIds] -  DNC list ID
	 * @param {string} [query.distributionQueueId] -  Distribution queue ID
	 * @param {string} [query.edgeGroupId] -  Edge group ID
	 * @param {string} [query.callAnalysisResponseSetId] -  Call analysis response set ID
	 * @param {string[]} [query.divisionId] -  Division ID(s)
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundCampaigns(query) {
		const endpointPath = "/api/v2/outbound/campaigns";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
			if ("contactListId" in query && this.#checkJSONSchemaType(query["contactListId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
			}
			if ("dncListIds" in query && this.#checkJSONSchemaType(query["dncListIds"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListIds", "string");
			}
			if ("distributionQueueId" in query && this.#checkJSONSchemaType(query["distributionQueueId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "distributionQueueId", "string");
			}
			if ("edgeGroupId" in query && this.#checkJSONSchemaType(query["edgeGroupId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "edgeGroupId", "string");
			}
			if ("callAnalysisResponseSetId" in query && this.#checkJSONSchemaType(query["callAnalysisResponseSetId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "callAnalysisResponseSetId", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "array");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a campaign.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.useMaxCallsPerAgentDecimal] -  Use maxCallsPerAgent with decimal precision
	 * @param {Campaign} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundCampaigns(query, body) {
		const endpointPath = "/api/v2/outbound/campaigns";
		const endpointMethod = "POST";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("useMaxCallsPerAgentDecimal" in query && this.#checkJSONSchemaType(query["useMaxCallsPerAgentDecimal"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "useMaxCallsPerAgentDecimal", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query across all types of campaigns
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string[]} [query.id] -  Campaign ID(s)
	 * @param {string} [query.name] -  Campaign name(s)
	 * @param {string[]} [query.divisionId] -  Division ID(s)
	 * @param {string[]} [query.mediaType] -  Media type(s)
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/all/divisionviews" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundCampaignsAllDivisionviews(query) {
		const endpointPath = "/api/v2/outbound/campaigns/all/divisionviews";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "array");
			}
			if ("mediaType" in query && this.#checkJSONSchemaType(query["mediaType"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "mediaType", "array");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query across all types of campaigns by division
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string[]} [query.id] -  Campaign ID(s)
	 * @param {string} [query.name] -  Campaign name(s)
	 * @param {string[]} [query.divisionId] -  Division ID(s)
	 * @param {string[]} [query.mediaType] -  Media type(s)
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/campaigns/all" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundCampaignsAll(query) {
		const endpointPath = "/api/v2/outbound/campaigns/all";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "array");
			}
			if ("mediaType" in query && this.#checkJSONSchemaType(query["mediaType"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "mediaType", "array");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a basic ContactList information object
	 * @async
	 * @param {string} contactListId - Contactlist ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Include import status
	 * @param {boolean} [query.includeSize] -  Include size
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/divisionviews/{contactListId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundContactlistsDivisionview(contactListId, query) {
		const endpointPath = "/api/v2/outbound/contactlists/divisionviews/{contactListId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
			if ("includeSize" in query && this.#checkJSONSchemaType(query["includeSize"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeSize", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of simplified contact list objects.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Include import status
	 * @param {boolean} [query.includeSize] -  Include size
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string[]} [query.id] -  id
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/divisionviews" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundContactlistsDivisionviews(query) {
		const endpointPath = "/api/v2/outbound/contactlists/divisionviews";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
			if ("includeSize" in query && this.#checkJSONSchemaType(query["includeSize"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeSize", "boolean");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the URI of a contact list export.
	 * @async
	 * @param {string} contactListId - ContactList ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.download] -  Redirect to download uri
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/export" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundContactlistExport(contactListId, query) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/export";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("download" in query && this.#checkJSONSchemaType(query["download"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "download", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Initiate the export of a contact list.
	 * @async
	 * @param {string} contactListId - ContactList ID
	 * @param {ContactsExportRequest} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/export" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlistExport(contactListId, body) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/export";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a preview of the output of a contact list filter
	 * @async
	 * @param {ContactListFilter} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlistfilters/preview" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlistfiltersPreview(body) {
		const endpointPath = "/api/v2/outbound/contactlistfilters/preview";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Contact list filter
	 * @async
	 * @param {string} contactListFilterId - Contact List Filter ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlistfilters/{contactListFilterId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundContactlistfilter(contactListFilterId) {
		const endpointPath = "/api/v2/outbound/contactlistfilters/{contactListFilterId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListFilterId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListFilterId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListFilterId = contactListFilterId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update Contact List Filter
	 * @async
	 * @param {string} contactListFilterId - Contact List Filter ID
	 * @param {ContactListFilter} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlistfilters/{contactListFilterId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundContactlistfilter(contactListFilterId, body) {
		const endpointPath = "/api/v2/outbound/contactlistfilters/{contactListFilterId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListFilterId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListFilterId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListFilterId = contactListFilterId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Contact List Filter
	 * @async
	 * @param {string} contactListFilterId - Contact List Filter ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlistfilters/{contactListFilterId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundContactlistfilter(contactListFilterId) {
		const endpointPath = "/api/v2/outbound/contactlistfilters/{contactListFilterId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListFilterId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListFilterId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListFilterId = contactListFilterId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Retrieve multiple contact list filters
	 * @async
	 * @param {ContactListFilterBulkRetrieveBody} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlistfilters/bulk/retrieve" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlistfiltersBulkRetrieve(body) {
		const endpointPath = "/api/v2/outbound/contactlistfilters/bulk/retrieve";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query Contact list filters
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @param {string} [query.contactListId] -  Contact List ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlistfilters" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundContactlistfilters(query) {
		const endpointPath = "/api/v2/outbound/contactlistfilters";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("contactListId" in query && this.#checkJSONSchemaType(query["contactListId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create Contact List Filter
	 * @async
	 * @param {ContactListFilter} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlistfilters" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlistfilters(body) {
		const endpointPath = "/api/v2/outbound/contactlistfilters";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get dialer contactList import status.
	 * @async
	 * @param {string} contactListId - ContactList ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/importstatus" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundContactlistImportstatus(contactListId) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/importstatus";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a dialer contact list.
	 * @async
	 * @param {string} contactListId - ContactList ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Import status
	 * @param {boolean} [query.includeSize] -  Include size
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundContactlist(contactListId, query) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
			if ("includeSize" in query && this.#checkJSONSchemaType(query["includeSize"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeSize", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a contact list.
	 * @async
	 * @param {string} contactListId - ContactList ID
	 * @param {ContactList} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundContactlist(contactListId, body) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a contact list.
	 * @async
	 * @param {string} contactListId - ContactList ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundContactlist(contactListId) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Preview the result of applying Automatic Time Zone Mapping to a contact list
	 * @async
	 * @param {string} contactListId - ContactList ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/timezonemappingpreview" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundContactlistTimezonemappingpreview(contactListId) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/timezonemappingpreview";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Contact List Template
	 * @async
	 * @param {string} contactListTemplateId - ContactListTemplate ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlisttemplates/{contactListTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundContactlisttemplate(contactListTemplateId) {
		const endpointPath = "/api/v2/outbound/contactlisttemplates/{contactListTemplateId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListTemplateId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListTemplateId = contactListTemplateId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a contact list template.
	 * @async
	 * @param {string} contactListTemplateId - ContactListTemplate ID
	 * @param {ContactListTemplate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlisttemplates/{contactListTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundContactlisttemplate(contactListTemplateId, body) {
		const endpointPath = "/api/v2/outbound/contactlisttemplates/{contactListTemplateId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListTemplateId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListTemplateId = contactListTemplateId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Contact List Template
	 * @async
	 * @param {string} contactListTemplateId - ContactListTemplate ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlisttemplates/{contactListTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundContactlisttemplate(contactListTemplateId) {
		const endpointPath = "/api/v2/outbound/contactlisttemplates/{contactListTemplateId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListTemplateId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListTemplateId = contactListTemplateId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add multiple contact list templates
	 * @async
	 * @param {ContactListTemplate[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlisttemplates/bulk/add" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlisttemplatesBulkAdd(body) {
		const endpointPath = "/api/v2/outbound/contactlisttemplates/bulk/add";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get multiple contact list templates
	 * @async
	 * @param {ContactListTemplateBulkRetrieveBody} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlisttemplates/bulk/retrieve" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlisttemplatesBulkRetrieve(body) {
		const endpointPath = "/api/v2/outbound/contactlisttemplates/bulk/retrieve";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of contact list templates
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlisttemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundContactlisttemplates(query) {
		const endpointPath = "/api/v2/outbound/contactlisttemplates";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create Contact List Template
	 * @async
	 * @param {ContactListTemplate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlisttemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlisttemplates(body) {
		const endpointPath = "/api/v2/outbound/contactlisttemplates";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete multiple contact list templates.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} query.id -  contact list template id(s) to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlisttemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteOutboundContactlisttemplates(query) {
		const endpointPath = "/api/v2/outbound/contactlisttemplates";
		const endpointMethod = "DELETE";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("id" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "id");
		}

		if (this.#checkJSONSchemaType(query["id"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of contact lists.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Include import status
	 * @param {boolean} [query.includeSize] -  Include size
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string[]} [query.id] -  id
	 * @param {string[]} [query.divisionId] -  Division ID(s)
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundContactlists(query) {
		const endpointPath = "/api/v2/outbound/contactlists";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
			if ("includeSize" in query && this.#checkJSONSchemaType(query["includeSize"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeSize", "boolean");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "array");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a contact List.
	 * @async
	 * @param {ContactList} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlists(body) {
		const endpointPath = "/api/v2/outbound/contactlists";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete multiple contact lists.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} query.id -  contact list id(s) to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteOutboundContactlists(query) {
		const endpointPath = "/api/v2/outbound/contactlists";
		const endpointMethod = "DELETE";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("id" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "id");
		}

		if (this.#checkJSONSchemaType(query["id"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a contact.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {string} contactId - Contact ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundContactlistContact(contactListId, contactId) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.pathParameters.contactId = contactId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a contact.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {string} contactId - Contact ID
	 * @param {DialerContact} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundContactlistContact(contactListId, contactId, body) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.pathParameters.contactId = contactId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a contact.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {string} contactId - Contact ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundContactlistContact(contactListId, contactId) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts/{contactId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		if (this.#checkJSONSchemaType(contactId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.pathParameters.contactId = contactId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes all contacts out of a list. All outstanding recalls or rule-scheduled callbacks for non-preview campaigns configured with the contactlist will be cancelled.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/clear" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postOutboundContactlistClear(contactListId) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/clear";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get 10 most recent bulk operation jobs associated with contact list.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundContactlistContactsBulkJobs(contactListId) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk/jobs";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get bulk operation job.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {string} jobId - Job ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundContactlistContactsBulkJob(contactListId, jobId) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Start an async job to bulk edit contacts.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {ContactBulkEditRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk/update" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlistContactsBulkUpdate(contactListId, body) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk/update";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get contacts from a contact list.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {string[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlistContactsBulk(contactListId, body) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Start an async job to delete contacts using a filter.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {ContactBulkSearchParameters} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk/remove" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlistContactsBulkRemove(contactListId, body) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts/bulk/remove";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query contacts from a contact list.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {ContactListingRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts/search" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlistContactsSearch(contactListId, body) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts/search";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add contacts to a contact list.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.priority] -  Contact priority. True means the contact(s) will be dialed next; false means the contact will go to the end of the contact queue.
	 * @param {boolean} [query.clearSystemData] -  Clear system data. True means the system columns (attempts, callable status, etc) stored on the contact will be cleared if the contact already exists; false means they won't.
	 * @param {boolean} [query.doNotQueue] -  Do not queue. True means that updated contacts will not have their positions in the queue altered, so contacts that have already been dialed will not be redialed. For new contacts, this parameter has no effect; False means that updated contacts will be re-queued, according to the 'priority' parameter.
	 * @param {WritableDialerContact[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundContactlistContacts(contactListId, query, body) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("priority" in query && this.#checkJSONSchemaType(query["priority"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "priority", "boolean");
			}
			if ("clearSystemData" in query && this.#checkJSONSchemaType(query["clearSystemData"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "clearSystemData", "boolean");
			}
			if ("doNotQueue" in query && this.#checkJSONSchemaType(query["doNotQueue"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "doNotQueue", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete contacts from a contact list.
	 * @async
	 * @param {string} contactListId - Contact List ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} query.contactIds -  ContactIds to delete.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/contactlists/{contactListId}/contacts" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteOutboundContactlistContacts(contactListId, query) {
		const endpointPath = "/api/v2/outbound/contactlists/{contactListId}/contacts";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(contactListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("contactIds" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "contactIds");
		}

		if (this.#checkJSONSchemaType(query["contactIds"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactIds", "array");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.contactListId = contactListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add phone numbers to a Dialer DNC list.
	 * @async
	 * @param {string} conversationId - Conversation ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/conversations/{conversationId}/dnc" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postOutboundConversationDnc(conversationId) {
		const endpointPath = "/api/v2/outbound/conversations/{conversationId}/dnc";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(conversationId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "conversationId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.conversationId = conversationId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes all or expired custom exclusion column entries from a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.expiredOnly] -  Set to true to only remove DNC entries that are expired
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/customexclusioncolumns" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteOutboundDnclistCustomexclusioncolumns(dncListId, query) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/customexclusioncolumns";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expiredOnly" in query && this.#checkJSONSchemaType(query["expiredOnly"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expiredOnly", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add entries to or delete entries from a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {DncPatchCustomExclusionColumnsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/customexclusioncolumns" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchOutboundDnclistCustomexclusioncolumns(dncListId, body) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/customexclusioncolumns";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a basic DncList information object
	 * @async
	 * @param {string} dncListId - Dnclist ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Include import status
	 * @param {boolean} [query.includeSize] -  Include size
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/divisionviews/{dncListId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundDnclistsDivisionview(dncListId, query) {
		const endpointPath = "/api/v2/outbound/dnclists/divisionviews/{dncListId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
			if ("includeSize" in query && this.#checkJSONSchemaType(query["includeSize"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeSize", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of simplified dnc list objects.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Include import status
	 * @param {boolean} [query.includeSize] -  Include size
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.dncSourceType] -  DncSourceType
	 * @param {string[]} [query.id] -  id
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/divisionviews" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundDnclistsDivisionviews(query) {
		const endpointPath = "/api/v2/outbound/dnclists/divisionviews";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
			if ("includeSize" in query && this.#checkJSONSchemaType(query["includeSize"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeSize", "boolean");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("dncSourceType" in query && this.#checkJSONSchemaType(query["dncSourceType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncSourceType", "string");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add email addresses to a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {string[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/emailaddresses" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundDnclistEmailaddresses(dncListId, body) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/emailaddresses";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes all or expired email addresses from a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.expiredOnly] -  Set to true to only remove DNC entries that are expired
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/emailaddresses" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteOutboundDnclistEmailaddresses(dncListId, query) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/emailaddresses";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expiredOnly" in query && this.#checkJSONSchemaType(query["expiredOnly"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expiredOnly", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add emails to or Delete emails from a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {DncPatchEmailsRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/emailaddresses" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchOutboundDnclistEmailaddresses(dncListId, body) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/emailaddresses";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the URI of a DNC list export.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.download] -  Redirect to download uri
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/export" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundDnclistExport(dncListId, query) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/export";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("download" in query && this.#checkJSONSchemaType(query["download"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "download", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Initiate the export of a dnc list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/export" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postOutboundDnclistExport(dncListId) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/export";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get dialer dncList import status.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/importstatus" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundDnclistImportstatus(dncListId) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/importstatus";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add phone numbers to a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.expirationDateTime] -  Expiration date for DNC phone numbers in yyyy-MM-ddTHH:mmZ format
	 * @param {string[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/phonenumbers" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundDnclistPhonenumbers(dncListId, query, body) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/phonenumbers";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expirationDateTime" in query && this.#checkJSONSchemaType(query["expirationDateTime"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expirationDateTime", "string");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes all or expired phone numbers from a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.expiredOnly] -  Set to true to only remove DNC entries that are expired
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/phonenumbers" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteOutboundDnclistPhonenumbers(dncListId, query) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/phonenumbers";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expiredOnly" in query && this.#checkJSONSchemaType(query["expiredOnly"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expiredOnly", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add numbers to or delete numbers from a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {DncPatchPhoneNumbersRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/phonenumbers" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchOutboundDnclistPhonenumbers(dncListId, body) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/phonenumbers";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get dialer DNC list
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Import status
	 * @param {boolean} [query.includeSize] -  Include size
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundDnclist(dncListId, query) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
			if ("includeSize" in query && this.#checkJSONSchemaType(query["includeSize"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeSize", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update dialer DNC list
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {DncList} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundDnclist(dncListId, body) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete dialer DNC list
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundDnclist(dncListId) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Deletes all or expired whatsApp numbers from a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.expiredOnly] -  Set to true to only remove DNC whatsApp numbers that are expired
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/whatsappnumbers" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteOutboundDnclistWhatsappnumbers(dncListId, query) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/whatsappnumbers";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expiredOnly" in query && this.#checkJSONSchemaType(query["expiredOnly"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expiredOnly", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add entries to or delete entries from a DNC list.
	 * @async
	 * @param {string} dncListId - DncList ID
	 * @param {DncPatchWhatsAppNumbersRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists/{dncListId}/whatsappnumbers" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchOutboundDnclistWhatsappnumbers(dncListId, body) {
		const endpointPath = "/api/v2/outbound/dnclists/{dncListId}/whatsappnumbers";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(dncListId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncListId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.dncListId = dncListId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query dialer DNC lists
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Import status
	 * @param {boolean} [query.includeSize] -  Include size
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.dncSourceType] -  DncSourceType
	 * @param {string[]} [query.divisionId] -  Division ID(s)
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundDnclists(query) {
		const endpointPath = "/api/v2/outbound/dnclists";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
			if ("includeSize" in query && this.#checkJSONSchemaType(query["includeSize"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeSize", "boolean");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("dncSourceType" in query && this.#checkJSONSchemaType(query["dncSourceType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "dncSourceType", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "array");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create dialer DNC list
	 * @async
	 * @param {DncListCreate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/dnclists" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundDnclists(body) {
		const endpointPath = "/api/v2/outbound/dnclists";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Dialer Event
	 * @async
	 * @param {string} eventId - Event Log ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/events/{eventId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundEvent(eventId) {
		const endpointPath = "/api/v2/outbound/events/{eventId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(eventId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "eventId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.eventId = eventId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query Event Logs
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.category] -  Category
	 * @param {string} [query.level] -  Level
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/events" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundEvents(query) {
		const endpointPath = "/api/v2/outbound/events";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("category" in query && this.#checkJSONSchemaType(query["category"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "category", "string");
			}
			if ("level" in query && this.#checkJSONSchemaType(query["level"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "level", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete multiple file specification templates.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} query.id -  File Specification template id(s) to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/filespecificationtemplates/bulk" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteOutboundFilespecificationtemplatesBulk(query) {
		const endpointPath = "/api/v2/outbound/filespecificationtemplates/bulk";
		const endpointMethod = "DELETE";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("id" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "id");
		}

		if (this.#checkJSONSchemaType(query["id"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query File Specification Templates
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/filespecificationtemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundFilespecificationtemplates(query) {
		const endpointPath = "/api/v2/outbound/filespecificationtemplates";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create File Specification Template
	 * @async
	 * @param {FileSpecificationTemplate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/filespecificationtemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundFilespecificationtemplates(body) {
		const endpointPath = "/api/v2/outbound/filespecificationtemplates";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get File Specification Template
	 * @async
	 * @param {string} fileSpecificationTemplateId - File Specification Template ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/filespecificationtemplates/{fileSpecificationTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundFilespecificationtemplate(fileSpecificationTemplateId) {
		const endpointPath = "/api/v2/outbound/filespecificationtemplates/{fileSpecificationTemplateId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(fileSpecificationTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "fileSpecificationTemplateId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.fileSpecificationTemplateId = fileSpecificationTemplateId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update File Specification Template
	 * @async
	 * @param {string} fileSpecificationTemplateId - File Specification Template ID
	 * @param {FileSpecificationTemplate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/filespecificationtemplates/{fileSpecificationTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundFilespecificationtemplate(fileSpecificationTemplateId, body) {
		const endpointPath = "/api/v2/outbound/filespecificationtemplates/{fileSpecificationTemplateId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(fileSpecificationTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "fileSpecificationTemplateId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.fileSpecificationTemplateId = fileSpecificationTemplateId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete File Specification Template
	 * @async
	 * @param {string} fileSpecificationTemplateId - File Specification Template ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/filespecificationtemplates/{fileSpecificationTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundFilespecificationtemplate(fileSpecificationTemplateId) {
		const endpointPath = "/api/v2/outbound/filespecificationtemplates/{fileSpecificationTemplateId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(fileSpecificationTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "fileSpecificationTemplateId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.fileSpecificationTemplateId = fileSpecificationTemplateId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the import status for an import template.
	 * @async
	 * @param {string} importTemplateId - importTemplateId
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.listNamePrefix] -  listNamePrefix
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/importtemplates/{importTemplateId}/importstatus" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundImporttemplateImportstatus(importTemplateId, query) {
		const endpointPath = "/api/v2/outbound/importtemplates/{importTemplateId}/importstatus";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(importTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importTemplateId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("listNamePrefix" in query && this.#checkJSONSchemaType(query["listNamePrefix"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "listNamePrefix", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.importTemplateId = importTemplateId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get Import Template
	 * @async
	 * @param {string} importTemplateId - Import Template ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Import status
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/importtemplates/{importTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundImporttemplate(importTemplateId, query) {
		const endpointPath = "/api/v2/outbound/importtemplates/{importTemplateId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(importTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importTemplateId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.importTemplateId = importTemplateId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update Import Template
	 * @async
	 * @param {string} importTemplateId - Import Template ID
	 * @param {ImportTemplate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/importtemplates/{importTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundImporttemplate(importTemplateId, body) {
		const endpointPath = "/api/v2/outbound/importtemplates/{importTemplateId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(importTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importTemplateId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.importTemplateId = importTemplateId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete Import Template
	 * @async
	 * @param {string} importTemplateId - Import Template ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/importtemplates/{importTemplateId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundImporttemplate(importTemplateId) {
		const endpointPath = "/api/v2/outbound/importtemplates/{importTemplateId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(importTemplateId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "importTemplateId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.importTemplateId = importTemplateId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query Import Templates
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.includeImportStatus] -  Import status
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @param {string} [query.contactListTemplateId] -  Contact List Template ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/importtemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundImporttemplates(query) {
		const endpointPath = "/api/v2/outbound/importtemplates";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("includeImportStatus" in query && this.#checkJSONSchemaType(query["includeImportStatus"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "includeImportStatus", "boolean");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("contactListTemplateId" in query && this.#checkJSONSchemaType(query["contactListTemplateId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListTemplateId", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create Import Template
	 * @async
	 * @param {ImportTemplate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/importtemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundImporttemplates(body) {
		const endpointPath = "/api/v2/outbound/importtemplates";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete multiple import templates.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} query.id -  import template id(s) to delete
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/importtemplates" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING} If a required query string parameter is missing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	deleteOutboundImporttemplates(query) {
		const endpointPath = "/api/v2/outbound/importtemplates";
		const endpointMethod = "DELETE";

		// Check the query string parameters
		if (typeof query !== "object" || query === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, true);
		}

		if ("id" in query === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_MISSING(endpointPath, endpointMethod, "id");
		}

		if (this.#checkJSONSchemaType(query["id"], "array") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add multiple import templates
	 * @async
	 * @param {ImportTemplate[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/importtemplates/bulk/add" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundImporttemplatesBulkAdd(body) {
		const endpointPath = "/api/v2/outbound/importtemplates/bulk/add";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get progress for a list of messaging campaigns
	 * @async
	 * @param {string[]} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/progress" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundMessagingcampaignsProgress(body) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/progress";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "array") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "array", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the outbound settings for this organization
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/settings" endpoint.
	 */
	getOutboundSettings() {
		const endpointPath = "/api/v2/outbound/settings";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the outbound settings for this organization
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {boolean} [query.useMaxCallsPerAgentDecimal] -  Use maxCallsPerAgent with decimal precision
	 * @param {OutboundSettings} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/settings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchOutboundSettings(query, body) {
		const endpointPath = "/api/v2/outbound/settings";
		const endpointMethod = "PATCH";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("useMaxCallsPerAgentDecimal" in query && this.#checkJSONSchemaType(query["useMaxCallsPerAgentDecimal"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "useMaxCallsPerAgentDecimal", "boolean");
			}
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a Rule Set by ID.
	 * @async
	 * @param {string} ruleSetId - Rule Set ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/rulesets/{ruleSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundRuleset(ruleSetId) {
		const endpointPath = "/api/v2/outbound/rulesets/{ruleSetId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(ruleSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleSetId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.ruleSetId = ruleSetId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a Rule Set.
	 * @async
	 * @param {string} ruleSetId - Rule Set ID
	 * @param {RuleSet} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/rulesets/{ruleSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundRuleset(ruleSetId, body) {
		const endpointPath = "/api/v2/outbound/rulesets/{ruleSetId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(ruleSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleSetId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.ruleSetId = ruleSetId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a Rule Set.
	 * @async
	 * @param {string} ruleSetId - Rule Set ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/rulesets/{ruleSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundRuleset(ruleSetId) {
		const endpointPath = "/api/v2/outbound/rulesets/{ruleSetId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(ruleSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleSetId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.ruleSetId = ruleSetId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of Rule Sets.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/rulesets" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundRulesets(query) {
		const endpointPath = "/api/v2/outbound/rulesets";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a Rule Set.
	 * @async
	 * @param {RuleSet} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/rulesets" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundRulesets(body) {
		const endpointPath = "/api/v2/outbound/rulesets";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a dialer campaign sequence.
	 * @async
	 * @param {string} sequenceId - Campaign Sequence ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/sequences/{sequenceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundSequence(sequenceId) {
		const endpointPath = "/api/v2/outbound/sequences/{sequenceId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sequenceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sequenceId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sequenceId = sequenceId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a new campaign sequence.
	 * @async
	 * @param {string} sequenceId - Campaign Sequence ID
	 * @param {CampaignSequence} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/sequences/{sequenceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundSequence(sequenceId, body) {
		const endpointPath = "/api/v2/outbound/sequences/{sequenceId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sequenceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sequenceId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sequenceId = sequenceId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a dialer campaign sequence.
	 * @async
	 * @param {string} sequenceId - Campaign Sequence ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/sequences/{sequenceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundSequence(sequenceId) {
		const endpointPath = "/api/v2/outbound/sequences/{sequenceId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sequenceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sequenceId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sequenceId = sequenceId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a dialer sequence schedule.
	 * @async
	 * @param {string} sequenceId - Sequence ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/sequences/{sequenceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundSchedulesSequence(sequenceId) {
		const endpointPath = "/api/v2/outbound/schedules/sequences/{sequenceId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sequenceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sequenceId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sequenceId = sequenceId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a new sequence schedule.
	 * @async
	 * @param {string} sequenceId - Sequence ID
	 * @param {SequenceSchedule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/sequences/{sequenceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundSchedulesSequence(sequenceId, body) {
		const endpointPath = "/api/v2/outbound/schedules/sequences/{sequenceId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sequenceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sequenceId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sequenceId = sequenceId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a dialer sequence schedule.
	 * @async
	 * @param {string} sequenceId - Sequence ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/sequences/{sequenceId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundSchedulesSequence(sequenceId) {
		const endpointPath = "/api/v2/outbound/schedules/sequences/{sequenceId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(sequenceId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sequenceId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.sequenceId = sequenceId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for a list of dialer sequence schedules.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/sequences" endpoint.
	 */
	getOutboundSchedulesSequences() {
		const endpointPath = "/api/v2/outbound/schedules/sequences";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of dialer campaign sequences.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {boolean} [query.allowEmptyResult] -  Whether to return an empty page when there are no results for that page
	 * @param {string} [query.filterType] -  Filter type
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.sortBy] -  Sort by
	 * @param {string} [query.sortOrder] -  Sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/sequences" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundSequences(query) {
		const endpointPath = "/api/v2/outbound/sequences";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("allowEmptyResult" in query && this.#checkJSONSchemaType(query["allowEmptyResult"], "boolean") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "allowEmptyResult", "boolean");
			}
			if ("filterType" in query && this.#checkJSONSchemaType(query["filterType"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "filterType", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a new campaign sequence.
	 * @async
	 * @param {CampaignSequence} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/sequences" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundSequences(body) {
		const endpointPath = "/api/v2/outbound/sequences";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the Dialer wrap up code mapping.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/wrapupcodemappings" endpoint.
	 */
	getOutboundWrapupcodemappings() {
		const endpointPath = "/api/v2/outbound/wrapupcodemappings";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the Dialer wrap up code mapping.
	 * @async
	 * @param {WrapUpCodeMapping} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/wrapupcodemappings" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundWrapupcodemappings(body) {
		const endpointPath = "/api/v2/outbound/wrapupcodemappings";
		const endpointMethod = "PUT";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an Outbound Digital Rule Set
	 * @async
	 * @param {string} digitalRuleSetId - The Digital Rule Set ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/digitalrulesets/{digitalRuleSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundDigitalruleset(digitalRuleSetId) {
		const endpointPath = "/api/v2/outbound/digitalrulesets/{digitalRuleSetId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(digitalRuleSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "digitalRuleSetId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.digitalRuleSetId = digitalRuleSetId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an Outbound Digital Rule Set
	 * @async
	 * @param {string} digitalRuleSetId - The Digital Rule Set ID
	 * @param {DigitalRuleSet} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/digitalrulesets/{digitalRuleSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundDigitalruleset(digitalRuleSetId, body) {
		const endpointPath = "/api/v2/outbound/digitalrulesets/{digitalRuleSetId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(digitalRuleSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "digitalRuleSetId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.digitalRuleSetId = digitalRuleSetId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an Outbound Digital Rule Set
	 * @async
	 * @param {string} digitalRuleSetId - The Digital Rule Set ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/digitalrulesets/{digitalRuleSetId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundDigitalruleset(digitalRuleSetId) {
		const endpointPath = "/api/v2/outbound/digitalrulesets/{digitalRuleSetId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(digitalRuleSetId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "digitalRuleSetId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.digitalRuleSetId = digitalRuleSetId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of Outbound Digital Rule Sets
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.sortBy] -  The field to sort by
	 * @param {string} [query.sortOrder] -  The direction to sort
	 * @param {string} [query.name] -  Name
	 * @param {string[]} [query.id] -  A list of digital rule set ids to bulk fetch
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/digitalrulesets" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundDigitalrulesets(query) {
		const endpointPath = "/api/v2/outbound/digitalrulesets";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create an Outbound Digital Rule Set
	 * @async
	 * @param {DigitalRuleSet} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/digitalrulesets" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundDigitalrulesets(body) {
		const endpointPath = "/api/v2/outbound/digitalrulesets";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a basic Messaging Campaign information object
	 * @async
	 * @param {string} messagingCampaignId - The Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/divisionviews/{messagingCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundMessagingcampaignsDivisionview(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/divisionviews/{messagingCampaignId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of basic Messaging Campaign information objects
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.sortOrder] -  The direction to sort
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.type] -  Campaign Type
	 * @param {string[]} [query.id] -  id
	 * @param {string} [query.senderSmsPhoneNumber] -  Sender SMS Phone Number
	 * @param {string} [query.contentTemplateId] -  Content template ID
	 * @param {string} [query.campaignStatus] -  Campaign Status
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/divisionviews" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundMessagingcampaignsDivisionviews(query) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/divisionviews";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("type" in query && this.#checkJSONSchemaType(query["type"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "type", "string");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
			if ("senderSmsPhoneNumber" in query && this.#checkJSONSchemaType(query["senderSmsPhoneNumber"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "senderSmsPhoneNumber", "string");
			}
			if ("contentTemplateId" in query && this.#checkJSONSchemaType(query["contentTemplateId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contentTemplateId", "string");
			}
			if ("campaignStatus" in query && this.#checkJSONSchemaType(query["campaignStatus"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignStatus", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an Outbound Messaging Campaign
	 * @async
	 * @param {string} messagingCampaignId - The Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundMessagingcampaign(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an Outbound Messaging Campaign
	 * @async
	 * @param {string} messagingCampaignId - The Messaging Campaign ID
	 * @param {MessagingCampaign} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundMessagingcampaign(messagingCampaignId, body) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an Outbound Messaging Campaign
	 * @async
	 * @param {string} messagingCampaignId - The Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundMessagingcampaign(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get messaging campaign's progress
	 * @async
	 * @param {string} messagingCampaignId - The Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/progress" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundMessagingcampaignProgress(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/progress";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Reset messaging campaign progress and recycle the messaging campaign
	 * @async
	 * @param {string} messagingCampaignId - The Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/progress" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundMessagingcampaignProgress(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/progress";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get messaging campaign diagnostics
	 * @async
	 * @param {string} messagingCampaignId - The Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/diagnostics" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundMessagingcampaignDiagnostics(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/diagnostics";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Start the campaign
	 * @async
	 * @param {string} messagingCampaignId - The Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/start" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postOutboundMessagingcampaignStart(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/start";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Stop the campaign
	 * @async
	 * @param {string} messagingCampaignId - The Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/stop" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postOutboundMessagingcampaignStop(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns/{messagingCampaignId}/stop";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query a list of Messaging Campaigns
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {number} [query.pageSize] -  Page size. The max that will be returned is 100.
	 * @param {number} [query.pageNumber] -  Page number
	 * @param {string} [query.sortBy] -  The field to sort by
	 * @param {string} [query.sortOrder] -  The direction to sort
	 * @param {string} [query.name] -  Name
	 * @param {string} [query.contactListId] -  Contact List ID
	 * @param {string[]} [query.divisionId] -  Division ID(s)
	 * @param {string} [query.type] -  Campaign Type
	 * @param {string} [query.senderSmsPhoneNumber] -  Sender SMS Phone Number
	 * @param {string[]} [query.id] -  A list of messaging campaign ids to bulk fetch
	 * @param {string} [query.contentTemplateId] -  Content template ID
	 * @param {string} [query.campaignStatus] -  Campaign Status
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getOutboundMessagingcampaigns(query) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("pageNumber" in query && this.#checkJSONSchemaType(query["pageNumber"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageNumber", "integer");
			}
			if ("sortBy" in query && this.#checkJSONSchemaType(query["sortBy"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortBy", "string");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("name" in query && this.#checkJSONSchemaType(query["name"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "name", "string");
			}
			if ("contactListId" in query && this.#checkJSONSchemaType(query["contactListId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contactListId", "string");
			}
			if ("divisionId" in query && this.#checkJSONSchemaType(query["divisionId"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "divisionId", "array");
			}
			if ("type" in query && this.#checkJSONSchemaType(query["type"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "type", "string");
			}
			if ("senderSmsPhoneNumber" in query && this.#checkJSONSchemaType(query["senderSmsPhoneNumber"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "senderSmsPhoneNumber", "string");
			}
			if ("id" in query && this.#checkJSONSchemaType(query["id"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "id", "array");
			}
			if ("contentTemplateId" in query && this.#checkJSONSchemaType(query["contentTemplateId"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "contentTemplateId", "string");
			}
			if ("campaignStatus" in query && this.#checkJSONSchemaType(query["campaignStatus"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "campaignStatus", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a Messaging Campaign
	 * @async
	 * @param {MessagingCampaign} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/messagingcampaigns" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postOutboundMessagingcampaigns(body) {
		const endpointPath = "/api/v2/outbound/messagingcampaigns";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an email campaign schedule.
	 * @async
	 * @param {string} emailCampaignId - Email Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/emailcampaigns/{emailCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundSchedulesEmailcampaign(emailCampaignId) {
		const endpointPath = "/api/v2/outbound/schedules/emailcampaigns/{emailCampaignId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(emailCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "emailCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.emailCampaignId = emailCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update an email campaign schedule.
	 * @async
	 * @param {string} emailCampaignId - Email Campaign ID
	 * @param {EmailCampaignSchedule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/emailcampaigns/{emailCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundSchedulesEmailcampaign(emailCampaignId, body) {
		const endpointPath = "/api/v2/outbound/schedules/emailcampaigns/{emailCampaignId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(emailCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "emailCampaignId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.emailCampaignId = emailCampaignId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete an email campaign schedule.
	 * @async
	 * @param {string} emailCampaignId - Email Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/emailcampaigns/{emailCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundSchedulesEmailcampaign(emailCampaignId) {
		const endpointPath = "/api/v2/outbound/schedules/emailcampaigns/{emailCampaignId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(emailCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "emailCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.emailCampaignId = emailCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for a list of email campaign schedules.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/emailcampaigns" endpoint.
	 */
	getOutboundSchedulesEmailcampaigns() {
		const endpointPath = "/api/v2/outbound/schedules/emailcampaigns";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a messaging campaign schedule.
	 * @async
	 * @param {string} messagingCampaignId - Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/messagingcampaigns/{messagingCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getOutboundSchedulesMessagingcampaign(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/schedules/messagingcampaigns/{messagingCampaignId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a new messaging campaign schedule.
	 * @async
	 * @param {string} messagingCampaignId - Messaging Campaign ID
	 * @param {MessagingCampaignSchedule} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/messagingcampaigns/{messagingCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putOutboundSchedulesMessagingcampaign(messagingCampaignId, body) {
		const endpointPath = "/api/v2/outbound/schedules/messagingcampaigns/{messagingCampaignId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a messaging campaign schedule.
	 * @async
	 * @param {string} messagingCampaignId - Messaging Campaign ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/messagingcampaigns/{messagingCampaignId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteOutboundSchedulesMessagingcampaign(messagingCampaignId) {
		const endpointPath = "/api/v2/outbound/schedules/messagingcampaigns/{messagingCampaignId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(messagingCampaignId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "messagingCampaignId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.messagingCampaignId = messagingCampaignId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for a list of messaging campaign schedules.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/outbound/schedules/messagingcampaigns" endpoint.
	 */
	getOutboundSchedulesMessagingcampaigns() {
		const endpointPath = "/api/v2/outbound/schedules/messagingcampaigns";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { OutboundAPI };