/**
 * Task Management
 * @module gc-platform-api-task-management
 * @license MIT
 */

// This file was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.324Z

// TODO: Implement JSON schema verification for input and output objects
// TODO: Implement HTTP response typedefs

// Set strict mode
"use strict";

// Errors
import { errors } from "../gc-platform-api-client-errors.js";

// Symbols
import { symbols } from "../gc-platform-api-client-symbols.js";

/** @typedef {import("../gc-platform-api-client-class.js").GCPlatformAPIClient} GCPlatformAPIClient */
/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * @typedef {object} BulkJobAddRequest
 * @property {WorkitemCommonCreate[]} entities - The list of workitem entities to create.
 */
 
/**
 * @typedef {object} BulkJobEntity
 * @property {string} [id] - The id of the bulk job entity.
 */
 
/**
 * @typedef {object} BulkJobTerminateRequest
 * @property {BulkJobEntity[]} entities - The list of bulk job entities to terminate.
 */
 
/**
 * @typedef {object} BulkJobUpdate
 * @property {string} state - The destination state of the bulk job.
 */
 
/**
 * @typedef {object} DataSchema
 * @property {string} [id] - The globally unique identifier for the schema.  Only required if a schema is used for custom fields during external entity creation or updates.
 * @property {string} [name]
 * @property {number} version - The schema's version, a positive integer. Required for updates.
 * @property {string[]} [appliesTo] - Indicates the built-in entity type to which this schema applies.
 * @property {boolean} [enabled] - The schema's enabled/disabled status. A disabled schema cannot be assigned to any other entities, but the data on those entities from the schema still exists.
 * @property {DomainEntityRef} [createdBy] - The URI of the user that created this schema.
 * @property {string} [dateCreated] - The date and time this schema was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {JsonSchemaDocument} jsonSchema - A JSON schema defining the extension to the built-in entity type.
 * @property {string} [selfUri] - The URI for this object
 */
 
/**
 * @typedef {object} DomainEntityRef
 * @property {string} [id]
 * @property {string} [name]
 * @property {string} [selfUri]
 */
 
/**
 * A JSON Schema document.
 * @typedef {object} JsonSchemaDocument
 * @property {string} [id]
 * @property {string} [$schema]
 * @property {string} [title]
 * @property {string} [description]
 * @property {string} [type]
 * @property {string[]} [required]
 * @property {object} [properties]
 * @property {object} [additionalProperties]
 */
 
/**
 * @typedef {object} WorkbinCreate
 * @property {string} name - Workbin name. Valid length between 3 and 256 characters.
 * @property {string} [description] - Workbin description. Maximum length of 512 characters.
 * @property {string} [divisionId] - The ID of the division the Workbin belongs to. Defaults to home division ID.
 */
 
/**
 * @typedef {object} WorkbinQueryRequest
 * @property {number} [pageSize] - Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.
 * @property {string} [select] - Specify the value 'Count' for this parameter in order to return only the record count.
 * @property {WorkitemFilter[]} filters - List of filter objects to be used in the search.
 * @property {string[]} [attributes] - List of entity attributes to be retrieved in the result.
 * @property {string} [after] - The cursor that points to the end of the set of entities that has been returned.
 * @property {WorkbinQuerySort} [sort] - Sort
 */
 
/**
 * @typedef {object} WorkbinQuerySort
 * @property {string} [name] - Specify an attribute for sorting. It's possible to use an attribute both for sorting and in the query at the same time, but these restrictions apply: Only the operators EQ, LT, LTE, GT, GTE, BETWEEN and BEGINS_WITH are supported and the attribute can't be present in more than one filter.
 * @property {boolean} [ascending] - Sort Ascending
 */
 
/**
 * @typedef {object} WorkbinUpdate
 * @property {string} [name] - Workbin name. Valid length between 3 and 256 characters.
 * @property {string} [description] - Workbin description. Maximum length of 512 characters.
 */
 
/**
 * @typedef {object} WorkitemCommonCreate
 * @property {string} name - The name of the Workitem. Valid length between 3 and 256 characters.
 * @property {number} [priority] - The priority of the Workitem. The valid range is between -25,000,000 and 25,000,000.
 * @property {string} [dateDue] - The due date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateExpires] - The expiry date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [durationSeconds] - The estimated duration in seconds to complete the Workitem. Maximum of 365 days.
 * @property {number} [ttl] - The epoch timestamp in seconds specifying the time to live for the Workitem. Can not be greater than 365 days from the current time.
 * @property {string} [statusId] - The ID of the Status of the Workitem.
 * @property {string} [workbinId] - The ID of Workbin that contains the Workitem.
 * @property {boolean} [autoStatusTransition] - Set it to false to disable auto status transition. By default, it is enabled.
 * @property {string} [description] - The description of the Workitem. Maximum length of 512 characters.
 * @property {string} typeId - The ID of the Worktype of the Workitem.
 * @property {object} [customFields] - Custom fields defined in the schema referenced by the worktype of the workitem.
 * @property {string} [queueId] - The ID of the Workitems queue. Must be a valid UUID.
 * @property {string} [assigneeId] - The ID of the assignee of the Workitem. Must be a valid UUID.
 * @property {string} [languageId] - The ID of language of the Workitem. Must be a valid UUID.
 * @property {string} [externalContactId] - The ID of the external contact of the Workitem. Must be a valid UUID.
 * @property {string} [externalTag] - The external tag of the Workitem.
 * @property {string[]} [skillIds] - The skill IDs of the Workitem. Must be valid UUIDs.
 * @property {string} [scriptId] - The ID of the Workitems script. Must be a valid UUID.
 */
 
/**
 * @typedef {object} WorkitemCreate
 * @property {string} name - The name of the Workitem. Valid length between 3 and 256 characters.
 * @property {number} [priority] - The priority of the Workitem. The valid range is between -25,000,000 and 25,000,000.
 * @property {string} [dateDue] - The due date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateExpires] - The expiry date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [durationSeconds] - The estimated duration in seconds to complete the Workitem. Maximum of 365 days.
 * @property {number} [ttl] - The epoch timestamp in seconds specifying the time to live for the Workitem. Can not be greater than 365 days from the current time.
 * @property {string} [statusId] - The ID of the Status of the Workitem.
 * @property {string} [workbinId] - The ID of Workbin that contains the Workitem.
 * @property {boolean} [autoStatusTransition] - Set it to false to disable auto status transition. By default, it is enabled.
 * @property {string} [description] - The description of the Workitem. Maximum length of 512 characters.
 * @property {string} typeId - The ID of the Worktype of the Workitem.
 * @property {object} [customFields] - Custom fields defined in the schema referenced by the worktype of the workitem.
 * @property {string} [queueId] - The ID of the Workitems queue. Must be a valid UUID.
 * @property {string} [assigneeId] - The ID of the assignee of the Workitem. Must be a valid UUID.
 * @property {string} [languageId] - The ID of language of the Workitem. Must be a valid UUID.
 * @property {string} [externalContactId] - The ID of the external contact of the Workitem. Must be a valid UUID.
 * @property {string} [externalTag] - The external tag of the Workitem.
 * @property {string[]} [skillIds] - The skill IDs of the Workitem. Must be valid UUIDs.
 * @property {string} [scriptId] - The ID of the Workitems script. Must be a valid UUID.
 * @property {string} [wrapupCode] - The ID of the wrapup. Must be a valid UUID.
 * @property {string} [utilizationLabelId] - The ID of utilization label of the Workitem. Must be a valid UUID.
 * @property {WorkitemScoredAgentRequest[]} [scoredAgents] - A list of scored agents for the Workitem. A workitem can have a maximum of 20 scored agents.
 * @property {string[]} [preferredAgentIds] - The preferred agent IDs of the Workitem. Must be valid UUIDs.
 */
 
/**
 * @typedef {object} WorkitemDateBasedCondition
 * @property {string} attribute - The name of the workitem date attribute.
 * @property {number} relativeMinutesToInvocation - The time in minutes before or after the date attribute.
 */
 
/**
 * @typedef {object} WorkitemDateBasedConditionUpdate
 * @property {string} [attribute] - The name of the workitem date attribute.
 * @property {number} [relativeMinutesToInvocation] - The time in minutes before or after the date attribute.
 */
 
/**
 * @typedef {object} WorkitemDateBasedRuleCreate
 * @property {string} name - The name of the rule.
 * @property {WorkitemDateBasedCondition} condition - The rules condition. If the condition criteria is met the rules action will be executed.
 */
 
/**
 * @typedef {object} WorkitemDateBasedRuleUpdate
 * @property {string} [name] - The name of the rule.
 * @property {WorkitemDateBasedConditionUpdate} [condition] - The rules condition. If the condition criteria is met the rules action will be executed.
 */
 
/**
 * @typedef {object} WorkitemFilter
 * @property {string} name - Attribute name.
 * @property {string} type - Attribute type.
 * @property {string} operator - Filter operator.
 * @property {string[]} values - List of values to be used in the filter.
 */
 
/**
 * @typedef {object} WorkitemManualAssign
 * @property {string} id - The globally unique identifier for this user.
 */
 
/**
 * @typedef {object} WorkitemOnAttributeChangeCondition
 * @property {string} attribute - The name of the workitem attribute whose change will be evaluated as part of the rule.
 * @property {string} newValue - The new value of the attribute. If the attribute is updated to this value this part of the condition will be met.
 * @property {string} [oldValue] - The old value of the attribute. If the attribute was updated from this value this part of the condition will be met.
 */
 
/**
 * @typedef {object} WorkitemOnAttributeChangeConditionUpdate
 * @property {string} attribute - The name of the workitem attribute whose change will be evaluated as part of the rule.
 * @property {string} newValue - The new value of the attribute. If the attribute is updated to this value this part of the condition will be met.
 * @property {string} [oldValue] - The old value of the attribute. If the attribute was updated from this value this part of the condition will be met.
 */
 
/**
 * @typedef {object} WorkitemOnAttributeChangeRuleCreate
 * @property {string} name - The name of the rule.
 * @property {WorkitemOnAttributeChangeCondition} condition - The rules condition. If the condition criteria is met the rules action will be executed.
 */
 
/**
 * @typedef {object} WorkitemOnAttributeChangeRuleUpdate
 * @property {string} [name] - The name of the rule.
 * @property {WorkitemOnAttributeChangeConditionUpdate} [condition] - The rules condition. If the condition criteria is met the rules action will be executed.
 */
 
/**
 * @typedef {object} WorkitemOnCreateRuleCreate
 * @property {string} name - The name of the rule.
 */
 
/**
 * @typedef {object} WorkitemOnCreateRuleUpdate
 * @property {string} [name] - The name of the rule.
 */
 
/**
 * @typedef {object} WorkitemQueryJobCreate
 * @property {number} [pageSize] - The total page size requested. Default 25
 * @property {number} [pageNumber] - The page number requested
 * @property {WorkitemQueryJobFilter[]} filters - List of filter objects to be used in the search.
 * @property {WorkitemQueryJobQueryFilters[]} [queryFilters] - Query filters for nested attributes.
 * @property {string[]} [expands] - List of entity attributes to be expanded in the result.
 * @property {string[]} [attributes] - List of entity attributes to be retrieved in the result.
 * @property {WorkitemQueryJobSort} [sort] - Sort
 * @property {string} [dateIntervalStart] - Interval start date to use to filter results based on create date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateIntervalEnd] - Interval end date to use to filter results based on create date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 */
 
/**
 * @typedef {object} WorkitemQueryJobFilter
 * @property {string} name - Attribute name.
 * @property {string} operator - Filter operator.
 * @property {string[]} values - List of values to be used in the filter.
 */
 
/**
 * @typedef {object} WorkitemQueryJobQueryFilters
 * @property {string} name - Name of the attribute to filter.
 * @property {string} [operator] - Query filter logical operator to join criteria.
 * @property {WorkitemQueryJobQueryFiltersCriteria[]} criteria - Query filter criteria.
 */
 
/**
 * @typedef {object} WorkitemQueryJobQueryFiltersCriteria
 * @property {string} [operator] - Query filter logical operator to join predicates.
 * @property {WorkitemQueryJobQueryFiltersPredicate[]} predicates - Query filter predicates. Number of predicates within the query filter should be between 1 and 5.
 */
 
/**
 * @typedef {object} WorkitemQueryJobQueryFiltersPredicate
 * @property {string} name - Property name.
 * @property {string} operator - Query filter predicate operator.
 * @property {object[]} [values] - List of values to be used in the query filter predicate.
 */
 
/**
 * @typedef {object} WorkitemQueryJobSort
 * @property {string} [name] - Specify an attribute for sorting.
 * @property {boolean} [ascending] - Sort Ascending
 */
 
/**
 * @typedef {object} WorkitemRuleSettings
 * @property {boolean} [flowRulesEnabled] - When set to true, the worktypes flow rules will be processed. Default value is false.
 */
 
/**
 * @typedef {object} WorkitemScoredAgentRequest
 * @property {string} [id] - An agents ID. Must be a valid UUID.
 * @property {number} [score] - Agent's score for the workitem, from 0 - 100, higher being better
 */
 
/**
 * @typedef {object} WorkitemStatusCreate
 * @property {string} name - The name of the Status. Valid length between 3 and 256 characters.
 * @property {string} category - The Category of the Status.
 * @property {string[]} [destinationStatusIds] - A list of destination Statuses where a Workitem with this Status can transition to. If the list is empty Workitems with this Status can transition to all other Statuses defined on the Worktype. A Status can have a maximum of 24 destinations.
 * @property {string} [description] - The description of the Status. Maximum length of 512 characters.
 * @property {string} [defaultDestinationStatusId] - Default destination status to which this Status will transition to if auto status transition enabled.
 * @property {number} [statusTransitionDelaySeconds] - Delay in seconds for auto status transition. Required if defaultDestinationStatusId is provided.
 * @property {string} [statusTransitionTime] - Time is represented as an ISO-8601 string without a timezone. For example: HH:mm:ss.SSS
 * @property {boolean} [autoTerminateWorkitem] - Terminate workitem on selection of status. Applicable only for statuses in the Closed category.
 */
 
/**
 * @typedef {object} WorkitemStatusUpdate
 * @property {string} [name] - The name of the Status. Valid length between 3 and 256 characters.
 * @property {string[]} [destinationStatusIds] - A list of destination Statuses where a Workitem with this Status can transition to. If the list is empty Workitems with this Status can transition to all other Statuses defined on the Worktype. A Status can have a maximum of 24 destinations.
 * @property {string} [description] - The description of the Status. Maximum length of 512 characters.
 * @property {string} [defaultDestinationStatusId] - Default destination status to which this Status will transition to if auto status transition enabled.
 * @property {number} [statusTransitionDelaySeconds] - Delay in seconds for auto status transition. Required if defaultDestinationStatusId is provided.
 * @property {string} [statusTransitionTime] - Time is represented as an ISO-8601 string without a timezone. For example: HH:mm:ss.SSS
 * @property {boolean} [autoTerminateWorkitem] - Terminate workitem on selection of status. Applicable only for statuses in the Closed category.
 */
 
/**
 * @typedef {object} WorkitemTerminate
 * @property {string} [statusId] - The ID of the status the workitem should be updated to when terminating. The status must be a 'Closed' category status.
 */
 
/**
 * @typedef {object} WorkitemUpdate
 * @property {string} [name] - The name of the Workitem. Valid length between 3 and 256 characters.
 * @property {number} [priority] - The priority of the Workitem. The valid range is between -25,000,000 and 25,000,000.
 * @property {string} [dateDue] - The due date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [dateExpires] - The expiry date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {number} [durationSeconds] - The estimated duration in seconds to complete the Workitem. Maximum of 365 days.
 * @property {number} [ttl] - The epoch timestamp in seconds specifying the time to live for the Workitem. Can not be greater than 365 days from the current time.
 * @property {string} [statusId] - The ID of the Status of the Workitem.
 * @property {string} [workbinId] - The ID of Workbin that contains the Workitem.
 * @property {boolean} [autoStatusTransition] - Set it to false to disable auto status transition. By default, it is enabled.
 * @property {string} [description] - The description of the Workitem. Maximum length of 512 characters.
 * @property {string} [dateClosed] - The closed date of the Workitem. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z
 * @property {string} [assignmentState] - The assignment state of the Workitem.
 * @property {string} [assignmentOperation] - Set this value to AgentAssignmentAlerting and supply an 'assigneeId' to assign the workitem to an agent and alert the agent of the assignment. Set this value to QueueAssignmentAlerting and supply a 'queueId' to route the workitem to an agent who is a member of the queue and alert the agent.
 * @property {object} [customFields] - Custom fields defined in the schema referenced by the worktype of the workitem. If set to {}, the existing keys and values will be removed.
 * @property {string} [queueId] - The ID of the Workitems queue. Must be a valid UUID.
 * @property {string} [assigneeId] - The ID of the assignee of the Workitem. If supplied it must be a valid UUID.
 * @property {WorkitemScoredAgentRequest[]} [scoredAgents] - A list of scored agents for the Workitem. A workitem can have a maximum of 20 scored agents.
 * @property {string} [externalContactId] - The ID of the external contact of the Workitem. Must be a valid UUID.
 * @property {string} [externalTag] - The external tag of the Workitem.
 * @property {string[]} [skillIds] - The skill IDs of the Workitem. Must be valid UUIDs.
 * @property {string} [languageId] - The ID of language of the Workitem. Must be a valid UUID.
 * @property {string} [utilizationLabelId] - The ID of the utilization label of the Workitem. Must be a valid UUID.
 * @property {string[]} [preferredAgentIds] - The preferred agent IDs of the Workitem. Must be valid UUIDs.
 * @property {string} [scriptId] - The ID of the Workitems script. Must be a valid UUID.
 */
 
/**
 * @typedef {object} WorkitemWrapupUpdate
 * @property {string} action - Action to be performed for the wrapup code.
 * @property {string} wrapupCode - The wrapup code which will be added/removed.
 */
 
/**
 * @typedef {object} WorktypeCreate
 * @property {string} name - The name of the Worktype. Valid length between 3 and 256 characters.
 * @property {string} defaultWorkbinId - The ID of the default Workbin for Workitems created from the Worktype.
 * @property {number} [defaultDurationSeconds] - The default duration in seconds for Workitems created from the Worktype. Maximum of 365 days.
 * @property {number} [defaultExpirationSeconds] - The default expiration time in seconds for Workitems created from the Worktype. Maximum of 365 days.
 * @property {number} [defaultDueDurationSeconds] - The default due duration in seconds for Workitems created from the Worktype. Maximum of 365 days.
 * @property {number} [defaultPriority] - The default priority for Workitems created from the Worktype. The valid range is between -25,000,000 and 25,000,000.
 * @property {number} [defaultTtlSeconds] - The default time to time to live in seconds for Workitems created from the Worktype. The valid range is between 1 and 365 days.
 * @property {boolean} [assignmentEnabled] - When set to true, Workitems will be sent to the queue of the Worktype as they are created. Default value is false.
 * @property {string} [schemaId] - The ID of the custom attribute schema for Workitems created from the Worktype. Must be a valid UUID.
 * @property {number} [serviceLevelTarget] - The target service level for Workitems created from the Worktype. The default value is 100.
 * @property {WorkitemRuleSettings} [ruleSettings] - Settings for the worktypes rules.
 * @property {string} [description] - The description of the Worktype. Maximum length of 512 characters.
 * @property {string} [divisionId] - The ID of the division the Worktype belongs to. Defaults to the default Workbin division ID. The Worktype must be in the same division as its default Workbin.
 * @property {boolean} [disableDefaultStatusCreation] - Set to true to disable default status creation. Default statuses are created with the Worktype by default
 * @property {number} [schemaVersion] - The version of the Worktypes custom attribute schema. The latest schema version will be used if this property is not set.
 * @property {string} [defaultQueueId] - The ID of the default queue for Workitems created from the Worktype. Must be a valid UUID.
 * @property {string} [defaultLanguageId] - The ID of the default language for Workitems created from the Worktype. Must be a valid UUID.
 * @property {string[]} [defaultSkillIds] - The IDs of the default skills for Workitems created from the Worktype. Must be valid UUIDs. Maximum of 20 IDs
 * @property {string} [defaultScriptId] - The default script for Workitems created from the Worktype. Must be a valid UUID.
 */
 
/**
 * @typedef {object} WorktypeQueryRequest
 * @property {number} [pageSize] - Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.
 * @property {string} [select] - Specify the value 'Count' for this parameter in order to return only the record count.
 * @property {WorkitemFilter[]} filters - List of filter objects to be used in the search.
 * @property {string[]} [attributes] - List of entity attributes to be retrieved in the result.
 * @property {string} [after] - The cursor that points to the end of the set of entities that has been returned.
 * @property {WorktypeQuerySort} [sort] - Sort
 */
 
/**
 * @typedef {object} WorktypeQuerySort
 * @property {string} [name] - Specify an attribute for sorting. It's possible to use an attribute both for sorting and in the query at the same time, but these restrictions apply: Only the operators EQ, LT, LTE, GT, GTE, BETWEEN and BEGINS_WITH are supported and the attribute can't be present in more than one filter.
 * @property {boolean} [ascending] - Sort Ascending
 */
 
/**
 * @typedef {object} WorktypeUpdate
 * @property {string} [name] - The name of the Worktype. Valid length between 3 and 256 characters.
 * @property {string} [defaultWorkbinId] - The ID of the default Workbin for Workitems created from the Worktype.
 * @property {number} [defaultDurationSeconds] - The default duration in seconds for Workitems created from the Worktype. Maximum of 365 days.
 * @property {number} [defaultExpirationSeconds] - The default expiration time in seconds for Workitems created from the Worktype. Maximum of 365 days.
 * @property {number} [defaultDueDurationSeconds] - The default due duration in seconds for Workitems created from the Worktype. Maximum of 365 days.
 * @property {number} [defaultPriority] - The default priority for Workitems created from the Worktype. The valid range is between -25,000,000 and 25,000,000.
 * @property {number} [defaultTtlSeconds] - The default time to time to live in seconds for Workitems created from the Worktype. The valid range is between 1 and 365 days.
 * @property {boolean} [assignmentEnabled] - When set to true, Workitems will be sent to the queue of the Worktype as they are created. Default value is false.
 * @property {string} [schemaId] - The ID of the custom attribute schema for Workitems created from the Worktype. Must be a valid UUID.
 * @property {number} [serviceLevelTarget] - The target service level for Workitems created from the Worktype. The default value is 100.
 * @property {WorkitemRuleSettings} [ruleSettings] - Settings for the worktypes rules.
 * @property {string} [description] - The description of the Worktype. Maximum length of 512 characters.
 * @property {string} [defaultStatusId] - The ID of the default status for Workitems created from the Worktype.
 * @property {number} [schemaVersion] - The version of the Worktypes custom attribute schema. The latest schema version will be used if this property is not set.
 * @property {string} [defaultLanguageId] - The ID of the default language for Workitems created from the Worktype. Must be a valid UUID.
 * @property {string[]} [defaultSkillIds] - The IDs of the default skills for Workitems created from the Worktype. Must be valid UUIDs. Maximum of 20 IDs
 * @property {string} [defaultQueueId] - The ID of the default queue for Workitems created from the Worktype. Must be a valid UUID.
 * @property {string} [defaultScriptId] - The default script for Workitems created from the Worktype. Must be a valid UUID.
 */
 

/**
 * TaskManagement - Task Management
 * @class TaskManagement
 */
class TaskManagementAPI {
	// Private instance properties
	#gcPlatformAPIClient = null;

	/**
	 * Constructor for the TaskManagement class
	 * @constructor
	 * @param {GCPlatformAPIClient} gcPlatformAPIClient - The Genesys Cloud Platform API client instance.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID} If the Genesys Cloud Platform API client instance argument is not an object.
	 */
	constructor(gcPlatformAPIClient) {
		// Check the Genesys Cloud Platform API client instance argument
		if (typeof gcPlatformAPIClient !== "object" || symbols.GCPlatformAPIClient in gcPlatformAPIClient === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INSTANCE_TYPE_INVALID();
		}

		// Initialize the instance properties
		this.#gcPlatformAPIClient = gcPlatformAPIClient;
	}

	/**
	 * Get bulk jobs created by the currently logged in user.
	 * @async
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {number} [query.pageSize] -  Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.
	 * @param {string} [query.sortOrder] -  Ascending or descending sort order
	 * @param {string} [query.action] -  The bulk job action.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/jobs/users/me" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getTaskmanagementWorkitemsBulkJobsUsersMe(query) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/jobs/users/me";
		const endpointMethod = "GET";

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
			if ("action" in query && this.#checkJSONSchemaType(query["action"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "action", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the bulk add job associated with the job id.
	 * @async
	 * @param {string} bulkJobId - Bulk job id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsBulkAddJob(bulkJobId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bulkJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bulkJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bulkJobId = bulkJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a bulk add job
	 * @async
	 * @param {string} bulkJobId - Bulk job id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorkitemsBulkAddJob(bulkJobId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bulkJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bulkJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bulkJobId = bulkJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update workitem bulk add job.
	 * @async
	 * @param {string} bulkJobId - Bulk job id
	 * @param {BulkJobUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorkitemsBulkAddJob(bulkJobId, body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bulkJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bulkJobId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bulkJobId = bulkJobId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get bulk add job results.
	 * @async
	 * @param {string} bulkJobId - Bulk job id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}/results" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsBulkAddJobResults(bulkJobId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/add/jobs/{bulkJobId}/results";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bulkJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bulkJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bulkJobId = bulkJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a workitem bulk add job.
	 * @async
	 * @param {BulkJobAddRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/add/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorkitemsBulkAddJobs(body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/add/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get bulk terminate job results.
	 * @async
	 * @param {string} bulkJobId - Bulk job id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}/results" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsBulkTerminateJobResults(bulkJobId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}/results";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bulkJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bulkJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bulkJobId = bulkJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the bulk job associated with the job id.
	 * @async
	 * @param {string} bulkJobId - Bulk job id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsBulkTerminateJob(bulkJobId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bulkJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bulkJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bulkJobId = bulkJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a Bulk job
	 * @async
	 * @param {string} bulkJobId - Bulk job id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorkitemsBulkTerminateJob(bulkJobId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bulkJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bulkJobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bulkJobId = bulkJobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update workitem bulk terminate job.
	 * @async
	 * @param {string} bulkJobId - Bulk job id
	 * @param {BulkJobUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorkitemsBulkTerminateJob(bulkJobId, body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs/{bulkJobId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(bulkJobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "bulkJobId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.bulkJobId = bulkJobId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a workitem bulk terminate job.
	 * @async
	 * @param {BulkJobTerminateRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/bulk/terminate/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorkitemsBulkTerminateJobs(body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/bulk/terminate/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for workbins
	 * @async
	 * @param {WorkbinQueryRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workbins/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorkbinsQuery(body) {
		const endpointPath = "/api/v2/taskmanagement/workbins/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a workbin
	 * @async
	 * @param {string} workbinId - Workbin ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workbins/{workbinId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkbin(workbinId) {
		const endpointPath = "/api/v2/taskmanagement/workbins/{workbinId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workbinId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workbinId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workbinId = workbinId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a workbin
	 * @async
	 * @param {string} workbinId - Workbin ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workbins/{workbinId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorkbin(workbinId) {
		const endpointPath = "/api/v2/taskmanagement/workbins/{workbinId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workbinId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workbinId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workbinId = workbinId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the attributes of a workbin
	 * @async
	 * @param {string} workbinId - Workbin ID
	 * @param {WorkbinUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workbins/{workbinId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorkbin(workbinId, body) {
		const endpointPath = "/api/v2/taskmanagement/workbins/{workbinId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workbinId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workbinId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workbinId = workbinId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a workbin
	 * @async
	 * @param {WorkbinCreate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workbins" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorkbins(body) {
		const endpointPath = "/api/v2/taskmanagement/workbins";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a workitem
	 * @async
	 * @param {WorkitemCreate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorkitems(body) {
		const endpointPath = "/api/v2/taskmanagement/workitems";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the workitem query job associated with the job id.
	 * @async
	 * @param {string} jobId - jobId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/query/jobs/{jobId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsQueryJob(jobId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/query/jobs/{jobId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get results from for workitem query job 
	 * @async
	 * @param {string} jobId - jobId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/query/jobs/{jobId}/results" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsQueryJobResults(jobId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/query/jobs/{jobId}/results";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(jobId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "jobId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.jobId = jobId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a workitem query job
	 * @async
	 * @param {WorkitemQueryJobCreate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/query/jobs" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorkitemsQueryJobs(body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/query/jobs";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Disconnect the assignee of the workitem
	 * @async
	 * @param {string} workitemId - Workitem ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}/disconnect" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postTaskmanagementWorkitemDisconnect(workitemId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}/disconnect";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Terminate a workitem
	 * @async
	 * @param {string} workitemId - Workitem ID
	 * @param {WorkitemTerminate} [body] - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}/terminate" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorkitemTerminate(workitemId, body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}/terminate";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false && body !== null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a workitem
	 * @async
	 * @param {string} workitemId - Workitem ID
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.expands] -  Which fields to expand. Comma separated if more than one.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getTaskmanagementWorkitem(workitemId, query) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expands" in query && this.#checkJSONSchemaType(query["expands"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expands", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a workitem
	 * @async
	 * @param {string} workitemId - Workitem ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorkitem(workitemId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the attributes of a workitem
	 * @async
	 * @param {string} workitemId - Workitem ID
	 * @param {WorkitemUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorkitem(workitemId, body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Attempts to manually assign a specified workitem to a specified user.  Ignores bullseye ring, PAR score, skills, and languages.
	 * @async
	 * @param {string} workitemId - Workitem ID
	 * @param {WorkitemManualAssign} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}/assignment" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorkitemAssignment(workitemId, body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}/assignment";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Cancel the assignment process for a workitem that is currently queued for assignment through ACD.
	 * @async
	 * @param {string} workitemId - Workitem ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}/acd/cancel" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	postTaskmanagementWorkitemAcdCancel(workitemId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}/acd/cancel";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the core types from which all schemas are built.
	 * @async
	 * @param {string} coreTypeName - Name of the core type
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas/coretypes/{coreTypeName}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsSchemasCoretype(coreTypeName) {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas/coretypes/{coreTypeName}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(coreTypeName, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "coreTypeName", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.coreTypeName = coreTypeName;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get the core types from which all schemas are built.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas/coretypes" endpoint.
	 */
	getTaskmanagementWorkitemsSchemasCoretypes() {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas/coretypes";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get quantitative limits on schemas
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas/limits" endpoint.
	 */
	getTaskmanagementWorkitemsSchemasLimits() {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas/limits";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsSchema(schemaId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas/{schemaId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @param {DataSchema} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	putTaskmanagementWorkitemsSchema(schemaId, body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas/{schemaId}";
		const endpointMethod = "PUT";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas/{schemaId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorkitemsSchema(schemaId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas/{schemaId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a specific version of a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @param {string} versionId - Schema version
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas/{schemaId}/versions/{versionId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsSchemaVersion(schemaId, versionId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas/{schemaId}/versions/{versionId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		if (this.#checkJSONSchemaType(versionId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "versionId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;
		apiCallOptions.pathParameters.versionId = versionId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all versions of a schema
	 * @async
	 * @param {string} schemaId - Schema ID
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas/{schemaId}/versions" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorkitemsSchemaVersions(schemaId) {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas/{schemaId}/versions";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(schemaId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "schemaId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.schemaId = schemaId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a list of schemas.
	 * @async
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas" endpoint.
	 */
	getTaskmanagementWorkitemsSchemas() {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas";
		const endpointMethod = "GET";

		const apiCallOptions = {};

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a schema
	 * @async
	 * @param {DataSchema} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/schemas" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorkitemsSchemas(body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/schemas";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all wrapup codes added for the given user for a workitem.
	 * @async
	 * @param {string} workitemId - The ID of the Workitem.
	 * @param {string} userId - The ID of the user
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.expands] -  Which fields, if any, to expand.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {number} [query.pageSize] -  Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 50.
	 * @param {string} [query.sortOrder] -  Ascending or descending sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}/users/{userId}/wrapups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getTaskmanagementWorkitemUserWrapups(workitemId, userId, query) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}/users/{userId}/wrapups";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expands" in query && this.#checkJSONSchemaType(query["expands"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expands", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add/Remove a wrapup code for a given user in a workitem.
	 * @async
	 * @param {string} workitemId - The ID of the Workitem.
	 * @param {string} userId - The ID of the user
	 * @param {WorkitemWrapupUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}/users/{userId}/wrapups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorkitemUserWrapups(workitemId, userId, body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}/users/{userId}/wrapups";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		if (this.#checkJSONSchemaType(userId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "userId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;
		apiCallOptions.pathParameters.userId = userId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add/Remove a wrapup code for the current user in a workitem.
	 * @async
	 * @param {string} workitemId - The ID of the Workitem.
	 * @param {WorkitemWrapupUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}/users/me/wrapups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorkitemUsersMeWrapups(workitemId, body) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}/users/me/wrapups";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all wrapup codes added for all users for a workitem.
	 * @async
	 * @param {string} workitemId - The ID of the Workitem.
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.expands] -  Which fields, if any, to expand.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {number} [query.pageSize] -  Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 50.
	 * @param {string} [query.sortOrder] -  Ascending or descending sort order
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/workitems/{workitemId}/wrapups" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getTaskmanagementWorkitemWrapups(workitemId, query) {
		const endpointPath = "/api/v2/taskmanagement/workitems/{workitemId}/wrapups";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(workitemId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "workitemId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expands" in query && this.#checkJSONSchemaType(query["expands"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expands", "string");
			}
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
			if ("sortOrder" in query && this.#checkJSONSchemaType(query["sortOrder"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "sortOrder", "string");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.workitemId = workitemId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a status
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} statusId - Status id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorktypeStatus(worktypeId, statusId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(statusId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "statusId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.statusId = statusId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a status
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} statusId - Status id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorktypeStatus(worktypeId, statusId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(statusId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "statusId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.statusId = statusId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the attributes of a status
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} statusId - Status id
	 * @param {WorkitemStatusUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorktypeStatus(worktypeId, statusId, body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses/{statusId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(statusId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "statusId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.statusId = statusId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get list of statuses for this worktype.
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorktypeStatuses(worktypeId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add a status to a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {WorkitemStatusCreate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorktypeStatuses(worktypeId, body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/statuses";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Query for worktypes
	 * @async
	 * @param {WorktypeQueryRequest} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/query" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorktypesQuery(body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/query";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string[]} [query.expands] -  Which fields, if any, to expand.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getTaskmanagementWorktype(worktypeId, query) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("expands" in query && this.#checkJSONSchemaType(query["expands"], "array") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "expands", "array");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorktype(worktypeId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the attributes of a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {WorktypeUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorktype(worktypeId, body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Create a worktype
	 * @async
	 * @param {WorktypeCreate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorktypes(body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes";
		const endpointMethod = "POST";

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get a date based rule
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} ruleId - ruleId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorktypeFlowsDatebasedRule(worktypeId, ruleId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.ruleId = ruleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a date based rule
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} ruleId - ruleId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorktypeFlowsDatebasedRule(worktypeId, ruleId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.ruleId = ruleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the attributes of a date based rule
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} ruleId - ruleId
	 * @param {WorkitemDateBasedRuleUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorktypeFlowsDatebasedRule(worktypeId, ruleId, body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules/{ruleId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.ruleId = ruleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all date based rules for a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {number} [query.pageSize] -  Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getTaskmanagementWorktypeFlowsDatebasedRules(worktypeId, query) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add a date based rule to a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {WorkitemDateBasedRuleCreate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorktypeFlowsDatebasedRules(worktypeId, body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/datebased/rules";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an attribute change rule
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} ruleId - ruleId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorktypeFlowsOnattributechangeRule(worktypeId, ruleId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.ruleId = ruleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a rule
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} ruleId - ruleId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorktypeFlowsOnattributechangeRule(worktypeId, ruleId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.ruleId = ruleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the attributes of a rule
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} ruleId - ruleId
	 * @param {WorkitemOnAttributeChangeRuleUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorktypeFlowsOnattributechangeRule(worktypeId, ruleId, body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules/{ruleId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.ruleId = ruleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all attribute-change rules for a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {number} [query.pageSize] -  Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getTaskmanagementWorktypeFlowsOnattributechangeRules(worktypeId, query) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add an attribute-change rule to a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {WorkitemOnAttributeChangeRuleCreate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorktypeFlowsOnattributechangeRules(worktypeId, body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/onattributechange/rules";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get an on-create rule
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} ruleId - ruleId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	getTaskmanagementWorktypeFlowsOncreateRule(worktypeId, ruleId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.ruleId = ruleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Delete a rule
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} ruleId - ruleId
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 */
	deleteTaskmanagementWorktypeFlowsOncreateRule(worktypeId, ruleId) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}";
		const endpointMethod = "DELETE";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.ruleId = ruleId;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Update the attributes of a rule
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {string} ruleId - ruleId
	 * @param {WorkitemOnCreateRuleUpdate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	patchTaskmanagementWorktypeFlowsOncreateRule(worktypeId, ruleId, body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules/{ruleId}";
		const endpointMethod = "PATCH";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		if (this.#checkJSONSchemaType(ruleId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "ruleId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.pathParameters.ruleId = ruleId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Get all on-create rules for a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {object} query - The query string parameters for the request. An empty object or null is allowed if all query string parameters are optional.
	 * @param {string} [query.after] -  The cursor that points to the end of the set of entities that has been returned.
	 * @param {number} [query.pageSize] -  Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the query string parameters argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID} If a query string parameter is not of the proper type.
	 */
	getTaskmanagementWorktypeFlowsOncreateRules(worktypeId, query) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules";
		const endpointMethod = "GET";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		// Check the query string parameters
		if (typeof query !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		if (query !== null) {
			if ("after" in query && this.#checkJSONSchemaType(query["after"], "string") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "after", "string");
			}
			if ("pageSize" in query && this.#checkJSONSchemaType(query["pageSize"], "integer") === false) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "pageSize", "integer");
			}
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.queryParameters = query;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * Add an on-create rule to a worktype
	 * @async
	 * @param {string} worktypeId - Worktype id
	 * @param {WorkitemOnCreateRuleCreate} body - The body of the request. An empty object or null is allowed if the body is optional.
	 * @returns {Promise<HTTPResponse>} A promise that settles to the HTTP response of the call to the "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules" endpoint.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID} If a path parameter argument is not of the proper type.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the request body argument is not of the proper type.
	 */
	postTaskmanagementWorktypeFlowsOncreateRules(worktypeId, body) {
		const endpointPath = "/api/v2/taskmanagement/worktypes/{worktypeId}/flows/oncreate/rules";
		const endpointMethod = "POST";

		// Check the path parameters
		if (this.#checkJSONSchemaType(worktypeId, "string") === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETER_TYPE_INVALID(endpointPath, endpointMethod, "worktypeId", "string");
		}

		// Check the body argument
		if (this.#checkJSONSchemaType(body, "object") === false || body === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", true);
		}

		const apiCallOptions = {};
		apiCallOptions.pathParameters = {};
		apiCallOptions.pathParameters.worktypeId = worktypeId;
		apiCallOptions.body = body;

		return this.#gcPlatformAPIClient.queueAPICall(endpointPath, endpointMethod, apiCallOptions);
	}

	/**
	 * @description Checks that a value is of the proper JSON schema type
	 * @param {*} value - The value to check
	 * @param {string} jsonSchemaType - The JSON schema type to check against
	 * @returns {boolean} Returns true if the value is of the proper JSON schema type, false otherwise
	 */
	#checkJSONSchemaType(value, jsonSchemaType) {
		const PASSTHROUGH_JSON_SCHEMA_TYPES = ["boolean", "number", "string", "object"];

		// Check if the type is a passthrough type
		if (PASSTHROUGH_JSON_SCHEMA_TYPES.includes(jsonSchemaType)) {
			return typeof value === jsonSchemaType;
		}

		// Check if the type is an integer
		if (jsonSchemaType === "integer") {
			return Number.isInteger(value);
		}

		// Check if the type is an array
		if (jsonSchemaType === "array") {
			return Array.isArray(value);
		}

		// Check if the type is null
		if (jsonSchemaType === "null") {
			return value === null;
		}

		// Otherwise, return false
		return false;
	}
}

export { TaskManagementAPI };