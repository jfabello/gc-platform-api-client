/**
 * High-performance Genesys Cloud Platform API client for Node.js class.
 * @module jfabello/gc-platform-api-client-class
 * @license MIT
 * @author Juan F. Abello <juan@jfabello.com>
 */

// Sets strict mode
"use strict";

// Module imports
import { EventEmitter } from "node:events";
import { getGCRegionURLs, errors as gcPlatformAPIUtilsErrors } from "@jfabello/gc-platform-api-utils";
import { HTTPClient } from "@jfabello/http-client";
import { SimpleTimer } from "@jfabello/simple-timer";
import { GCAccessToken } from "./gc-access-token-class.js";
import { GCPlatformAPICall } from "./gc-platform-api-call-class.js";
import { GCPlatformAPICallQueue } from "./gc-platform-api-call-queue-class.js";

// Genesys Cloud Platform API classes imports
// {{#generate_api_classes_require_statements}}
// The following section was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.333Z
import { AgentAssistantsAPI } from "./classes/agent-assistants.js";
import { AgentCopilotAPI } from "./classes/agent-copilot.js";
import { AgentUIAPI } from "./classes/agent-ui.js";
import { AlertingAPI } from "./classes/alerting.js";
import { AnalyticsAPI } from "./classes/analytics.js";
import { ArchitectAPI } from "./classes/architect.js";
import { AuditAPI } from "./classes/audit.js";
import { AuthorizationAPI } from "./classes/authorization.js";
import { BillingAPI } from "./classes/billing.js";
import { CarrierServicesAPI } from "./classes/carrier-services.js";
import { ChatAPI } from "./classes/chat.js";
import { CoachingAPI } from "./classes/coaching.js";
import { ContentManagementAPI } from "./classes/content-management.js";
import { ConversationsAPI } from "./classes/conversations.js";
import { DataExtensionsAPI } from "./classes/data-extensions.js";
import { DataPrivacyAPI } from "./classes/data-privacy.js";
import { DownloadsAPI } from "./classes/downloads.js";
import { EmailsAPI } from "./classes/emails.js";
import { EmployeeEngagementAPI } from "./classes/employee-engagement.js";
import { EventsAPI } from "./classes/events.js";
import { ExternalContactsAPI } from "./classes/external-contacts.js";
import { FaxAPI } from "./classes/fax.js";
import { FlowsAPI } from "./classes/flows.js";
import { GamificationAPI } from "./classes/gamification.js";
import { GeneralDataProtectionRegulationAPI } from "./classes/general-data-protection-regulation.js";
import { GeolocationAPI } from "./classes/geolocation.js";
import { GreetingsAPI } from "./classes/greetings.js";
import { GroupsAPI } from "./classes/groups.js";
import { IdentityProviderAPI } from "./classes/identity-provider.js";
import { InfrastructureasCodeAPI } from "./classes/infrastructureas-code.js";
import { IntegrationsAPI } from "./classes/integrations.js";
import { JourneyAPI } from "./classes/journey.js";
import { KnowledgeAPI } from "./classes/knowledge.js";
import { LanguagesAPI } from "./classes/languages.js";
import { LanguageUnderstandingAPI } from "./classes/language-understanding.js";
import { LearningAPI } from "./classes/learning.js";
import { LicenseAPI } from "./classes/license.js";
import { LocationsAPI } from "./classes/locations.js";
import { LogCaptureAPI } from "./classes/log-capture.js";
import { MessagingAPI } from "./classes/messaging.js";
import { MobileDevicesAPI } from "./classes/mobile-devices.js";
import { NotificationsAPI } from "./classes/notifications.js";
import { OAuthAPI } from "./classes/oauth.js";
import { ObjectsAPI } from "./classes/objects.js";
import { OperationalEventsAPI } from "./classes/operational-events.js";
import { OrganizationAPI } from "./classes/organization.js";
import { OrganizationAuthorizationAPI } from "./classes/organization-authorization.js";
import { OutboundAPI } from "./classes/outbound.js";
import { PresenceAPI } from "./classes/presence.js";
import { ProcessAutomationAPI } from "./classes/process-automation.js";
import { QualityAPI } from "./classes/quality.js";
import { RecordingAPI } from "./classes/recording.js";
import { ResponseManagementAPI } from "./classes/response-management.js";
import { RoutingAPI } from "./classes/routing.js";
import { SCIMAPI } from "./classes/scim.js";
import { ScreenRecordingAPI } from "./classes/screen-recording.js";
import { ScriptsAPI } from "./classes/scripts.js";
import { SearchAPI } from "./classes/search.js";
import { SettingsAPI } from "./classes/settings.js";
import { SocialMediaAPI } from "./classes/social-media.js";
import { SpeechTextAnalyticsAPI } from "./classes/speech-text-analytics.js";
import { StationsAPI } from "./classes/stations.js";
import { SuggestAPI } from "./classes/suggest.js";
import { TaskManagementAPI } from "./classes/task-management.js";
import { TeamsAPI } from "./classes/teams.js";
import { TelephonyAPI } from "./classes/telephony.js";
import { TelephonyProvidersEdgeAPI } from "./classes/telephony-providers-edge.js";
import { TextbotsAPI } from "./classes/textbots.js";
import { TokensAPI } from "./classes/tokens.js";
import { UploadsAPI } from "./classes/uploads.js";
import { UsageAPI } from "./classes/usage.js";
import { UserRecordingsAPI } from "./classes/user-recordings.js";
import { UsersAPI } from "./classes/users.js";
import { UtilitiesAPI } from "./classes/utilities.js";
import { VoicemailAPI } from "./classes/voicemail.js";
import { WebChatAPI } from "./classes/web-chat.js";
import { WebDeploymentsAPI } from "./classes/web-deployments.js";
import { WebMessagingAPI } from "./classes/web-messaging.js";
import { WidgetsAPI } from "./classes/widgets.js";
import { WorkforceManagementAPI } from "./classes/workforce-management.js";
// {{/generate_api_classes_require_statements}}

// Constants
import { constants } from "./gc-platform-api-client-constants.js";

// Defaults
import { defaults } from "./gc-platform-api-client-defaults.js";

// Errors
import { errors } from "./gc-platform-api-client-errors.js";

// Regexes
import { regexes } from "./gc-platform-api-client-regexes.js";

// Symbols
import { symbols } from "./gc-platform-api-client-symbols.js";

/** @typedef {import("@jfabello/http-client").HTTPResponse} HTTPResponse */

/**
 * High-performance Genesys Cloud Platform API client class.
 * @class GCPlatformAPIClient
 */
class GCPlatformAPIClient {
	// Private static properties
	static #CREATED = Symbol("CREATED");
	static #CONNECTING = Symbol("CONNECTING");
	static #IDLE = Symbol("IDLE");
	static #RUNNING = Symbol("RUNNING");
	static #CLOSING = Symbol("CLOSING");
	static #CLOSED = Symbol("CLOSED");
	static #FAILED = Symbol("FAILED");
	static #STATES = [GCPlatformAPIClient.#CREATED, GCPlatformAPIClient.#CONNECTING, GCPlatformAPIClient.#IDLE, GCPlatformAPIClient.#RUNNING, GCPlatformAPIClient.#CLOSING, GCPlatformAPIClient.#CLOSED, GCPlatformAPIClient.#FAILED];

	// Private instance properties
	/** @type {symbol} */ #clientState = null;
	/** @type {string} */ #gcClientId = null;
	/** @type {string} */ #gcClientSecret = null;
	/** @type {URL} */ #gcPlatformApiUrl = null;
	/** @type {URL} */ #gcLoginUrl = null;
	/** @type {number} */ #socketTimeout = null;
	/** @type {number} */ #timeBetweenRequests = null;
	/** @type {number} */ #maxRetries = null;
	/** @type {GCPlatformAPICallQueue} */ #backlogQueue = null;
	/** @type {GCPlatformAPICallQueue} */ #executionQueue = null;
	/** @type {NodeJS.Timeout} */ #executionTimer = null;
	/** @type {EventEmitter} */ #internalEventEmitter = null;
	/** @type {Promise} */ #connectPromise = null;
	/** @type {Promise} */ #closePromise = null;
	/** @type {GCAccessToken} */ #gcAccessToken = null;
	/** @type {boolean} */ #gcAccessTokenRefreshInProgress = false;
	/** @type {Date} */ #rateLimitExpirationDate = new Date();

	// Private Genesys Cloud Platform API classes instances
	// {{#generate_api_classes_private_instance_properties}}
	// The following section was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.334Z
	#AgentAssistantsAPI = new AgentAssistantsAPI(this);
	#AgentCopilotAPI = new AgentCopilotAPI(this);
	#AgentUIAPI = new AgentUIAPI(this);
	#AlertingAPI = new AlertingAPI(this);
	#AnalyticsAPI = new AnalyticsAPI(this);
	#ArchitectAPI = new ArchitectAPI(this);
	#AuditAPI = new AuditAPI(this);
	#AuthorizationAPI = new AuthorizationAPI(this);
	#BillingAPI = new BillingAPI(this);
	#CarrierServicesAPI = new CarrierServicesAPI(this);
	#ChatAPI = new ChatAPI(this);
	#CoachingAPI = new CoachingAPI(this);
	#ContentManagementAPI = new ContentManagementAPI(this);
	#ConversationsAPI = new ConversationsAPI(this);
	#DataExtensionsAPI = new DataExtensionsAPI(this);
	#DataPrivacyAPI = new DataPrivacyAPI(this);
	#DownloadsAPI = new DownloadsAPI(this);
	#EmailsAPI = new EmailsAPI(this);
	#EmployeeEngagementAPI = new EmployeeEngagementAPI(this);
	#EventsAPI = new EventsAPI(this);
	#ExternalContactsAPI = new ExternalContactsAPI(this);
	#FaxAPI = new FaxAPI(this);
	#FlowsAPI = new FlowsAPI(this);
	#GamificationAPI = new GamificationAPI(this);
	#GeneralDataProtectionRegulationAPI = new GeneralDataProtectionRegulationAPI(this);
	#GeolocationAPI = new GeolocationAPI(this);
	#GreetingsAPI = new GreetingsAPI(this);
	#GroupsAPI = new GroupsAPI(this);
	#IdentityProviderAPI = new IdentityProviderAPI(this);
	#InfrastructureasCodeAPI = new InfrastructureasCodeAPI(this);
	#IntegrationsAPI = new IntegrationsAPI(this);
	#JourneyAPI = new JourneyAPI(this);
	#KnowledgeAPI = new KnowledgeAPI(this);
	#LanguagesAPI = new LanguagesAPI(this);
	#LanguageUnderstandingAPI = new LanguageUnderstandingAPI(this);
	#LearningAPI = new LearningAPI(this);
	#LicenseAPI = new LicenseAPI(this);
	#LocationsAPI = new LocationsAPI(this);
	#LogCaptureAPI = new LogCaptureAPI(this);
	#MessagingAPI = new MessagingAPI(this);
	#MobileDevicesAPI = new MobileDevicesAPI(this);
	#NotificationsAPI = new NotificationsAPI(this);
	#OAuthAPI = new OAuthAPI(this);
	#ObjectsAPI = new ObjectsAPI(this);
	#OperationalEventsAPI = new OperationalEventsAPI(this);
	#OrganizationAPI = new OrganizationAPI(this);
	#OrganizationAuthorizationAPI = new OrganizationAuthorizationAPI(this);
	#OutboundAPI = new OutboundAPI(this);
	#PresenceAPI = new PresenceAPI(this);
	#ProcessAutomationAPI = new ProcessAutomationAPI(this);
	#QualityAPI = new QualityAPI(this);
	#RecordingAPI = new RecordingAPI(this);
	#ResponseManagementAPI = new ResponseManagementAPI(this);
	#RoutingAPI = new RoutingAPI(this);
	#SCIMAPI = new SCIMAPI(this);
	#ScreenRecordingAPI = new ScreenRecordingAPI(this);
	#ScriptsAPI = new ScriptsAPI(this);
	#SearchAPI = new SearchAPI(this);
	#SettingsAPI = new SettingsAPI(this);
	#SocialMediaAPI = new SocialMediaAPI(this);
	#SpeechTextAnalyticsAPI = new SpeechTextAnalyticsAPI(this);
	#StationsAPI = new StationsAPI(this);
	#SuggestAPI = new SuggestAPI(this);
	#TaskManagementAPI = new TaskManagementAPI(this);
	#TeamsAPI = new TeamsAPI(this);
	#TelephonyAPI = new TelephonyAPI(this);
	#TelephonyProvidersEdgeAPI = new TelephonyProvidersEdgeAPI(this);
	#TextbotsAPI = new TextbotsAPI(this);
	#TokensAPI = new TokensAPI(this);
	#UploadsAPI = new UploadsAPI(this);
	#UsageAPI = new UsageAPI(this);
	#UserRecordingsAPI = new UserRecordingsAPI(this);
	#UsersAPI = new UsersAPI(this);
	#UtilitiesAPI = new UtilitiesAPI(this);
	#VoicemailAPI = new VoicemailAPI(this);
	#WebChatAPI = new WebChatAPI(this);
	#WebDeploymentsAPI = new WebDeploymentsAPI(this);
	#WebMessagingAPI = new WebMessagingAPI(this);
	#WidgetsAPI = new WidgetsAPI(this);
	#WorkforceManagementAPI = new WorkforceManagementAPI(this);
	// {{/generate_api_classes_private_instance_properties}}

	/**
	 * Read-only property representing the CREATED state.
	 * @static
	 * @readonly
	 * @type {symbol}
	 */
	static get CREATED() {
		return GCPlatformAPIClient.#CREATED;
	}

	/**
	 * Read-only property representing the CONNECTING state.
	 * @static
	 * @readonly
	 * @type {symbol}
	 */
	static get CONNECTING() {
		return GCPlatformAPIClient.#CONNECTING;
	}

	/**
	 * Read-only property representing the IDLE state.
	 * @static
	 * @readonly
	 * @type {symbol}
	 */
	static get IDLE() {
		return GCPlatformAPIClient.#IDLE;
	}

	/**
	 * Read-only property representing the RUNNING state.
	 * @static
	 * @readonly
	 * @type {symbol}
	 */
	static get RUNNING() {
		return GCPlatformAPIClient.#RUNNING;
	}

	/**
	 * Read-only property representing the CLOSING state.
	 * @static
	 * @readonly
	 * @type {symbol}
	 */
	static get CLOSING() {
		return GCPlatformAPIClient.#CLOSING;
	}

	/**
	 * Read-only property representing the CANCELLED state.
	 * @static
	 * @readonly
	 * @type {symbol}
	 */
	static get CLOSED() {
		return GCPlatformAPIClient.#CLOSED;
	}

	/**
	 * Read-only property representing the FAILED state.
	 * @static
	 * @readonly
	 * @type {symbol}
	 */
	static get FAILED() {
		return GCPlatformAPIClient.#FAILED;
	}

	/**
	 * Read-only property that contains the Genesys Cloud Platform API client error classes as properties.
	 * @static
	 * @readonly
	 * @type {object}
	 */
	static get errors() {
		return errors;
	}

	/**
	 * Read-only property that returns the state of the Genesys Cloud Platform API client instance.
	 * @readonly
	 * @type {symbol}
	 */
	get state() {
		return this.#clientState;
	}

	/**
	 * Read-only property that exposes the on(...) method of the internal event emitter
	 * @readonly
	 * @type {Function}
	 */
	get on() {
		return this.#internalEventEmitter.on.bind(this.#internalEventEmitter);
	}

	// Genesys Cloud Platform API classes getters

	// {{#generate_api_classes_getters}}
	// The following section was automatically generated by the Generate Genesys Cloud Platform API classes utility on 2025-04-24T15:04:25.334Z

	/**
	 * Read-only property that returns the AgentAssistants API class.
	 * @readonly
	 * @type {AgentAssistantsAPI}
	 */
	get AgentAssistantsAPI() {
		return this.#AgentAssistantsAPI;
	}

	/**
	 * Read-only property that returns the AgentCopilot API class.
	 * @readonly
	 * @type {AgentCopilotAPI}
	 */
	get AgentCopilotAPI() {
		return this.#AgentCopilotAPI;
	}

	/**
	 * Read-only property that returns the AgentUI API class.
	 * @readonly
	 * @type {AgentUIAPI}
	 */
	get AgentUIAPI() {
		return this.#AgentUIAPI;
	}

	/**
	 * Read-only property that returns the Alerting API class.
	 * @readonly
	 * @type {AlertingAPI}
	 */
	get AlertingAPI() {
		return this.#AlertingAPI;
	}

	/**
	 * Read-only property that returns the Analytics API class.
	 * @readonly
	 * @type {AnalyticsAPI}
	 */
	get AnalyticsAPI() {
		return this.#AnalyticsAPI;
	}

	/**
	 * Read-only property that returns the Architect API class.
	 * @readonly
	 * @type {ArchitectAPI}
	 */
	get ArchitectAPI() {
		return this.#ArchitectAPI;
	}

	/**
	 * Read-only property that returns the Audit API class.
	 * @readonly
	 * @type {AuditAPI}
	 */
	get AuditAPI() {
		return this.#AuditAPI;
	}

	/**
	 * Read-only property that returns the Authorization API class.
	 * @readonly
	 * @type {AuthorizationAPI}
	 */
	get AuthorizationAPI() {
		return this.#AuthorizationAPI;
	}

	/**
	 * Read-only property that returns the Billing API class.
	 * @readonly
	 * @type {BillingAPI}
	 */
	get BillingAPI() {
		return this.#BillingAPI;
	}

	/**
	 * Read-only property that returns the CarrierServices API class.
	 * @readonly
	 * @type {CarrierServicesAPI}
	 */
	get CarrierServicesAPI() {
		return this.#CarrierServicesAPI;
	}

	/**
	 * Read-only property that returns the Chat API class.
	 * @readonly
	 * @type {ChatAPI}
	 */
	get ChatAPI() {
		return this.#ChatAPI;
	}

	/**
	 * Read-only property that returns the Coaching API class.
	 * @readonly
	 * @type {CoachingAPI}
	 */
	get CoachingAPI() {
		return this.#CoachingAPI;
	}

	/**
	 * Read-only property that returns the ContentManagement API class.
	 * @readonly
	 * @type {ContentManagementAPI}
	 */
	get ContentManagementAPI() {
		return this.#ContentManagementAPI;
	}

	/**
	 * Read-only property that returns the Conversations API class.
	 * @readonly
	 * @type {ConversationsAPI}
	 */
	get ConversationsAPI() {
		return this.#ConversationsAPI;
	}

	/**
	 * Read-only property that returns the DataExtensions API class.
	 * @readonly
	 * @type {DataExtensionsAPI}
	 */
	get DataExtensionsAPI() {
		return this.#DataExtensionsAPI;
	}

	/**
	 * Read-only property that returns the DataPrivacy API class.
	 * @readonly
	 * @type {DataPrivacyAPI}
	 */
	get DataPrivacyAPI() {
		return this.#DataPrivacyAPI;
	}

	/**
	 * Read-only property that returns the Downloads API class.
	 * @readonly
	 * @type {DownloadsAPI}
	 */
	get DownloadsAPI() {
		return this.#DownloadsAPI;
	}

	/**
	 * Read-only property that returns the Emails API class.
	 * @readonly
	 * @type {EmailsAPI}
	 */
	get EmailsAPI() {
		return this.#EmailsAPI;
	}

	/**
	 * Read-only property that returns the EmployeeEngagement API class.
	 * @readonly
	 * @type {EmployeeEngagementAPI}
	 */
	get EmployeeEngagementAPI() {
		return this.#EmployeeEngagementAPI;
	}

	/**
	 * Read-only property that returns the Events API class.
	 * @readonly
	 * @type {EventsAPI}
	 */
	get EventsAPI() {
		return this.#EventsAPI;
	}

	/**
	 * Read-only property that returns the ExternalContacts API class.
	 * @readonly
	 * @type {ExternalContactsAPI}
	 */
	get ExternalContactsAPI() {
		return this.#ExternalContactsAPI;
	}

	/**
	 * Read-only property that returns the Fax API class.
	 * @readonly
	 * @type {FaxAPI}
	 */
	get FaxAPI() {
		return this.#FaxAPI;
	}

	/**
	 * Read-only property that returns the Flows API class.
	 * @readonly
	 * @type {FlowsAPI}
	 */
	get FlowsAPI() {
		return this.#FlowsAPI;
	}

	/**
	 * Read-only property that returns the Gamification API class.
	 * @readonly
	 * @type {GamificationAPI}
	 */
	get GamificationAPI() {
		return this.#GamificationAPI;
	}

	/**
	 * Read-only property that returns the GeneralDataProtectionRegulation API class.
	 * @readonly
	 * @type {GeneralDataProtectionRegulationAPI}
	 */
	get GeneralDataProtectionRegulationAPI() {
		return this.#GeneralDataProtectionRegulationAPI;
	}

	/**
	 * Read-only property that returns the Geolocation API class.
	 * @readonly
	 * @type {GeolocationAPI}
	 */
	get GeolocationAPI() {
		return this.#GeolocationAPI;
	}

	/**
	 * Read-only property that returns the Greetings API class.
	 * @readonly
	 * @type {GreetingsAPI}
	 */
	get GreetingsAPI() {
		return this.#GreetingsAPI;
	}

	/**
	 * Read-only property that returns the Groups API class.
	 * @readonly
	 * @type {GroupsAPI}
	 */
	get GroupsAPI() {
		return this.#GroupsAPI;
	}

	/**
	 * Read-only property that returns the IdentityProvider API class.
	 * @readonly
	 * @type {IdentityProviderAPI}
	 */
	get IdentityProviderAPI() {
		return this.#IdentityProviderAPI;
	}

	/**
	 * Read-only property that returns the InfrastructureasCode API class.
	 * @readonly
	 * @type {InfrastructureasCodeAPI}
	 */
	get InfrastructureasCodeAPI() {
		return this.#InfrastructureasCodeAPI;
	}

	/**
	 * Read-only property that returns the Integrations API class.
	 * @readonly
	 * @type {IntegrationsAPI}
	 */
	get IntegrationsAPI() {
		return this.#IntegrationsAPI;
	}

	/**
	 * Read-only property that returns the Journey API class.
	 * @readonly
	 * @type {JourneyAPI}
	 */
	get JourneyAPI() {
		return this.#JourneyAPI;
	}

	/**
	 * Read-only property that returns the Knowledge API class.
	 * @readonly
	 * @type {KnowledgeAPI}
	 */
	get KnowledgeAPI() {
		return this.#KnowledgeAPI;
	}

	/**
	 * Read-only property that returns the Languages API class.
	 * @readonly
	 * @type {LanguagesAPI}
	 */
	get LanguagesAPI() {
		return this.#LanguagesAPI;
	}

	/**
	 * Read-only property that returns the LanguageUnderstanding API class.
	 * @readonly
	 * @type {LanguageUnderstandingAPI}
	 */
	get LanguageUnderstandingAPI() {
		return this.#LanguageUnderstandingAPI;
	}

	/**
	 * Read-only property that returns the Learning API class.
	 * @readonly
	 * @type {LearningAPI}
	 */
	get LearningAPI() {
		return this.#LearningAPI;
	}

	/**
	 * Read-only property that returns the License API class.
	 * @readonly
	 * @type {LicenseAPI}
	 */
	get LicenseAPI() {
		return this.#LicenseAPI;
	}

	/**
	 * Read-only property that returns the Locations API class.
	 * @readonly
	 * @type {LocationsAPI}
	 */
	get LocationsAPI() {
		return this.#LocationsAPI;
	}

	/**
	 * Read-only property that returns the LogCapture API class.
	 * @readonly
	 * @type {LogCaptureAPI}
	 */
	get LogCaptureAPI() {
		return this.#LogCaptureAPI;
	}

	/**
	 * Read-only property that returns the Messaging API class.
	 * @readonly
	 * @type {MessagingAPI}
	 */
	get MessagingAPI() {
		return this.#MessagingAPI;
	}

	/**
	 * Read-only property that returns the MobileDevices API class.
	 * @readonly
	 * @type {MobileDevicesAPI}
	 */
	get MobileDevicesAPI() {
		return this.#MobileDevicesAPI;
	}

	/**
	 * Read-only property that returns the Notifications API class.
	 * @readonly
	 * @type {NotificationsAPI}
	 */
	get NotificationsAPI() {
		return this.#NotificationsAPI;
	}

	/**
	 * Read-only property that returns the OAuth API class.
	 * @readonly
	 * @type {OAuthAPI}
	 */
	get OAuthAPI() {
		return this.#OAuthAPI;
	}

	/**
	 * Read-only property that returns the Objects API class.
	 * @readonly
	 * @type {ObjectsAPI}
	 */
	get ObjectsAPI() {
		return this.#ObjectsAPI;
	}

	/**
	 * Read-only property that returns the OperationalEvents API class.
	 * @readonly
	 * @type {OperationalEventsAPI}
	 */
	get OperationalEventsAPI() {
		return this.#OperationalEventsAPI;
	}

	/**
	 * Read-only property that returns the Organization API class.
	 * @readonly
	 * @type {OrganizationAPI}
	 */
	get OrganizationAPI() {
		return this.#OrganizationAPI;
	}

	/**
	 * Read-only property that returns the OrganizationAuthorization API class.
	 * @readonly
	 * @type {OrganizationAuthorizationAPI}
	 */
	get OrganizationAuthorizationAPI() {
		return this.#OrganizationAuthorizationAPI;
	}

	/**
	 * Read-only property that returns the Outbound API class.
	 * @readonly
	 * @type {OutboundAPI}
	 */
	get OutboundAPI() {
		return this.#OutboundAPI;
	}

	/**
	 * Read-only property that returns the Presence API class.
	 * @readonly
	 * @type {PresenceAPI}
	 */
	get PresenceAPI() {
		return this.#PresenceAPI;
	}

	/**
	 * Read-only property that returns the ProcessAutomation API class.
	 * @readonly
	 * @type {ProcessAutomationAPI}
	 */
	get ProcessAutomationAPI() {
		return this.#ProcessAutomationAPI;
	}

	/**
	 * Read-only property that returns the Quality API class.
	 * @readonly
	 * @type {QualityAPI}
	 */
	get QualityAPI() {
		return this.#QualityAPI;
	}

	/**
	 * Read-only property that returns the Recording API class.
	 * @readonly
	 * @type {RecordingAPI}
	 */
	get RecordingAPI() {
		return this.#RecordingAPI;
	}

	/**
	 * Read-only property that returns the ResponseManagement API class.
	 * @readonly
	 * @type {ResponseManagementAPI}
	 */
	get ResponseManagementAPI() {
		return this.#ResponseManagementAPI;
	}

	/**
	 * Read-only property that returns the Routing API class.
	 * @readonly
	 * @type {RoutingAPI}
	 */
	get RoutingAPI() {
		return this.#RoutingAPI;
	}

	/**
	 * Read-only property that returns the SCIM API class.
	 * @readonly
	 * @type {SCIMAPI}
	 */
	get SCIMAPI() {
		return this.#SCIMAPI;
	}

	/**
	 * Read-only property that returns the ScreenRecording API class.
	 * @readonly
	 * @type {ScreenRecordingAPI}
	 */
	get ScreenRecordingAPI() {
		return this.#ScreenRecordingAPI;
	}

	/**
	 * Read-only property that returns the Scripts API class.
	 * @readonly
	 * @type {ScriptsAPI}
	 */
	get ScriptsAPI() {
		return this.#ScriptsAPI;
	}

	/**
	 * Read-only property that returns the Search API class.
	 * @readonly
	 * @type {SearchAPI}
	 */
	get SearchAPI() {
		return this.#SearchAPI;
	}

	/**
	 * Read-only property that returns the Settings API class.
	 * @readonly
	 * @type {SettingsAPI}
	 */
	get SettingsAPI() {
		return this.#SettingsAPI;
	}

	/**
	 * Read-only property that returns the SocialMedia API class.
	 * @readonly
	 * @type {SocialMediaAPI}
	 */
	get SocialMediaAPI() {
		return this.#SocialMediaAPI;
	}

	/**
	 * Read-only property that returns the SpeechTextAnalytics API class.
	 * @readonly
	 * @type {SpeechTextAnalyticsAPI}
	 */
	get SpeechTextAnalyticsAPI() {
		return this.#SpeechTextAnalyticsAPI;
	}

	/**
	 * Read-only property that returns the Stations API class.
	 * @readonly
	 * @type {StationsAPI}
	 */
	get StationsAPI() {
		return this.#StationsAPI;
	}

	/**
	 * Read-only property that returns the Suggest API class.
	 * @readonly
	 * @type {SuggestAPI}
	 */
	get SuggestAPI() {
		return this.#SuggestAPI;
	}

	/**
	 * Read-only property that returns the TaskManagement API class.
	 * @readonly
	 * @type {TaskManagementAPI}
	 */
	get TaskManagementAPI() {
		return this.#TaskManagementAPI;
	}

	/**
	 * Read-only property that returns the Teams API class.
	 * @readonly
	 * @type {TeamsAPI}
	 */
	get TeamsAPI() {
		return this.#TeamsAPI;
	}

	/**
	 * Read-only property that returns the Telephony API class.
	 * @readonly
	 * @type {TelephonyAPI}
	 */
	get TelephonyAPI() {
		return this.#TelephonyAPI;
	}

	/**
	 * Read-only property that returns the TelephonyProvidersEdge API class.
	 * @readonly
	 * @type {TelephonyProvidersEdgeAPI}
	 */
	get TelephonyProvidersEdgeAPI() {
		return this.#TelephonyProvidersEdgeAPI;
	}

	/**
	 * Read-only property that returns the Textbots API class.
	 * @readonly
	 * @type {TextbotsAPI}
	 */
	get TextbotsAPI() {
		return this.#TextbotsAPI;
	}

	/**
	 * Read-only property that returns the Tokens API class.
	 * @readonly
	 * @type {TokensAPI}
	 */
	get TokensAPI() {
		return this.#TokensAPI;
	}

	/**
	 * Read-only property that returns the Uploads API class.
	 * @readonly
	 * @type {UploadsAPI}
	 */
	get UploadsAPI() {
		return this.#UploadsAPI;
	}

	/**
	 * Read-only property that returns the Usage API class.
	 * @readonly
	 * @type {UsageAPI}
	 */
	get UsageAPI() {
		return this.#UsageAPI;
	}

	/**
	 * Read-only property that returns the UserRecordings API class.
	 * @readonly
	 * @type {UserRecordingsAPI}
	 */
	get UserRecordingsAPI() {
		return this.#UserRecordingsAPI;
	}

	/**
	 * Read-only property that returns the Users API class.
	 * @readonly
	 * @type {UsersAPI}
	 */
	get UsersAPI() {
		return this.#UsersAPI;
	}

	/**
	 * Read-only property that returns the Utilities API class.
	 * @readonly
	 * @type {UtilitiesAPI}
	 */
	get UtilitiesAPI() {
		return this.#UtilitiesAPI;
	}

	/**
	 * Read-only property that returns the Voicemail API class.
	 * @readonly
	 * @type {VoicemailAPI}
	 */
	get VoicemailAPI() {
		return this.#VoicemailAPI;
	}

	/**
	 * Read-only property that returns the WebChat API class.
	 * @readonly
	 * @type {WebChatAPI}
	 */
	get WebChatAPI() {
		return this.#WebChatAPI;
	}

	/**
	 * Read-only property that returns the WebDeployments API class.
	 * @readonly
	 * @type {WebDeploymentsAPI}
	 */
	get WebDeploymentsAPI() {
		return this.#WebDeploymentsAPI;
	}

	/**
	 * Read-only property that returns the WebMessaging API class.
	 * @readonly
	 * @type {WebMessagingAPI}
	 */
	get WebMessagingAPI() {
		return this.#WebMessagingAPI;
	}

	/**
	 * Read-only property that returns the Widgets API class.
	 * @readonly
	 * @type {WidgetsAPI}
	 */
	get WidgetsAPI() {
		return this.#WidgetsAPI;
	}

	/**
	 * Read-only property that returns the WorkforceManagement API class.
	 * @readonly
	 * @type {WorkforceManagementAPI}
	 */
	get WorkforceManagementAPI() {
		return this.#WorkforceManagementAPI;
	}

	// {{/generate_api_classes_getters}}

	/**
	 * Creates a new Genesys Cloud Platform API client instance.
	 * @constructor
	 * @param {string} gcClientId - The Genesys Cloud OAuth client ID. Must be a valid UUID.
	 * @param {string} gcClientSecret - The Genesys Cloud OAuth client ID secret.
	 * @param {string} gcRegion - The Genesys Cloud region. For example: us-east-1, ca-central-1, ap-south-1, etc.
	 * @param {object} options - The Genesys Cloud Platform API client options object.
	 * @param {number} [options.socketTimeout=60000] - The HTTP socket timeout in milliseconds.
	 * @param {number} [options.timeBetweenRequests=200] - The time in milliseconds between each call to the Genesys Cloud platform API.
	 * @param {number} [options.maxRetries=5] - The maximum number of retries for retryable Genesys Cloud platform API errors.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_ID_TYPE_INVALID} If the Genesys Cloud OAuth client ID argument is not a string.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_ID_INVALID_UUID} If the Genesys Cloud OAuth client ID argument is not a valid UUID.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_SECRET_TYPE_INVALID} If the Genesys Cloud OAuth client secret argument is not a string.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_REGION_TYPE_INVALID} If the Genesys Cloud region argument is not a string.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_REGION_INVALID} If the Genesys Cloud region argument is not a valid Genesys Cloud region.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_SOCKET_TIMEOUT_TYPE_INVALID} If the socket timeout option is not an integer.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_SOCKET_TIMEOUT_OUT_OF_BOUNDS} If the socket timeout option is less than 1 miliseconds.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_TIME_BETWEEN_REQUESTS_TYPE_INVALID} If the time between requests option is not an integer.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_TIME_BETWEEN_REQUESTS_OUT_OF_BOUNDS} If the time between requests option is less than 1 miliseconds.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_MAX_RETRIES_TYPE_INVALID} If the max retries option is not an integer.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_MAX_RETRIES_OUT_OF_BOUNDS} If the max retries option is less than 1.
	 */
	constructor(gcClientId, gcClientSecret, gcRegion, { socketTimeout = defaults.SOCKET_TIMEOUT, timeBetweenRequests = defaults.TIME_BETWEEN_REQUESTS, maxRetries = defaults.MAX_RETRIES } = {}) {
		// Check the passed Genesys Cloud client ID argument
		if (typeof gcClientId !== "string") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_ID_TYPE_INVALID();
		}

		// Check if the passed Genesys Cloud client ID is a valid UUID
		if (regexes.UUID.test(gcClientId) === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_ID_INVALID_UUID();
		}

		this.#gcClientId = gcClientId;

		// Check the passed Genesys Cloud client secret argument
		if (typeof gcClientSecret !== "string") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_SECRET_TYPE_INVALID();
		}

		this.#gcClientSecret = gcClientSecret;

		// Check the passed Genesys Cloud region argument
		if (typeof gcRegion !== "string") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_REGION_TYPE_INVALID();
		}

		// Get the Genesys Cloud region URLs
		let gcUrls = null;

		try {
			gcUrls = getGCRegionURLs(gcRegion);
		} catch (error) {
			/* istanbul ignore else: No other error should be thrown by getGCRegionURLs(...) */
			if (error instanceof gcPlatformAPIUtilsErrors.ERROR_GC_REGION_INVALID) {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_REGION_INVALID(gcRegion);
			} else {
				throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR("An unknown error occurred while getting the Genesys Cloud region URLs.", error);
			}
		}

		this.#gcPlatformApiUrl = gcUrls.api;
		this.#gcLoginUrl = gcUrls.login;

		// Check the socket timeout option
		if (typeof socketTimeout !== "number" || Number.isInteger(socketTimeout) === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_SOCKET_TIMEOUT_TYPE_INVALID();
		}

		if (socketTimeout < 1) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_SOCKET_TIMEOUT_OUT_OF_BOUNDS();
		}

		this.#socketTimeout = socketTimeout;

		/// Check the time between requests option
		if (typeof timeBetweenRequests !== "number" || Number.isInteger(timeBetweenRequests) === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_TIME_BETWEEN_REQUESTS_TYPE_INVALID();
		}

		if (timeBetweenRequests < 1) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_TIME_BETWEEN_REQUESTS_OUT_OF_BOUNDS();
		}

		this.#timeBetweenRequests = timeBetweenRequests;

		// Check the max retries option
		if (typeof maxRetries !== "number" || Number.isInteger(maxRetries) === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_MAX_RETRIES_TYPE_INVALID();
		}

		if (maxRetries < 1) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_MAX_RETRIES_OUT_OF_BOUNDS();
		}

		this.#maxRetries = maxRetries;

		// Create the Genesys Cloud Platform API call queues
		this.#backlogQueue = new GCPlatformAPICallQueue("backlog-queue");
		this.#executionQueue = new GCPlatformAPICallQueue("execution-queue");

		// Create the Genesys Cloud Platform API client event emitter and subscribe to the queue events
		this.#internalEventEmitter = new EventEmitter();

		this.#backlogQueue.on("node-add", (nodeData) => {
			this.#internalEventEmitter.emit("backlogqueue-add", nodeData);
			this.#executeBacklogQueue();
		});

		this.#backlogQueue.on("node-remove", (nodeData) => {
			this.#internalEventEmitter.emit("backlogqueue-remove", nodeData);
		});

		this.#executionQueue.on("node-add", (nodeData) => {
			this.#internalEventEmitter.emit("executionqueue-add", nodeData);
		});

		this.#executionQueue.on("node-remove", (nodeData) => {
			this.#internalEventEmitter.emit("executionqueue-remove", nodeData);
		});

		// Set the client state to CREATED
		this.#changeState(GCPlatformAPIClient.#CREATED);
	}

	/**
	 * Connects the Genesys Cloud Platform API client.
	 * @async
	 * @returns {Promise<boolean>} A promise that fulfills to true if the client connected.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_CONNECT_UNAVAILABLE} If the client is not in a state that allows it to connect to Genesys Cloud.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR} If an internal error occurred while refreshing the Genesys Cloud OAuth access token.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_ID_NOT_FOUND} If the Genesys Cloud OAuth client ID is not found.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_AUTHENTICATION_FAILURE} If the Genesys Cloud OAuth authentication failed.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_RESPONSE_ERROR} If the Genesys Cloud OAuth access token request returned an unexpected response.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_STATUS_CODE} If the Genesys Cloud OAuth access token request returned an unexpected HTTP status code.
	 * @throws Errors thrown by the makeRequest() method of the HTTP client class.
	 */
	connect() {
		// Return the Genesys Cloud Platform API client connect promise object if the client state is already CONNECTING
		if (this.#clientState === GCPlatformAPIClient.#CONNECTING) {
			return this.#connectPromise;
		}

		// Throw an error if the client is not in a state that allows it to connect to Genesys Cloud
		if (this.#clientState !== GCPlatformAPIClient.#CREATED) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_CONNECT_UNAVAILABLE();
		}

		// Set the client state to CONNECTING
		this.#changeState(GCPlatformAPIClient.#CONNECTING);

		this.#connectPromise = this.#connect();

		return this.#connectPromise;
	}

	/**
	 * Closes the Genesys Cloud Platform API client connection.
	 * @async
	 * @param {boolean} [clearBacklog=false] - If true, cancels all the API calls in the backlog queue.
	 * @returns {Promise<boolean>} A promise that fulfills to true if the client is gracefully disconnected.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_CLOSE_UNAVAILABLE} If the client is not in a state that allows its closing.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR} If an internal error occurred while deleting the Genesys Cloud OAuth access token.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_RESPONSE_ERROR} If the Genesys Cloud OAuth access token deletion request returned an unexpected response.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_STATUS_CODE} If the Genesys Cloud OAuth access token deletion request returned an unexpected HTTP status code.
	 * @throws Errors thrown by the makeRequest() method of the HTTP client class.
	 */
	close(clearBacklog = false) {
		// Return the Genesys Cloud Platform API client close promise object if the client state is already CLOSING or CLOSED
		if (this.#clientState === GCPlatformAPIClient.#CLOSING || this.#clientState === GCPlatformAPIClient.#CLOSED) {
			return this.#closePromise;
		}

		// Throws an error if the client is not in a state that allows its closing
		if (this.#clientState !== GCPlatformAPIClient.#IDLE && this.#clientState !== GCPlatformAPIClient.#RUNNING) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_CLOSE_UNAVAILABLE();
		}

		// Set the client state to CLOSING
		this.#changeState(GCPlatformAPIClient.#CLOSING);

		this.#closePromise = this.#close(clearBacklog);

		return this.#closePromise;
	}

	/**
	 * Queues a call to the Genesys Cloud Platform API.
	 * @async
	 * @param {string} endpointPath - The Genesys Cloud Platform API endpoint path.
	 * @param {string} endpointMethod - The Genesys Cloud Platform API endpoint method.
	 * @param {object} [options] - The Genesys Cloud Platform API call options object.
	 * @param {object} [options.pathParameters=null] - The Genesys Cloud Platform API endpoint call path parameters.
	 * @param {object} [options.headers=null] - The Genesys Cloud Platform API endpoint call headers.
	 * @param {object} [options.queryParameters=null] - The Genesys Cloud Platform API endpoint call query string parameters.
	 * @param {object} [options.body = null] - The Genesys Cloud Platform API endpoint call body.
	 * @returns {Promise<HTTPResponse>} A promise that fulfills to an HTTP client response object.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_TYPE_INVALID} If the Genesys Cloud Platform API endpoint call path argument is not a string.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_INVALID} If the Genesys Cloud Platform API endpoint call path argument is not a valid Genesys Cloud Platform API endpoint path.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_METHOD_TYPE_INVALID} If the Genesys Cloud Platform API endpoint call method argument is not a string.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_METHOD_INVALID} If the Genesys Cloud Platform API endpoint call method argument is not a valid HTTP method.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETERS_TYPE_INVALID} If the Genesys Cloud Platform API endpoint call path parameters argument is not an object.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID} If the Genesys Cloud Platform API endpoint call headers argument is not an object.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID} If the Genesys Cloud Platform API endpoint call query string parameters argument is not an object.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID} If the Genesys Cloud Platform API endpoint call body argument is not an object.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_API_CALLING_UNAVAILABLE} If the Genesys Cloud Platform API client is not in a state that allows calling the API.
	 * @throws Errors thrown by the makeRequest() method of the HTTP client class.
	 */
	queueAPICall(endpointPath, endpointMethod, { pathParameters = null, headers = null, queryParameters = null, body = null } = {}) {
		// Check the Genesys Cloud Platform API endpoint call path
		if (typeof endpointPath !== "string") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_TYPE_INVALID();
		}

		if (regexes.gcPlatformAPIPath.test(endpointPath) === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_INVALID(endpointPath);
		}

		// Check the Genesys Cloud Platform API endpoint call method
		if (typeof endpointMethod !== "string") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_METHOD_TYPE_INVALID();
		}

		if (constants.HTTP_METHODS.includes(endpointMethod) === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_METHOD_INVALID(endpointMethod);
		}

		// Check the Genesys Cloud Platform API endpoint call path parameters object
		if (typeof pathParameters !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_PATH_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod);
		}

		// Check the Genesys Cloud Platform API endpoint call headers object
		if (typeof headers !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_HEADERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		// Check the Genesys Cloud Platform API endpoint call query string parameters object
		if (typeof queryParameters !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_QUERY_PARAMETERS_TYPE_INVALID(endpointPath, endpointMethod, false);
		}

		// Check the Genesys Cloud Platform API endpoint call body object
		if (typeof body !== "object") {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALL_REQUEST_BODY_TYPE_INVALID(endpointPath, endpointMethod, "object", false);
		}

		// Check the Genesys Cloud Platform API client state
		if (this.#clientState !== GCPlatformAPIClient.#IDLE && this.#clientState !== GCPlatformAPIClient.#RUNNING) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_API_CALLING_UNAVAILABLE();
		}

		// Create the API call object
		const gcPlatformAPICall = new GCPlatformAPICall(endpointPath, endpointMethod, { pathParameters, headers, queryParameters, body });

		// Add the API call object to the backlog queue
		this.#backlogQueue.pushBack(gcPlatformAPICall);

		return gcPlatformAPICall.executionPromise;
	}

	/**
	 * Changes the internal state of the Genesys Cloud Platform API client.
	 * @param {symbol} newState - The new state of the Genesys Cloud Platform API client.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR} If the new state parameter is not a valid Genesys Cloud Platform API client state.
	 */
	#changeState(newState) {
		if (GCPlatformAPIClient.#STATES.includes(newState) === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR(`The state ${newState.description} is not a valid Genesys Cloud Platform API client state.`);
		}

		const previousState = this.#clientState;

		this.#clientState = newState;

		this.#emit("state-change", { previousState: previousState === null ? null : previousState.description, newState: this.#clientState.description });
	}

	/**
	 * Connects the Genesys Cloud Platform API client.
	 * @async
	 * @returns {Promise<boolean>} A promise that fulfills to true if the client connected.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR} If an internal error occurred while refreshing the Genesys Cloud OAuth access token.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_ID_NOT_FOUND} If the Genesys Cloud OAuth client ID is not found.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_AUTHENTICATION_FAILURE} If the Genesys Cloud OAuth authentication failed.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_RESPONSE_ERROR} If the Genesys Cloud OAuth access token request returned an unexpected response.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_STATUS_CODE} If the Genesys Cloud OAuth access token request returned an unexpected HTTP status code.
	 * @throws Errors thrown by the makeRequest() method of the HTTP client class.
	 */
	async #connect() {
		// Obtain the Genesys Cloud OAuth access token
		try {
			await this.#refreshAccessToken();
		} catch (error) {
			// Set the client state to FAILED
			this.#changeState(GCPlatformAPIClient.#FAILED);

			// Throw the error
			throw error;
		}

		// Set the client state to IDLE
		this.#changeState(GCPlatformAPIClient.#IDLE);

		// Remove the connect promise
		this.#connectPromise = null;

		return true;
	}

	/**
	 * Closes the Genesys Cloud Platform API client connection.
	 * @async
	 * @param {boolean} clearBacklog - If true, cancels all the API calls in the backlog queue.
	 * @returns {Promise<boolean>} A promise that fulfills to true if the client is gracefully disconnected.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR} If an internal error occurred while deleting the Genesys Cloud OAuth access token.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_RESPONSE_ERROR} If the Genesys Cloud OAuth access token deletion request returned an unexpected response.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_STATUS_CODE} If the Genesys Cloud OAuth access token deletion request returned an unexpected HTTP status code.
	 * @throws Errors thrown by the makeRequest() method of the HTTP client class.
	 */
	async #close(clearBacklog) {
		// Clears the backlog queue if the clearBacklog argument is true
		if (clearBacklog === true) {
			const backlogQueueAPICalls = this.#backlogQueue.removeAll();
			for (const currentAPICall of backlogQueueAPICalls) {
				currentAPICall.executionPromiseReject(new errors.ERROR_GC_PLATFORM_API_CLIENT_CLOSING());
			}
		}

		// Get the API calls promises from the queues
		const backlogQueueAPICallsPromises = this.#backlogQueue.peekAllPromises();
		const executionQueueAPICallsPromises = this.#executionQueue.peekAllPromises();

		// Wait for all the API calls in the backlog queue to finish
		await Promise.allSettled(backlogQueueAPICallsPromises);

		// Wait for all the API calls in the execution queue to finish
		await Promise.allSettled(executionQueueAPICallsPromises);

		// Delete the Genesys Cloud OAuth access token
		try {
			await this.#deleteAccessToken();
		} catch (error) /* istanbul ignore next: It is not possible to make the deleteAccessToken() method fail directly */ {
			// Set the client state to FAILED
			this.#changeState(GCPlatformAPIClient.#FAILED);

			// Throw the error
			throw error;
		}

		// Set the client state to CLOSED
		this.#changeState(GCPlatformAPIClient.#CLOSED);

		// Remove all event listeners to avoid memory leaks
		this.#internalEventEmitter.removeAllListeners();

		return true;
	}

	/**
	 * Refreshes the Genesys Cloud OAuth access token.
	 * @async
	 * @returns {Promise<boolean>} A promise that fulfills to true if the Genesys Cloud OAuth access token is refreshed.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR} If an internal error occurred while refreshing the Genesys Cloud OAuth access token.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_ID_NOT_FOUND} If the Genesys Cloud OAuth client ID is not found.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_AUTHENTICATION_FAILURE} If the Genesys Cloud OAuth authentication failed.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_RESPONSE_ERROR} If the Genesys Cloud OAuth access token request returned an unexpected response.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_STATUS_CODE} If the Genesys Cloud OAuth access token request returned an unexpected HTTP status code.
	 * @throws Errors thrown by the makeRequest() method of the HTTP client class.
	 */
	async #refreshAccessToken() {
		// Build the login request URL
		const loginRequestUrl = new URL("/oauth/token", this.#gcLoginUrl);

		// Build the login request options object
		const loginRequestOptions = {
			method: "POST",
			headers: {
				"Content-Type": "application/x-www-form-urlencoded",
				"Authorization": `Basic ${Buffer.from(this.#gcClientId + ":" + this.#gcClientSecret).toString("base64")}`
			},
			body: "grant_type=client_credentials",
			timeout: this.#socketTimeout,
			autoJSONResponseParse: true
		};

		// Request the Genesys Cloud OAuth access token
		for (let requestAttempt = 0; requestAttempt <= this.#maxRetries; requestAttempt++) {
			// Prepare the request data object
			const requestData = {
				requestURL: loginRequestUrl.toString(),
				requestMethod: loginRequestOptions.method,
				requestAttempts: requestAttempt,
				requestTimeout: this.#socketTimeout
			};

			// Enclose in a try/finally block to always emit an event with the result of the request at the end of the attempt
			try {
				// Apply exponential backoff logic
				if (requestAttempt > 0) {
					const waitTimeInMs = Math.pow(defaults.EXPONENTIAL_BACKOFF_TIME_IN_SECONDS, requestAttempt) * 1000;
					requestData.exponentialBackoffWaitTimeInMs = waitTimeInMs;
					this.#emit("accesstoken-refreshstart", requestData);
					delete requestData.exponentialBackoffWaitTimeInMs;
					await new SimpleTimer(waitTimeInMs).start();
				} else {
					this.#emit("accesstoken-refreshstart", requestData);
				}

				// Create an HTTP client instance
				let httpClient = null;
				try {
					httpClient = new HTTPClient(loginRequestUrl, loginRequestOptions);
				} catch (httpClientError) /* istanbul ignore next: It is not possible to make the HTTP client instantiation fail with correct arguments */ {
					const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR("An HTTP client error occurred during its creation.", httpClientError);
					requestData.requestResult = "ERROR";
					requestData.errorMessage = error.message;
					throw error;
				}

				// Make the login request and wait for the response
				let requestExecutionStartDate = null;
				let loginResponse = null;

				try {
					requestExecutionStartDate = new Date();
					loginResponse = await httpClient.makeRequest();
				} catch (httpRequestError) /* istanbul ignore next: It is not possible to make the HTTP client request fail */ {
					if (requestAttempt < this.#maxRetries) {
						requestData.requestResult = "RETRY";
						continue;
					} else {
						requestData.requestResult = "ERROR";
						requestData.errorMessage = httpRequestError.message;
						throw httpRequestError;
					}
				}

				// Add the HTTP status code and status message to the request data object
				requestData.requestStatusCode = loginResponse.statusCode;
				requestData.requestStatusMessage = loginResponse.statusMessage;
				requestData.requestExecutionTimeInMs = Date.now() - requestExecutionStartDate.getTime();

				// Process a 400 status code (bad request)
				if (loginResponse.statusCode === 400) {
					if (loginResponse.body?.error?.toLowerCase() === "invalid_client" && loginResponse.body?.description?.toLowerCase() === "client not found") {
						const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_ID_NOT_FOUND();
						requestData.requestResult = "ERROR";
						requestData.errorMessage = error.message;
						if ("inin-correlation-id" in loginResponse.headers) {
							error["inin-correlation-id"] = loginResponse.headers["inin-correlation-id"];
							requestData["inin-correlation-id"] = loginResponse.headers["inin-correlation-id"];
						}
						throw error;
					}

					if (loginResponse.body?.error?.toLowerCase() === "invalid_client" && loginResponse.body?.description?.toLowerCase() === "authentication failed") {
						const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_AUTHENTICATION_FAILURE();
						requestData.requestResult = "ERROR";
						requestData.errorMessage = error.message;
						if ("inin-correlation-id" in loginResponse.headers) {
							error["inin-correlation-id"] = loginResponse.headers["inin-correlation-id"];
							requestData["inin-correlation-id"] = loginResponse.headers["inin-correlation-id"];
						}
						throw error;
					}

					/* istanbul ignore next: It is not possible to make Genesys Cloud return bad data */
					{
						const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_RESPONSE_ERROR(loginResponse.body?.error);
						requestData.requestResult = "ERROR";
						requestData.errorMessage = error.message;
						if ("inin-correlation-id" in loginResponse.headers) {
							error["inin-correlation-id"] = loginResponse.headers["inin-correlation-id"];
							requestData["inin-correlation-id"] = loginResponse.headers["inin-correlation-id"];
						}
						throw error;
					}
				}

				// Process a 200 status code (OK)
				if (loginResponse.statusCode === 200) {
					try {
						this.#gcAccessToken = new GCAccessToken(loginResponse.body?.["access_token"], loginResponse.body?.["token_type"], loginResponse.body?.["expires_in"]);
						requestData.requestResult = "SUCCESS";
						requestData.tokenExpirationTime = this.#gcAccessToken.expires;
						return true;
					} catch (gcAccessTokenError) /* istanbul ignore next: It is not possible to make the Genesys Cloud access token instantiation fail with correct arguments */ {
						const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR("Failed to create the Genesys Cloud OAuth access Token instance.", gcAccessTokenError);
						requestData.requestResult = "ERROR";
						requestData.errorMessage = error.message;
						throw error;
					}
				}

				// Process a 429 status code (too many requests)
				/* istanbul ignore next: It is not possible to make Genesys Cloud return a 429 status code directly */
				if (loginResponse.statusCode === 429) {
					const gcPlatformAPICallRetryAfterHeader = parseInt(loginResponse.headers["retry-after"], 10);
					const waitTimeInMs = isNaN(gcPlatformAPICallRetryAfterHeader) === true ? defaults.RATE_LIMIT_WAIT_TIME_IN_MS : gcPlatformAPICallRetryAfterHeader * 1000;

					requestData.rateLimitWaitTimeInMs = waitTimeInMs;
					this.#emit("accesstoken-ratelimit", requestData);
					delete requestData.rateLimitWaitTimeInMs;

					await new SimpleTimer(waitTimeInMs).start();

					requestData.requestResult = "RETRY";
					// Status code 429 should not count towards the request attempts
					requestAttempt--;
					continue;
				}

				// Process retryable HTTP status codes
				if (constants.RETRYABLE_STATUS_CODES.includes(loginResponse.statusCode) === true && requestAttempt < this.#maxRetries) {
					requestData.requestResult = "RETRY";
					continue;
				}

				// Throw an error for any other status code
				/* istanbul ignore next: It is not possible to make Genesys Cloud return any other status code directly */
				{
					const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_STATUS_CODE(loginResponse.statusCode);
					requestData.requestResult = "ERROR";
					requestData.errorMessage = error.message;
					if ("inin-correlation-id" in loginResponse.headers) {
						error["inin-correlation-id"] = loginResponse.headers["inin-correlation-id"];
						requestData["inin-correlation-id"] = loginResponse.headers["inin-correlation-id"];
					}
					throw error;
				}
			} finally {
				this.#emit("accesstoken-refreshend", requestData);
			}
		}
	}

	/**
	 * Deletes the Genesys Cloud OAuth access token.
	 * @async
	 * @returns {Promise<boolean>} A promise that fulfills to true if the Genesys Cloud OAuth access token was deleted.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR} If an internal error occurred while deleting the Genesys Cloud OAuth access token.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_RESPONSE_ERROR} If the Genesys Cloud OAuth access token deletion request returned an unexpected response.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_STATUS_CODE} If the Genesys Cloud OAuth access token deletion request returned an unexpected HTTP status code.
	 * @throws Errors thrown by the makeRequest() method of the HTTP client class.
	 */
	async #deleteAccessToken() {
		// Checks if the Genesys Cloud OAuth access token exists
		/* istanbul ignore if: deleteAccessToken() can't be called when the access token is null because it is protected by the client state */
		if (this.#gcAccessToken === null) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR("There is no Genesys Cloud OAuth access token.");
		}

		/* istanbul ignore if: It is not possible to create an access token that is not an instance of GCAccessToken by design */
		if (this.#gcAccessToken instanceof GCAccessToken == false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR("The Genesys Cloud OAuth access token type is not valid.");
		}

		// Build the delete token request URL
		const deleteTokenRequestUrl = new URL("/api/v2/tokens/me", this.#gcPlatformApiUrl);

		// Build the delete token request options object
		const deleteTokenRequestOptions = {
			method: "DELETE",
			headers: {
				"Content-Type": "application/json",
				"Authorization": `Bearer ${this.#gcAccessToken.token}`
			},
			timeout: this.#socketTimeout,
			autoJSONResponseParse: true
		};

		// Delete the Genesys Cloud OAuth access token
		for (let requestAttempt = 0; requestAttempt <= this.#maxRetries; requestAttempt++) {
			// Prepare the request data object
			const requestData = {
				requestURL: deleteTokenRequestUrl.toString(),
				requestMethod: deleteTokenRequestOptions.method,
				requestAttempts: requestAttempt,
				requestTimeout: this.#socketTimeout
			};

			// Enclose in a try/finally block to always emit an event with the result of the request at the end of the attempt
			try {
				// Apply exponential backoff logic
				if (requestAttempt > 0) {
					const waitTimeInMs = Math.pow(defaults.EXPONENTIAL_BACKOFF_TIME_IN_SECONDS, requestAttempt) * 1000;
					requestData.exponentialBackoffWaitTimeInMs = waitTimeInMs;
					this.#emit("accesstoken-deletestart", requestData);
					delete requestData.exponentialBackoffWaitTimeInMs;
					await new SimpleTimer(waitTimeInMs).start();
				} else {
					this.#emit("accesstoken-deletestart", requestData);
				}

				// Create an HTTP client instance
				let httpClient = null;
				try {
					httpClient = new HTTPClient(deleteTokenRequestUrl, deleteTokenRequestOptions);
				} catch (httpClientError) /* istanbul ignore next: It is not possible to make the HTTP client instantiation fail with correct arguments */ {
					const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR("An HTTP client error occurred during its creation.", httpClientError);
					requestData.requestResult = "ERROR";
					requestData.errorMessage = error.message;
					throw error;
				}

				// Make the delete token request and wait for the response
				let requestExecutionStartDate = null;
				let deleteTokenResponse = null;

				try {
					requestExecutionStartDate = new Date();
					deleteTokenResponse = await httpClient.makeRequest();
				} catch (httpRequestError) {
					if (requestAttempt < this.#maxRetries) {
						requestData.requestResult = "RETRY";
						continue;
					} else {
						requestData.requestResult = "ERROR";
						requestData.errorMessage = httpRequestError.message;
						throw httpRequestError;
					}
				}

				// Add the HTTP status code and status message to the request data object
				requestData.requestStatusCode = deleteTokenResponse.statusCode;
				requestData.requestStatusMessage = deleteTokenResponse.statusMessage;
				requestData.requestExecutionTimeInMs = Date.now() - requestExecutionStartDate.getTime();

				// Process a 200 status code (OK)
				if (deleteTokenResponse.statusCode === 200) {
					this.#gcAccessToken = null;
					requestData.requestResult = "SUCCESS";
					return true;
				}

				// Process a 401 status code (unauthorized)
				if (deleteTokenResponse.statusCode === 401) {
					if (deleteTokenResponse.body?.code?.toLowerCase() === "bad.credentials") {
						this.#gcAccessToken = null;
						requestData.requestResult = "SUCCESS";
						return true;
					}

					/* istanbul ignore next: It is not possible to make Genesys Cloud return bad data */
					{
						const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_RESPONSE_ERROR(deleteTokenResponse.body?.error);
						requestData.requestResult = "ERROR";
						requestData.errorMessage = error.message;
						if ("inin-correlation-id" in deleteTokenResponse.headers) {
							error["inin-correlation-id"] = deleteTokenResponse.headers["inin-correlation-id"];
							requestData["inin-correlation-id"] = deleteTokenResponse.headers["inin-correlation-id"];
						}
						throw error;
					}
				}

				// Process a 429 status code (too many requests)
				/* istanbul ignore next: It is not possible to make Genesys Cloud return a 429 status code directly */
				if (deleteTokenResponse.statusCode === 429) {
					const gcPlatformAPICallRetryAfterHeader = parseInt(deleteTokenResponse.headers?.["retry-after"], 10);
					const waitTimeInMs = isNaN(gcPlatformAPICallRetryAfterHeader) === true ? defaults.RATE_LIMIT_WAIT_TIME_IN_MS : gcPlatformAPICallRetryAfterHeader * 1000;

					requestData.rateLimitWaitTimeInMs = waitTimeInMs;
					this.#emit("accesstoken-ratelimit", requestData);
					delete requestData.rateLimitWaitTimeInMs;

					await new SimpleTimer(waitTimeInMs).start();

					requestData.requestResult = "RETRY";
					// Status code 429 should not count towards the request attempts
					requestAttempt--;
					continue;
				}

				// Retryable HTTP status codes
				if (constants.RETRYABLE_STATUS_CODES.includes(deleteTokenResponse.statusCode) === true && requestAttempt < this.#maxRetries) {
					requestData.requestResult = "RETRY";
					continue;
				}

				// Throw an error for any other status code
				const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_UNEXPECTED_STATUS_CODE(deleteTokenResponse.statusCode);
				requestData.requestResult = "ERROR";
				requestData.errorMessage = error.message;
				if ("inin-correlation-id" in deleteTokenResponse.headers) {
					error["inin-correlation-id"] = deleteTokenResponse.headers["inin-correlation-id"];
					requestData["inin-correlation-id"] = deleteTokenResponse.headers["inin-correlation-id"];
				}
				throw error;
			} finally {
				this.#emit("accesstoken-deleteend", requestData);
			}
		}
	}

	/**
	 * Executes the backlog queue.
	 * @async
	 */
	async #executeBacklogQueue() {
		// If the backlog queue is empty, there is nothing to do
		if (this.#backlogQueue.length === 0) {
			return;
		}

		// If the execution timer is running, its callback will execute the backlog queue when it times out
		if (this.#executionTimer !== null) {
			return;
		}

		// If the Genesys Cloud OAuth access token is being renewed, the renewal process will execute the backlog queue when it finishes
		if (this.#gcAccessTokenRefreshInProgress) {
			return;
		}

		// Enclosed in a try/finally block as the state of the client must be checked at the end
		try {
			// Get the next Genesys Cloud Platform API call from the backlog queue
			// ⚠️ The Genesys Cloud Platform API call is in limbo at this point, do not use await
			const gcPlatformAPICall = this.#backlogQueue.popFront();

			if (this.#clientState === GCPlatformAPIClient.#IDLE) this.#changeState(GCPlatformAPIClient.#RUNNING);

			let gcPlatformAPICallResponsePromise = null;
			let gcPlatformAPICallExecutionStartDate = null;

			// Prepare the Genesys Cloud API call data object
			const gcPlatformAPICallData = {
				apiCallId: gcPlatformAPICall.id,
				apiCallCreationDate: new Date(gcPlatformAPICall.creationDate),
				endpointPath: gcPlatformAPICall.endpointPath,
				endpointMethod: gcPlatformAPICall.endpointMethod,
				apiCallRequestAttempts: gcPlatformAPICall.requestAttempts
			};

			this.#emit("apicall-start", gcPlatformAPICallData);

			try {
				// Execute the Genesys Cloud Platform API call and start the execution timer
				try {
					gcPlatformAPICallResponsePromise = this.#executeAPICall(gcPlatformAPICall);
					gcPlatformAPICallExecutionStartDate = new Date();
				} catch (error) {
					gcPlatformAPICall.executionPromiseReject(error);
					gcPlatformAPICallData.apiCallResult = "ERROR";
					gcPlatformAPICallData.errorMessage = error.message;
					return;
				} finally {
					// The execution timer should be started in any case
					this.#startBacklogQueueExecutionTimer(this.#timeBetweenRequests);
				}

				// Push the Genesys Cloud Platform API call to the execution queue
				// ✅ The Genesys Cloud Platform API call is no longer in limbo
				this.#executionQueue.pushBack(gcPlatformAPICall);

				// Wait for the Genesys Cloud Platform API call to finish
				let gcPlatformAPICallResponse = null;
				let gcPlatformAPICallError = null;

				try {
					gcPlatformAPICallResponse = await gcPlatformAPICallResponsePromise;
				} catch (error) {
					gcPlatformAPICallError = error;
				}

				gcPlatformAPICallData.apiCallExecutionTime = Date.now() - gcPlatformAPICallExecutionStartDate.getTime();

				// Refresh the Genesys Cloud OAuth access token if the HTTP status code is 401 and the error code is "bad.credentials"
				if (gcPlatformAPICallResponse !== null && gcPlatformAPICallResponse.statusCode === 401 && gcPlatformAPICallResponse.body?.code?.toLowerCase() === "bad.credentials") {
					// If the Genesys Cloud OAuth access token is already being refreshed, the renewal process will execute the backlog queue when it finishes
					if (this.#gcAccessTokenRefreshInProgress) {
						gcPlatformAPICallData.apiCallResult = "RETRY";
						gcPlatformAPICallData.apiCallRetryReason = "REFRESH_TOKEN";
						return;
					}

					this.#gcAccessTokenRefreshInProgress = true;

					try {
						await this.#refreshAccessToken();
					} catch (error) {
						gcPlatformAPICall.executionPromiseReject(error);
						gcPlatformAPICallData.apiCallResult = "ERROR";
						gcPlatformAPICallData.errorMessage = error.message;
						return;
					} finally {
						this.#gcAccessTokenRefreshInProgress = false;
					}

					gcPlatformAPICallData.apiCallResult = "RETRY";
					gcPlatformAPICallData.apiCallRetryReason = "REFRESH_TOKEN";
					return;
				}

				// Process a 429 status code (too many requests)
				if (gcPlatformAPICallResponse !== null && gcPlatformAPICallResponse.statusCode === 429) {
					const gcPlatformAPICallRetryAfterHeader = parseInt(gcPlatformAPICallResponse.headers?.["retry-after"], 10);
					const waitTimeInMs = isNaN(gcPlatformAPICallRetryAfterHeader) === true ? defaults.RATE_LIMIT_WAIT_TIME_IN_MS : gcPlatformAPICallRetryAfterHeader * 1000;

					let rateLimitExpirationDateRefreshed = false;

					if (this.#rateLimitExpirationDate.getTime() < Date.now() + waitTimeInMs) {
						this.#rateLimitExpirationDate = new Date(Date.now() + waitTimeInMs);
						this.#startBacklogQueueExecutionTimer(waitTimeInMs);
						rateLimitExpirationDateRefreshed = true;
					}

					gcPlatformAPICallData.apiCallResult = "RETRY";
					gcPlatformAPICallData.apiCallRetryReason = "RATE_LIMIT";
					gcPlatformAPICallData.apiCallRateLimitRetryWaitTime = waitTimeInMs;
					gcPlatformAPICallData.apiCallRateLimitExpirationDate = this.#rateLimitExpirationDate;
					gcPlatformAPICallData.apiCallRateLimitExpirationDateRefreshed = rateLimitExpirationDateRefreshed;
					return;
				}

				// From this point onwards, the executed Genesys Cloud Platform API call counts as a request attempt
				gcPlatformAPICall.incrementRequestAttempts();

				// Retry an HTTP client error
				if (gcPlatformAPICallError !== null) {
					if (gcPlatformAPICall.requestAttempts <= this.#maxRetries) {
						gcPlatformAPICallData.apiCallResult = "RETRY";
						gcPlatformAPICallData.apiCallRetryReason = "HTTP_CLIENT_ERROR";
					} else {
						gcPlatformAPICall.executionPromiseReject(gcPlatformAPICallError);
						gcPlatformAPICallData.apiCallResult = "ERROR";
						gcPlatformAPICallData.errorMessage = gcPlatformAPICallError.message;
					}
					return;
				}

				// Add the HTTP status code and status message to the Genesys Cloud Platform API call data object
				gcPlatformAPICallData.apiCallStatusCode = gcPlatformAPICallResponse.statusCode;
				gcPlatformAPICallData.apiCallStatusMessage = gcPlatformAPICallResponse.statusMessage;

				// Retry HTTP status codes that are retryable
				if (constants.RETRYABLE_STATUS_CODES.includes(gcPlatformAPICallResponse.statusCode) === true) {
					if (gcPlatformAPICall.requestAttempts <= this.#maxRetries) {
						gcPlatformAPICallData.apiCallResult = "RETRY";
						gcPlatformAPICallData.apiCallRetryReason = "RETRYABLE_STATUS_CODE";
					} else {
						gcPlatformAPICall.executionPromiseReject(gcPlatformAPICallResponse);
						gcPlatformAPICallData.apiCallResult = "ERROR";
						gcPlatformAPICallData.errorMessage = gcPlatformAPICallResponse.body?.message;
					}
					return;
				}

				// Return the Genesys Cloud Platform API call response if it was successful
				if (gcPlatformAPICallResponse !== null && gcPlatformAPICallResponse.statusCode >= 200 && gcPlatformAPICallResponse.statusCode < 300) {
					gcPlatformAPICall.executionPromiseResolve(gcPlatformAPICallResponse);
					gcPlatformAPICallData.apiCallResult = "SUCCESS";
					return;
				}

				// Throw an error, otherwise
				const error = new errors.ERROR_GC_PLATFORM_API_CLIENT_HTTP_STATUS_CODE_ERROR(gcPlatformAPICallResponse);
				gcPlatformAPICall.executionPromiseReject(error);
				gcPlatformAPICallData.apiCallResult = "ERROR";
				gcPlatformAPICallData.errorMessage = gcPlatformAPICallResponse.body?.message;
			} finally {
				if (gcPlatformAPICallData.apiCallResult === "RETRY" && gcPlatformAPICallData.apiCallRetryReason !== "RATE_LIMIT" && gcPlatformAPICallData.apiCallRetryReason !== "REFRESH_TOKEN") {
					const waitTimeInMs = Math.pow(defaults.EXPONENTIAL_BACKOFF_TIME_IN_SECONDS, gcPlatformAPICall.requestAttempts) * 1000;
					gcPlatformAPICallData.exponentialBackoffWaitTimeInMs = waitTimeInMs;
					await new SimpleTimer(waitTimeInMs).start();
				}

				// Emit the event with the result of the Genesys Cloud Platform API call
				this.#emit("apicall-end", gcPlatformAPICallData);

				// Remove the Genesys Cloud Platform API call from the execution queue
				this.#executionQueue.remove(gcPlatformAPICall);

				// Add the Genesys Cloud Platform API call to the backlog queue if its result was to retry
				if (gcPlatformAPICallData.apiCallResult === "RETRY") {
					this.#backlogQueue.pushFront(gcPlatformAPICall);
				}
			}
		} finally {
			if (this.#backlogQueue.length === 0 && this.#executionQueue.length === 0) {
				if (this.#clientState === GCPlatformAPIClient.#RUNNING) this.#changeState(GCPlatformAPIClient.#IDLE);
			}
		}
	}

	/**
	 * Executes an API call
	 * @async
	 * @param {GCPlatformAPICall} gcPlatformAPICall - The Genesys Cloud Platform API call object.
	 * @returns {Promise<HTTPResponse>} A promise that fulfills to an HTTP client response object.
	 * @throws {ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR} If an internal error occurred while creating the Genesys Cloud Platform API call.
	 * @throws Errors thrown by the makeRequest() method of the HTTP client class.
	 */
	async #executeAPICall(gcPlatformAPICall) {
		// Check the Genesys Cloud Platform API call argument
		if (typeof gcPlatformAPICall !== "object" || gcPlatformAPICall instanceof GCPlatformAPICall === false) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR("The Genesys Cloud Platform API call instance type is not valid. It must be an instance of GCPlatformAPICall.");
		}

		// Create the Genesys Cloud Platform API call request URL
		let apiCallRequestPath = gcPlatformAPICall.endpointPath;
		if (gcPlatformAPICall.pathParameters !== null) {
			for (const [pathParameterName, pathParameterValue] of Object.entries(gcPlatformAPICall.pathParameters)) {
				if (typeof pathParameterValue === "object" && Array.isArray(pathParameterValue) === false) {
					apiCallRequestPath = apiCallRequestPath.replace(`{${pathParameterName}}`, encodeURIComponent(JSON.stringify(pathParameterValue)));
				} else {
					apiCallRequestPath = apiCallRequestPath.replace(`{${pathParameterName}}`, encodeURIComponent(pathParameterValue));
				}
			}
		}

		if (gcPlatformAPICall.queryParameters !== null) {
			let apiCallRequestQueryStringEncodedParameters = [];
			for (const [queryParameterName, queryParameterValue] of Object.entries(gcPlatformAPICall.queryParameters)) {
				if (typeof queryParameterValue === "object" && Array.isArray(queryParameterValue) === false) {
					apiCallRequestQueryStringEncodedParameters.push(`${encodeURIComponent(queryParameterName)}=${encodeURIComponent(JSON.stringify(queryParameterValue))}`);
				} else {
					apiCallRequestQueryStringEncodedParameters.push(`${encodeURIComponent(queryParameterName)}=${encodeURIComponent(queryParameterValue)}`);
				}
			}
			if (apiCallRequestQueryStringEncodedParameters.length > 0) {
				apiCallRequestPath += "?" + apiCallRequestQueryStringEncodedParameters.join("&");
			}
		}

		let apiCallRequestURL = null;

		try {
			apiCallRequestURL = new URL(apiCallRequestPath, this.#gcPlatformApiUrl);
		} catch (urlError) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR("Failed to create the Genesys Cloud Platform API call request URL.", urlError);
		}

		// Create the Genesys Cloud Platform API call request options object
		const apiCallRequestOptions = {
			method: gcPlatformAPICall.endpointMethod,
			headers: {
				"Content-Type": "application/json",
				"Authorization": `Bearer ${this.#gcAccessToken.token}`
			},
			timeout: this.#socketTimeout,
			autoJSONResponseParse: true
		};

		if (gcPlatformAPICall.headers !== null) Object.assign(apiCallRequestOptions.headers, gcPlatformAPICall.headers);
		if (gcPlatformAPICall.body !== null) apiCallRequestOptions.body = gcPlatformAPICall.body;

		// Create an HTTP client instance
		let httpClient = null;
		try {
			httpClient = new HTTPClient(apiCallRequestURL, apiCallRequestOptions);
		} catch (httpClientError) {
			throw new errors.ERROR_GC_PLATFORM_API_CLIENT_INTERNAL_ERROR("An HTTP client error occurred during its creation.", httpClientError);
		}

		// Make the API call request and wait for the response
		const apiCallResponse = await httpClient.makeRequest();
		return apiCallResponse;
	}

	/**
	 * Starts the backlog queue execution timer. If the timer is already running, it is restarted with the new timeout.
	 * @param {number} timeoutInMs - The time in milliseconds to wait before executing the backlog queue.
	 */
	#startBacklogQueueExecutionTimer(timeoutInMs) {
		if (this.#executionTimer !== null) {
			clearTimeout(this.#executionTimer);
			this.#executionTimer = null;
		}

		this.#executionTimer = setTimeout(() => {
			this.#executionTimer = null;
			this.#executeBacklogQueue();
		}, timeoutInMs);
	}

	/**
	 * Emits an event using the internal event emitter.
	 * @param {string} eventName - The name of the event to emit.
	 * @param {object} eventData - The data to pass to the event listener. An "eventDate" property is added to the event data object with the current date and time.
	 * @returns {boolean} True if the event was emitted successfully. False if the event emitter is not instantiated or the passed arguments are not valid.
	 */
	#emit(eventName, eventData) {
		if (this.#internalEventEmitter === null) {
			return false;
		}

		if (typeof eventName !== "string") {
			return false;
		}

		if (typeof eventData !== "object") {
			return false;
		}

		this.#internalEventEmitter.emit(eventName, Object.assign({ eventDate: new Date() }, eventData));

		return true;
	}
}

Object.defineProperty(GCPlatformAPIClient.prototype, symbols.GCPlatformAPIClient, {
	configurable: false,
	enumerable: false,
	writable: false,
	value: symbols.GCPlatformAPIClient
});

export { GCPlatformAPIClient };
